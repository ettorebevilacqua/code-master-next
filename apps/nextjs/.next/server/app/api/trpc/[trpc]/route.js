"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/trpc/[trpc]/route";
exports.ids = ["app/api/trpc/[trpc]/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "@zenstackhq/runtime":
/*!**************************************!*\
  !*** external "@zenstackhq/runtime" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("@zenstackhq/runtime");

/***/ }),

/***/ "@zenstackhq/runtime/zod/input":
/*!************************************************!*\
  !*** external "@zenstackhq/runtime/zod/input" ***!
  \************************************************/
/***/ ((module) => {

module.exports = require("@zenstackhq/runtime/zod/input");

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "async_hooks":
/*!******************************!*\
  !*** external "async_hooks" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("async_hooks");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/../../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var _home_etto_prj_active_code_master_apps_nextjs_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/app/api/trpc/[trpc]/route.ts */ \"(rsc)/./src/app/api/trpc/[trpc]/route.ts\");\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/trpc/[trpc]/route\",\n        pathname: \"/api/trpc/[trpc]\",\n        filename: \"route\",\n        bundlePath: \"app/api/trpc/[trpc]/route\"\n    },\n    resolvedPagePath: \"/home/etto/prj/active/code-master/apps/nextjs/src/app/api/trpc/[trpc]/route.ts\",\n    nextConfigOutput,\n    userland: _home_etto_prj_active_code_master_apps_nextjs_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_2__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/trpc/[trpc]/route\";\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGdHJwYyUyRiU1QnRycGMlNUQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnRycGMlMkYlNUJ0cnBjJTVEJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdHJwYyUyRiU1QnRycGMlNUQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGaG9tZSUyRmV0dG8lMkZwcmolMkZhY3RpdmUlMkZjb2RlLW1hc3RlciUyRmFwcHMlMkZuZXh0anMlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZldHRvJTJGcHJqJTJGYWN0aXZlJTJGY29kZS1tYXN0ZXIlMkZhcHBzJTJGbmV4dGpzJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUM0QztBQUMzRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNpSjs7QUFFakoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvPzIzOWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL2hvbWUvZXR0by9wcmovYWN0aXZlL2NvZGUtbWFzdGVyL2FwcHMvbmV4dGpzL3NyYy9hcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90cnBjL1t0cnBjXS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RycGMvW3RycGNdXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL2V0dG8vcHJqL2FjdGl2ZS9jb2RlLW1hc3Rlci9hcHBzL25leHRqcy9zcmMvYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90cnBjL1t0cnBjXS9yb3V0ZVwiO1xuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/trpc/[trpc]/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/trpc/[trpc]/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _env_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/env.mjs */ \"(rsc)/./src/env.mjs\");\n/* harmony import */ var _trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server/adapters/fetch */ \"(rsc)/../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs\");\n/* harmony import */ var _acme_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @acme/api */ \"(rsc)/../../packages/api/index.ts\");\n\n\n\nconst handler = (req)=>(0,_trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_1__.fetchRequestHandler)({\n        endpoint: \"/api/trpc\",\n        req,\n        router: _acme_api__WEBPACK_IMPORTED_MODULE_2__.appRouter,\n        createContext: ()=>(0,_acme_api__WEBPACK_IMPORTED_MODULE_2__.createTRPCContext)({\n                req\n            }),\n        onError: _env_mjs__WEBPACK_IMPORTED_MODULE_0__.env.NODE_ENV === \"development\" ? ({ path, error })=>{\n            console.error(`❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`);\n        } : undefined\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNnQztBQUNrQztBQUVUO0FBRXpELE1BQU1JLFVBQVUsQ0FBQ0MsTUFDZkosZ0ZBQW1CQSxDQUFDO1FBQ2xCSyxVQUFVO1FBQ1ZEO1FBQ0FFLFFBQVFMLGdEQUFTQTtRQUNqQk0sZUFBZSxJQUFNTCw0REFBaUJBLENBQUM7Z0JBQUVFO1lBQUk7UUFDN0NJLFNBQ0VULHlDQUFHQSxDQUFDVSxRQUFRLEtBQUssZ0JBQ2IsQ0FBQyxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRTtZQUNkQyxRQUFRRCxLQUFLLENBQ1gsQ0FBQyxpQkFBaUIsRUFBRUQsUUFBUSxZQUFZLEVBQUUsRUFBRUMsTUFBTUUsT0FBTyxDQUFDLENBQUM7UUFFL0QsSUFDQUM7SUFDUjtBQUV5QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uL3NyYy9hcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlLnRzPzQzZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0UmVxdWVzdCB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgZW52IH0gZnJvbSBcIkAvZW52Lm1qc1wiO1xuaW1wb3J0IHsgZmV0Y2hSZXF1ZXN0SGFuZGxlciB9IGZyb20gXCJAdHJwYy9zZXJ2ZXIvYWRhcHRlcnMvZmV0Y2hcIjtcblxuaW1wb3J0IHsgYXBwUm91dGVyLCBjcmVhdGVUUlBDQ29udGV4dCB9IGZyb20gXCJAYWNtZS9hcGlcIjtcblxuY29uc3QgaGFuZGxlciA9IChyZXE6IE5leHRSZXF1ZXN0KSA9PlxuICBmZXRjaFJlcXVlc3RIYW5kbGVyKHtcbiAgICBlbmRwb2ludDogXCIvYXBpL3RycGNcIixcbiAgICByZXEsXG4gICAgcm91dGVyOiBhcHBSb3V0ZXIsXG4gICAgY3JlYXRlQ29udGV4dDogKCkgPT4gY3JlYXRlVFJQQ0NvbnRleHQoeyByZXEgfSksXG4gICAgb25FcnJvcjpcbiAgICAgIGVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiXG4gICAgICAgID8gKHsgcGF0aCwgZXJyb3IgfSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgYOKdjCB0UlBDIGZhaWxlZCBvbiAke3BhdGggPz8gXCI8bm8tcGF0aD5cIn06ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkLFxuICB9KTtcblxuZXhwb3J0IHsgaGFuZGxlciBhcyBHRVQsIGhhbmRsZXIgYXMgUE9TVCB9O1xuIl0sIm5hbWVzIjpbImVudiIsImZldGNoUmVxdWVzdEhhbmRsZXIiLCJhcHBSb3V0ZXIiLCJjcmVhdGVUUlBDQ29udGV4dCIsImhhbmRsZXIiLCJyZXEiLCJlbmRwb2ludCIsInJvdXRlciIsImNyZWF0ZUNvbnRleHQiLCJvbkVycm9yIiwiTk9ERV9FTlYiLCJwYXRoIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInVuZGVmaW5lZCIsIkdFVCIsIlBPU1QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/trpc/[trpc]/route.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/index.ts":
/*!***********************************!*\
  !*** ../../packages/api/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouter: () => (/* reexport safe */ _src_root__WEBPACK_IMPORTED_MODULE_0__.appRouter),\n/* harmony export */   createTRPCContext: () => (/* reexport safe */ _src_trpc__WEBPACK_IMPORTED_MODULE_1__.createTRPCContext)\n/* harmony export */ });\n/* harmony import */ var _src_root__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/root */ \"(rsc)/../../packages/api/src/root.ts\");\n/* harmony import */ var _src_trpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/trpc */ \"(rsc)/../../packages/api/src/trpc.ts\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJdUQ7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9wYWNrYWdlcy9hcGkvaW5kZXgudHM/ZjFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IGluZmVyUm91dGVySW5wdXRzLCBpbmZlclJvdXRlck91dHB1dHMgfSBmcm9tIFwiQHRycGMvc2VydmVyXCI7XG5cbmltcG9ydCB0eXBlIHsgQXBwUm91dGVyIH0gZnJvbSBcIi4vc3JjL3Jvb3RcIjtcblxuZXhwb3J0IHsgYXBwUm91dGVyLCB0eXBlIEFwcFJvdXRlciB9IGZyb20gXCIuL3NyYy9yb290XCI7XG5leHBvcnQgeyBjcmVhdGVUUlBDQ29udGV4dCB9IGZyb20gXCIuL3NyYy90cnBjXCI7XG5cbi8qKlxuICogSW5mZXJlbmNlIGhlbHBlcnMgZm9yIGlucHV0IHR5cGVzXG4gKiBAZXhhbXBsZSB0eXBlIEhlbGxvSW5wdXQgPSBSb3V0ZXJJbnB1dHNbJ2V4YW1wbGUnXVsnaGVsbG8nXVxuICoqL1xuZXhwb3J0IHR5cGUgUm91dGVySW5wdXRzID0gaW5mZXJSb3V0ZXJJbnB1dHM8QXBwUm91dGVyPjtcblxuLyoqXG4gKiBJbmZlcmVuY2UgaGVscGVycyBmb3Igb3V0cHV0IHR5cGVzXG4gKiBAZXhhbXBsZSB0eXBlIEhlbGxvT3V0cHV0ID0gUm91dGVyT3V0cHV0c1snZXhhbXBsZSddWydoZWxsbyddXG4gKiovXG5leHBvcnQgdHlwZSBSb3V0ZXJPdXRwdXRzID0gaW5mZXJSb3V0ZXJPdXRwdXRzPEFwcFJvdXRlcj47XG4iXSwibmFtZXMiOlsiYXBwUm91dGVyIiwiY3JlYXRlVFJQQ0NvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/index.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/helper.ts":
/*!**************************************************!*\
  !*** ../../packages/api/src/generated/helper.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkMutate: () => (/* binding */ checkMutate),\n/* harmony export */   checkRead: () => (/* binding */ checkRead)\n/* harmony export */ });\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var _zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime */ \"@zenstackhq/runtime\");\n/* harmony import */ var _zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */ \n\nasync function checkMutate(promise) {\n    try {\n        return await promise;\n    } catch (err) {\n        if ((0,_zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__.isPrismaClientKnownRequestError)(err)) {\n            if (err.code === \"P2004\") {\n                if (err.meta?.reason === \"RESULT_NOT_READABLE\") {\n                    // unable to readback data\n                    return undefined;\n                } else {\n                    // rejected by policy\n                    throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                        code: \"FORBIDDEN\",\n                        message: err.message,\n                        cause: err\n                    });\n                }\n            } else {\n                // request error\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"BAD_REQUEST\",\n                    message: err.message,\n                    cause: err\n                });\n            }\n        } else {\n            throw err;\n        }\n    }\n}\nasync function checkRead(promise) {\n    try {\n        return await promise;\n    } catch (err) {\n        if ((0,_zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__.isPrismaClientKnownRequestError)(err)) {\n            if (err.code === \"P2004\") {\n                // rejected by policy\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"FORBIDDEN\",\n                    message: err.message,\n                    cause: err\n                });\n            } else if (err.code === \"P2025\") {\n                // not found\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: err.message,\n                    cause: err\n                });\n            } else {\n                // request error\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"BAD_REQUEST\",\n                    message: err.message,\n                    cause: err\n                });\n            }\n        } else {\n            throw err;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9nZW5lcmF0ZWQvaGVscGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsa0JBQWtCLEdBQ3VCO0FBQzZCO0FBRS9ELGVBQWVFLFlBQWVDLE9BQW1CO0lBQ3BELElBQUk7UUFDQSxPQUFPLE1BQU1BO0lBQ2pCLEVBQUUsT0FBT0MsS0FBVTtRQUNmLElBQUlILG9GQUErQkEsQ0FBQ0csTUFBTTtZQUN0QyxJQUFJQSxJQUFJQyxJQUFJLEtBQUssU0FBUztnQkFDdEIsSUFBSUQsSUFBSUUsSUFBSSxFQUFFQyxXQUFXLHVCQUF1QjtvQkFDNUMsMEJBQTBCO29CQUMxQixPQUFPQztnQkFDWCxPQUFPO29CQUNILHFCQUFxQjtvQkFDckIsTUFBTSxJQUFJUixtREFBU0EsQ0FBQzt3QkFDaEJLLE1BQU07d0JBQ05JLFNBQVNMLElBQUlLLE9BQU87d0JBQ3BCQyxPQUFPTjtvQkFDWDtnQkFDSjtZQUNKLE9BQU87Z0JBQ0gsZ0JBQWdCO2dCQUNoQixNQUFNLElBQUlKLG1EQUFTQSxDQUFDO29CQUNoQkssTUFBTTtvQkFDTkksU0FBU0wsSUFBSUssT0FBTztvQkFDcEJDLE9BQU9OO2dCQUNYO1lBQ0o7UUFDSixPQUFPO1lBQ0gsTUFBTUE7UUFDVjtJQUNKO0FBQ0o7QUFFTyxlQUFlTyxVQUFhUixPQUFtQjtJQUNsRCxJQUFJO1FBQ0EsT0FBTyxNQUFNQTtJQUNqQixFQUFFLE9BQU9DLEtBQVU7UUFDZixJQUFJSCxvRkFBK0JBLENBQUNHLE1BQU07WUFDdEMsSUFBSUEsSUFBSUMsSUFBSSxLQUFLLFNBQVM7Z0JBQ3RCLHFCQUFxQjtnQkFDckIsTUFBTSxJQUFJTCxtREFBU0EsQ0FBQztvQkFDaEJLLE1BQU07b0JBQ05JLFNBQVNMLElBQUlLLE9BQU87b0JBQ3BCQyxPQUFPTjtnQkFDWDtZQUNKLE9BQU8sSUFBSUEsSUFBSUMsSUFBSSxLQUFLLFNBQVM7Z0JBQzdCLFlBQVk7Z0JBQ1osTUFBTSxJQUFJTCxtREFBU0EsQ0FBQztvQkFDaEJLLE1BQU07b0JBQ05JLFNBQVNMLElBQUlLLE9BQU87b0JBQ3BCQyxPQUFPTjtnQkFDWDtZQUNKLE9BQU87Z0JBQ0gsZ0JBQWdCO2dCQUNoQixNQUFNLElBQUlKLG1EQUFTQSxDQUFDO29CQUNoQkssTUFBTTtvQkFDTkksU0FBU0wsSUFBSUssT0FBTztvQkFDcEJDLE9BQU9OO2dCQUNYO1lBQ0o7UUFDSixPQUFPO1lBQ0gsTUFBTUE7UUFDVjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9nZW5lcmF0ZWQvaGVscGVyLnRzPzAyZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IFRSUENFcnJvciB9IGZyb20gJ0B0cnBjL3NlcnZlcic7XG5pbXBvcnQgeyBpc1ByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yIH0gZnJvbSAnQHplbnN0YWNraHEvcnVudGltZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja011dGF0ZTxUPihwcm9taXNlOiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHByb21pc2U7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgaWYgKGlzUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3IoZXJyKSkge1xuICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSAnUDIwMDQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5tZXRhPy5yZWFzb24gPT09ICdSRVNVTFRfTk9UX1JFQURBQkxFJykge1xuICAgICAgICAgICAgICAgICAgICAvLyB1bmFibGUgdG8gcmVhZGJhY2sgZGF0YVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlamVjdGVkIGJ5IHBvbGljeVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGT1JCSURERU4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXVzZTogZXJyLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHJlcXVlc3QgZXJyb3JcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0JBRF9SRVFVRVNUJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja1JlYWQ8VD4ocHJvbWlzZTogUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9taXNlO1xuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICAgIGlmIChpc1ByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yKGVycikpIHtcbiAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ1AyMDA0Jykge1xuICAgICAgICAgICAgICAgIC8vIHJlamVjdGVkIGJ5IHBvbGljeVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRk9SQklEREVOJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVyci5jb2RlID09PSAnUDIwMjUnKSB7XG4gICAgICAgICAgICAgICAgLy8gbm90IGZvdW5kXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdOT1RfRk9VTkQnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVxdWVzdCBlcnJvclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnQkFEX1JFUVVFU1QnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJUUlBDRXJyb3IiLCJpc1ByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yIiwiY2hlY2tNdXRhdGUiLCJwcm9taXNlIiwiZXJyIiwiY29kZSIsIm1ldGEiLCJyZWFzb24iLCJ1bmRlZmluZWQiLCJtZXNzYWdlIiwiY2F1c2UiLCJjaGVja1JlYWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/helper.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/routers/Account.router.ts":
/*!******************************************************************!*\
  !*** ../../packages/api/src/generated/routers/Account.router.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createRouter)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(rsc)/../../packages/api/src/generated/routers/index.ts\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime/zod/input */ \"@zenstackhq/runtime/zod/input\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper */ \"(rsc)/../../packages/api/src/generated/helper.ts\");\n/* eslint-disable */ \n\n\nfunction createRouter(router, procedure) {\n    return router({\n        aggregate: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).aggregate).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.aggregate(input))),\n        create: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).create).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.create(input))),\n        deleteMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).deleteMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.deleteMany(input))),\n        delete: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).delete).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.delete(input))),\n        findFirst: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.findFirst(input))),\n        findFirstOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.findFirstOrThrow(input))),\n        findMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).findMany).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.findMany(input))),\n        findUnique: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.findUnique(input))),\n        findUniqueOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.findUniqueOrThrow(input))),\n        groupBy: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).groupBy).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.groupBy(input))),\n        updateMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).updateMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.updateMany(input))),\n        update: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).update).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.update(input))),\n        upsert: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).upsert).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.upsert(input))),\n        count: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().AccountInputSchema).count).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).account.count(input)))\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/routers/Account.router.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/routers/Post.router.ts":
/*!***************************************************************!*\
  !*** ../../packages/api/src/generated/routers/Post.router.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createRouter)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(rsc)/../../packages/api/src/generated/routers/index.ts\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime/zod/input */ \"@zenstackhq/runtime/zod/input\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper */ \"(rsc)/../../packages/api/src/generated/helper.ts\");\n/* eslint-disable */ \n\n\nfunction createRouter(router, procedure) {\n    return router({\n        aggregate: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).aggregate).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.aggregate(input))),\n        create: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).create).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.create(input))),\n        deleteMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).deleteMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.deleteMany(input))),\n        delete: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).delete).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.delete(input))),\n        findFirst: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.findFirst(input))),\n        findFirstOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.findFirstOrThrow(input))),\n        findMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).findMany).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.findMany(input))),\n        findUnique: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.findUnique(input))),\n        findUniqueOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.findUniqueOrThrow(input))),\n        groupBy: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).groupBy).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.groupBy(input))),\n        updateMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).updateMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.updateMany(input))),\n        update: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).update).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.update(input))),\n        upsert: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).upsert).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.upsert(input))),\n        count: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().PostInputSchema).count).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).post.count(input)))\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/routers/Post.router.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/routers/Session.router.ts":
/*!******************************************************************!*\
  !*** ../../packages/api/src/generated/routers/Session.router.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createRouter)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(rsc)/../../packages/api/src/generated/routers/index.ts\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime/zod/input */ \"@zenstackhq/runtime/zod/input\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper */ \"(rsc)/../../packages/api/src/generated/helper.ts\");\n/* eslint-disable */ \n\n\nfunction createRouter(router, procedure) {\n    return router({\n        aggregate: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).aggregate).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.aggregate(input))),\n        create: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).create).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.create(input))),\n        deleteMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).deleteMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.deleteMany(input))),\n        delete: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).delete).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.delete(input))),\n        findFirst: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.findFirst(input))),\n        findFirstOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.findFirstOrThrow(input))),\n        findMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).findMany).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.findMany(input))),\n        findUnique: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.findUnique(input))),\n        findUniqueOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.findUniqueOrThrow(input))),\n        groupBy: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).groupBy).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.groupBy(input))),\n        updateMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).updateMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.updateMany(input))),\n        update: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).update).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.update(input))),\n        upsert: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).upsert).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.upsert(input))),\n        count: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().SessionInputSchema).count).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).session.count(input)))\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/routers/Session.router.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/routers/User.router.ts":
/*!***************************************************************!*\
  !*** ../../packages/api/src/generated/routers/User.router.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createRouter)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(rsc)/../../packages/api/src/generated/routers/index.ts\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime/zod/input */ \"@zenstackhq/runtime/zod/input\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper */ \"(rsc)/../../packages/api/src/generated/helper.ts\");\n/* eslint-disable */ \n\n\nfunction createRouter(router, procedure) {\n    return router({\n        aggregate: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).aggregate).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.aggregate(input))),\n        create: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).create).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.create(input))),\n        deleteMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).deleteMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.deleteMany(input))),\n        delete: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).delete).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.delete(input))),\n        findFirst: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.findFirst(input))),\n        findFirstOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.findFirstOrThrow(input))),\n        findMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).findMany).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.findMany(input))),\n        findUnique: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.findUnique(input))),\n        findUniqueOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.findUniqueOrThrow(input))),\n        groupBy: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).groupBy).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.groupBy(input))),\n        updateMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).updateMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.updateMany(input))),\n        update: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).update).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.update(input))),\n        upsert: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).upsert).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.upsert(input))),\n        count: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().UserInputSchema).count).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).user.count(input)))\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/routers/User.router.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/routers/VerificationToken.router.ts":
/*!****************************************************************************!*\
  !*** ../../packages/api/src/generated/routers/VerificationToken.router.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createRouter)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(rsc)/../../packages/api/src/generated/routers/index.ts\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime/zod/input */ \"@zenstackhq/runtime/zod/input\");\n/* harmony import */ var _zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper */ \"(rsc)/../../packages/api/src/generated/helper.ts\");\n/* eslint-disable */ \n\n\nfunction createRouter(router, procedure) {\n    return router({\n        aggregate: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).aggregate).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.aggregate(input))),\n        create: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).create).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.create(input))),\n        deleteMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).deleteMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.deleteMany(input))),\n        delete: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).delete).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.delete(input))),\n        findFirst: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.findFirst(input))),\n        findFirstOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).findFirst).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.findFirstOrThrow(input))),\n        findMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).findMany).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.findMany(input))),\n        findUnique: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.findUnique(input))),\n        findUniqueOrThrow: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).findUnique).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.findUniqueOrThrow(input))),\n        groupBy: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).groupBy).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.groupBy(input))),\n        updateMany: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).updateMany).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.updateMany(input))),\n        update: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).update).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.update(input))),\n        upsert: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).upsert).mutation(async ({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkMutate)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.upsert(input))),\n        count: procedure.input((_zenstackhq_runtime_zod_input__WEBPACK_IMPORTED_MODULE_1___default().VerificationTokenInputSchema).count).query(({ ctx, input })=>(0,_helper__WEBPACK_IMPORTED_MODULE_2__.checkRead)((0,___WEBPACK_IMPORTED_MODULE_0__.db)(ctx).verificationToken.count(input)))\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/routers/VerificationToken.router.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/generated/routers/index.ts":
/*!*********************************************************!*\
  !*** ../../packages/api/src/generated/routers/index.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrismaClient: () => (/* reexport safe */ _node_modules_prisma_client__WEBPACK_IMPORTED_MODULE_5__.PrismaClient),\n/* harmony export */   createRouter: () => (/* binding */ createRouter),\n/* harmony export */   db: () => (/* binding */ db)\n/* harmony export */ });\n/* harmony import */ var _User_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./User.router */ \"(rsc)/../../packages/api/src/generated/routers/User.router.ts\");\n/* harmony import */ var _Post_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Post.router */ \"(rsc)/../../packages/api/src/generated/routers/Post.router.ts\");\n/* harmony import */ var _Account_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Account.router */ \"(rsc)/../../packages/api/src/generated/routers/Account.router.ts\");\n/* harmony import */ var _Session_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Session.router */ \"(rsc)/../../packages/api/src/generated/routers/Session.router.ts\");\n/* harmony import */ var _VerificationToken_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VerificationToken.router */ \"(rsc)/../../packages/api/src/generated/routers/VerificationToken.router.ts\");\n/* harmony import */ var _node_modules_prisma_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../node_modules/.prisma/client */ \"(rsc)/../../node_modules/.prisma/client/index.js\");\n/* harmony import */ var _node_modules_prisma_client__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_prisma_client__WEBPACK_IMPORTED_MODULE_5__);\n/* eslint-disable */ \n\n\n\n\n\nfunction db(ctx) {\n    if (!ctx.prisma) {\n        throw new Error('Missing \"prisma\" field in trpc context');\n    }\n    return ctx.prisma;\n}\nfunction createRouter(router, procedure) {\n    return router({\n        user: (0,_User_router__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(router, procedure),\n        post: (0,_Post_router__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(router, procedure),\n        account: (0,_Account_router__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(router, procedure),\n        session: (0,_Session_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(router, procedure),\n        verificationToken: (0,_VerificationToken_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(router, procedure)\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9nZW5lcmF0ZWQvcm91dGVycy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsa0JBQWtCLEdBYTJCO0FBQ0E7QUFDTTtBQUNBO0FBQ29CO0FBT0c7QUE0Q25FLFNBQVNNLEdBQUdDLEdBQVE7SUFDdkIsSUFBSSxDQUFDQSxJQUFJQyxNQUFNLEVBQUU7UUFDYixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQSxPQUFPRixJQUFJQyxNQUFNO0FBQ3JCO0FBRU8sU0FBU0UsYUFDWkMsTUFBYyxFQUNkQyxTQUFlO0lBRWYsT0FBT0QsT0FBTztRQUNWRSxNQUFNYix3REFBZ0JBLENBQWVXLFFBQVFDO1FBQzdDRSxNQUFNYix3REFBZ0JBLENBQWVVLFFBQVFDO1FBQzdDRyxTQUFTYiwyREFBbUJBLENBQWVTLFFBQVFDO1FBQ25ESSxTQUFTYiwyREFBbUJBLENBQWVRLFFBQVFDO1FBQ25ESyxtQkFBbUJiLHFFQUE2QkEsQ0FBZU8sUUFBUUM7SUFDM0U7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9wYWNrYWdlcy9hcGkvc3JjL2dlbmVyYXRlZC9yb3V0ZXJzL2luZGV4LnRzPzRmZjUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7XG4gICAgdHlwZSBBbnlSb3V0ZXIsXG4gICAgdHlwZSBBbnlSb290Q29uZmlnLFxuICAgIHR5cGUgQ3JlYXRlUm91dGVySW5uZXIsXG4gICAgdHlwZSBQcm9jZWR1cmUsXG4gICAgdHlwZSBQcm9jZWR1cmVCdWlsZGVyLFxuICAgIHR5cGUgUHJvY2VkdXJlUGFyYW1zLFxuICAgIHR5cGUgUHJvY2VkdXJlUm91dGVyUmVjb3JkLFxuICAgIHR5cGUgUHJvY2VkdXJlVHlwZSxcbn0gZnJvbSAnQHRycGMvc2VydmVyJztcbmltcG9ydCB7IHR5cGUgUHJpc21hQ2xpZW50LCB0eXBlIFByaXNtYSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucHJpc21hL2NsaWVudCc7XG5pbXBvcnQgdHlwZSB6IGZyb20gJ3pvZCc7XG5pbXBvcnQgY3JlYXRlVXNlclJvdXRlciBmcm9tICcuL1VzZXIucm91dGVyJztcbmltcG9ydCBjcmVhdGVQb3N0Um91dGVyIGZyb20gJy4vUG9zdC5yb3V0ZXInO1xuaW1wb3J0IGNyZWF0ZUFjY291bnRSb3V0ZXIgZnJvbSAnLi9BY2NvdW50LnJvdXRlcic7XG5pbXBvcnQgY3JlYXRlU2Vzc2lvblJvdXRlciBmcm9tICcuL1Nlc3Npb24ucm91dGVyJztcbmltcG9ydCBjcmVhdGVWZXJpZmljYXRpb25Ub2tlblJvdXRlciBmcm9tICcuL1ZlcmlmaWNhdGlvblRva2VuLnJvdXRlcic7XG5pbXBvcnQgeyBDbGllbnRUeXBlIGFzIFVzZXJDbGllbnRUeXBlIH0gZnJvbSAnLi9Vc2VyLnJvdXRlcic7XG5pbXBvcnQgeyBDbGllbnRUeXBlIGFzIFBvc3RDbGllbnRUeXBlIH0gZnJvbSAnLi9Qb3N0LnJvdXRlcic7XG5pbXBvcnQgeyBDbGllbnRUeXBlIGFzIEFjY291bnRDbGllbnRUeXBlIH0gZnJvbSAnLi9BY2NvdW50LnJvdXRlcic7XG5pbXBvcnQgeyBDbGllbnRUeXBlIGFzIFNlc3Npb25DbGllbnRUeXBlIH0gZnJvbSAnLi9TZXNzaW9uLnJvdXRlcic7XG5pbXBvcnQgeyBDbGllbnRUeXBlIGFzIFZlcmlmaWNhdGlvblRva2VuQ2xpZW50VHlwZSB9IGZyb20gJy4vVmVyaWZpY2F0aW9uVG9rZW4ucm91dGVyJztcblxuZXhwb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wcmlzbWEvY2xpZW50JztcblxuZXhwb3J0IHR5cGUgQmFzZUNvbmZpZyA9IEFueVJvb3RDb25maWc7XG5cbmV4cG9ydCB0eXBlIFJvdXRlckZhY3Rvcnk8Q29uZmlnIGV4dGVuZHMgQmFzZUNvbmZpZz4gPSA8UHJvY1JvdXRlclJlY29yZCBleHRlbmRzIFByb2NlZHVyZVJvdXRlclJlY29yZD4oXG4gICAgcHJvY2VkdXJlczogUHJvY1JvdXRlclJlY29yZCxcbikgPT4gQ3JlYXRlUm91dGVySW5uZXI8Q29uZmlnLCBQcm9jUm91dGVyUmVjb3JkPjtcblxuZXhwb3J0IHR5cGUgUHJvY0J1aWxkZXI8Q29uZmlnIGV4dGVuZHMgQmFzZUNvbmZpZz4gPSBQcm9jZWR1cmVCdWlsZGVyPHtcbiAgICBfY29uZmlnOiBDb25maWc7XG4gICAgX2N0eF9vdXQ6IENvbmZpZ1snJHR5cGVzJ11bJ2N0eCddO1xuICAgIF9pbnB1dF9pbjogYW55O1xuICAgIF9pbnB1dF9vdXQ6IGFueTtcbiAgICBfb3V0cHV0X2luOiBhbnk7XG4gICAgX291dHB1dF9vdXQ6IGFueTtcbiAgICBfbWV0YTogQ29uZmlnWyckdHlwZXMnXVsnbWV0YSddO1xufT47XG5cbnR5cGUgRXh0cmFjdFBhcmFtc0Zyb21Qcm9jQnVpbGRlcjxCdWlsZGVyIGV4dGVuZHMgUHJvY2VkdXJlQnVpbGRlcjxhbnk+PiA9IEJ1aWxkZXIgZXh0ZW5kcyBQcm9jZWR1cmVCdWlsZGVyPGluZmVyIFA+XG4gICAgPyBQXG4gICAgOiBuZXZlcjtcblxudHlwZSBGcm9tUHJvbWlzZTxQIGV4dGVuZHMgUHJvbWlzZTxhbnk+PiA9IFAgZXh0ZW5kcyBQcm9taXNlPGluZmVyIFQ+ID8gVCA6IG5ldmVyO1xuXG50eXBlIEpvaW48QSwgQj4gPSBBIGV4dGVuZHMgc3ltYm9sID8gQiA6IEEgJiBCO1xuXG5leHBvcnQgdHlwZSBQcm9jUmV0dXJuczxcbiAgICBQVHlwZSBleHRlbmRzIFByb2NlZHVyZVR5cGUsXG4gICAgUEJ1aWxkZXIgZXh0ZW5kcyBQcm9jQnVpbGRlcjxCYXNlQ29uZmlnPixcbiAgICBaVHlwZSBleHRlbmRzIHouWm9kVHlwZSxcbiAgICBQUHJvbWlzZSBleHRlbmRzIFByaXNtYS5QcmlzbWFQcm9taXNlPGFueT4sXG4+ID0gUHJvY2VkdXJlPFxuICAgIFBUeXBlLFxuICAgIFByb2NlZHVyZVBhcmFtczxcbiAgICAgICAgRXh0cmFjdFBhcmFtc0Zyb21Qcm9jQnVpbGRlcjxQQnVpbGRlcj5bJ19jb25maWcnXSxcbiAgICAgICAgRXh0cmFjdFBhcmFtc0Zyb21Qcm9jQnVpbGRlcjxQQnVpbGRlcj5bJ19jdHhfb3V0J10sXG4gICAgICAgIEpvaW48RXh0cmFjdFBhcmFtc0Zyb21Qcm9jQnVpbGRlcjxQQnVpbGRlcj5bJ19pbnB1dF9pbiddLCB6LmluZmVyPFpUeXBlPj4sXG4gICAgICAgIEpvaW48RXh0cmFjdFBhcmFtc0Zyb21Qcm9jQnVpbGRlcjxQQnVpbGRlcj5bJ19pbnB1dF9vdXQnXSwgei5pbmZlcjxaVHlwZT4+LFxuICAgICAgICBKb2luPEV4dHJhY3RQYXJhbXNGcm9tUHJvY0J1aWxkZXI8UEJ1aWxkZXI+Wydfb3V0cHV0X2luJ10sIEZyb21Qcm9taXNlPFBQcm9taXNlPj4sXG4gICAgICAgIEpvaW48RXh0cmFjdFBhcmFtc0Zyb21Qcm9jQnVpbGRlcjxQQnVpbGRlcj5bJ19vdXRwdXRfb3V0J10sIEZyb21Qcm9taXNlPFBQcm9taXNlPj4sXG4gICAgICAgIEV4dHJhY3RQYXJhbXNGcm9tUHJvY0J1aWxkZXI8UEJ1aWxkZXI+WydfbWV0YSddXG4gICAgPlxuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRiKGN0eDogYW55KSB7XG4gICAgaWYgKCFjdHgucHJpc21hKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcInByaXNtYVwiIGZpZWxkIGluIHRycGMgY29udGV4dCcpO1xuICAgIH1cbiAgICByZXR1cm4gY3R4LnByaXNtYSBhcyBQcmlzbWFDbGllbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXI8Um91dGVyIGV4dGVuZHMgUm91dGVyRmFjdG9yeTxCYXNlQ29uZmlnPiwgUHJvYyBleHRlbmRzIFByb2NCdWlsZGVyPEJhc2VDb25maWc+PihcbiAgICByb3V0ZXI6IFJvdXRlcixcbiAgICBwcm9jZWR1cmU6IFByb2MsXG4pIHtcbiAgICByZXR1cm4gcm91dGVyKHtcbiAgICAgICAgdXNlcjogY3JlYXRlVXNlclJvdXRlcjxSb3V0ZXIsIFByb2M+KHJvdXRlciwgcHJvY2VkdXJlKSxcbiAgICAgICAgcG9zdDogY3JlYXRlUG9zdFJvdXRlcjxSb3V0ZXIsIFByb2M+KHJvdXRlciwgcHJvY2VkdXJlKSxcbiAgICAgICAgYWNjb3VudDogY3JlYXRlQWNjb3VudFJvdXRlcjxSb3V0ZXIsIFByb2M+KHJvdXRlciwgcHJvY2VkdXJlKSxcbiAgICAgICAgc2Vzc2lvbjogY3JlYXRlU2Vzc2lvblJvdXRlcjxSb3V0ZXIsIFByb2M+KHJvdXRlciwgcHJvY2VkdXJlKSxcbiAgICAgICAgdmVyaWZpY2F0aW9uVG9rZW46IGNyZWF0ZVZlcmlmaWNhdGlvblRva2VuUm91dGVyPFJvdXRlciwgUHJvYz4ocm91dGVyLCBwcm9jZWR1cmUpLFxuICAgIH0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWVudFR5cGU8QXBwUm91dGVyIGV4dGVuZHMgQW55Um91dGVyPiB7XG4gICAgdXNlcjogVXNlckNsaWVudFR5cGU8QXBwUm91dGVyPjtcbiAgICBwb3N0OiBQb3N0Q2xpZW50VHlwZTxBcHBSb3V0ZXI+O1xuICAgIGFjY291bnQ6IEFjY291bnRDbGllbnRUeXBlPEFwcFJvdXRlcj47XG4gICAgc2Vzc2lvbjogU2Vzc2lvbkNsaWVudFR5cGU8QXBwUm91dGVyPjtcbiAgICB2ZXJpZmljYXRpb25Ub2tlbjogVmVyaWZpY2F0aW9uVG9rZW5DbGllbnRUeXBlPEFwcFJvdXRlcj47XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlVXNlclJvdXRlciIsImNyZWF0ZVBvc3RSb3V0ZXIiLCJjcmVhdGVBY2NvdW50Um91dGVyIiwiY3JlYXRlU2Vzc2lvblJvdXRlciIsImNyZWF0ZVZlcmlmaWNhdGlvblRva2VuUm91dGVyIiwiUHJpc21hQ2xpZW50IiwiZGIiLCJjdHgiLCJwcmlzbWEiLCJFcnJvciIsImNyZWF0ZVJvdXRlciIsInJvdXRlciIsInByb2NlZHVyZSIsInVzZXIiLCJwb3N0IiwiYWNjb3VudCIsInNlc3Npb24iLCJ2ZXJpZmljYXRpb25Ub2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/generated/routers/index.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/root.ts":
/*!**************************************!*\
  !*** ../../packages/api/src/root.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouter: () => (/* binding */ appRouter)\n/* harmony export */ });\n/* harmony import */ var _generated_routers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/routers */ \"(rsc)/../../packages/api/src/generated/routers/index.ts\");\n/* harmony import */ var _routers_post__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./routers/post */ \"(rsc)/../../packages/api/src/routers/post.ts\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./trpc */ \"(rsc)/../../packages/api/src/trpc.ts\");\n\n\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */ // Flatten version\nconst mergeRouters = _trpc__WEBPACK_IMPORTED_MODULE_2__.t.mergeRouters;\nconst appRouter = mergeRouters(_routers_post__WEBPACK_IMPORTED_MODULE_1__.postRouter, (0,_generated_routers__WEBPACK_IMPORTED_MODULE_0__.createRouter)(_trpc__WEBPACK_IMPORTED_MODULE_2__.t.router, _trpc__WEBPACK_IMPORTED_MODULE_2__.t.procedure));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9yb290LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEU7QUFDaEM7QUFDakI7QUFFM0I7Ozs7Q0FJQyxHQUNELGtCQUFrQjtBQUNsQixNQUFNSSxlQUFlRCxvQ0FBQ0EsQ0FBQ0MsWUFBWTtBQUM1QixNQUFNQyxZQUFZRCxhQUN2QkYscURBQVVBLEVBQ1ZELGdFQUFxQkEsQ0FBQ0Usb0NBQUNBLENBQUNHLE1BQU0sRUFBRUgsb0NBQUNBLENBQUNJLFNBQVMsR0FDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9yb290LnRzP2ZmY2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUm91dGVyIGFzIGNyZWF0ZUdlbmVyYXRlZFJvdXRlciB9IGZyb20gXCIuL2dlbmVyYXRlZC9yb3V0ZXJzXCI7XG5pbXBvcnQgeyBwb3N0Um91dGVyIH0gZnJvbSBcIi4vcm91dGVycy9wb3N0XCI7XG5pbXBvcnQgeyB0IH0gZnJvbSBcIi4vdHJwY1wiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHByaW1hcnkgcm91dGVyIGZvciB5b3VyIHNlcnZlci5cbiAqXG4gKiBBbGwgcm91dGVycyBhZGRlZCBpbiAvYXBpL3JvdXRlcnMgc2hvdWxkIGJlIG1hbnVhbGx5IGFkZGVkIGhlcmUuXG4gKi9cbi8vIEZsYXR0ZW4gdmVyc2lvblxuY29uc3QgbWVyZ2VSb3V0ZXJzID0gdC5tZXJnZVJvdXRlcnM7XG5leHBvcnQgY29uc3QgYXBwUm91dGVyID0gbWVyZ2VSb3V0ZXJzKFxuICBwb3N0Um91dGVyLFxuICBjcmVhdGVHZW5lcmF0ZWRSb3V0ZXIodC5yb3V0ZXIsIHQucHJvY2VkdXJlKSxcbik7XG5cbi8vIENsYXNzaWMgdmVyc2lvbiAocm91dGVycyB1bmRlciBuYW1lc3BhY2VzKVxuLy8gZXhwb3J0IGNvbnN0IGFwcFJvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuLy8gICBwb3N0OiBwb3N0Um91dGVyLFxuLy8gICBnZW5lcmF0ZWQ6IGNyZWF0ZUdlbmVyYXRlZFJvdXRlcih0LnJvdXRlciwgdC5wcm9jZWR1cmUpLFxuLy8gfSk7XG5cbi8vIGV4cG9ydCB0eXBlIGRlZmluaXRpb24gb2YgQVBJXG5leHBvcnQgdHlwZSBBcHBSb3V0ZXIgPSB0eXBlb2YgYXBwUm91dGVyO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVJvdXRlciIsImNyZWF0ZUdlbmVyYXRlZFJvdXRlciIsInBvc3RSb3V0ZXIiLCJ0IiwibWVyZ2VSb3V0ZXJzIiwiYXBwUm91dGVyIiwicm91dGVyIiwicHJvY2VkdXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/root.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/routers/post.ts":
/*!**********************************************!*\
  !*** ../../packages/api/src/routers/post.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postRouter: () => (/* binding */ postRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/../../packages/api/src/trpc.ts\");\n\n\nconst postRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    hello: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        text: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n    })).query(({ input })=>{\n        return {\n            greeting: `Hello ${input.text}`\n        };\n    }),\n    createPost: _trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1)\n    })).mutation(({ ctx, input })=>{\n        const { prisma, session } = ctx;\n        return prisma.post.create({\n            data: {\n                name: input.name,\n                authorId: session.user.id\n            }\n        });\n    }),\n    getLatestPost: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(({ ctx })=>{\n        return ctx.prisma.post.findFirst({\n            where: {\n                authorId: ctx.session?.user.id\n            },\n            orderBy: {\n                createdAt: \"desc\"\n            }\n        });\n    })\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9yb3V0ZXJzL3Bvc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdCO0FBRXdEO0FBRXpFLE1BQU1JLGFBQWFILHVEQUFnQkEsQ0FBQztJQUN6Q0ksT0FBT0Ysa0RBQWVBLENBQ25CRyxLQUFLLENBQUNOLGtDQUFDQSxDQUFDTyxNQUFNLENBQUM7UUFBRUMsTUFBTVIsa0NBQUNBLENBQUNTLE1BQU07SUFBRyxJQUNsQ0MsS0FBSyxDQUFDLENBQUMsRUFBRUosS0FBSyxFQUFFO1FBQ2YsT0FBTztZQUNMSyxVQUFVLENBQUMsTUFBTSxFQUFFTCxNQUFNRSxJQUFJLENBQUMsQ0FBQztRQUNqQztJQUNGO0lBRUZJLFlBQVlWLHFEQUFrQkEsQ0FDM0JJLEtBQUssQ0FBQ04sa0NBQUNBLENBQUNPLE1BQU0sQ0FBQztRQUFFTSxNQUFNYixrQ0FBQ0EsQ0FBQ1MsTUFBTSxHQUFHSyxHQUFHLENBQUM7SUFBRyxJQUN6Q0MsUUFBUSxDQUFDLENBQUMsRUFBRUMsR0FBRyxFQUFFVixLQUFLLEVBQUU7UUFDdkIsTUFBTSxFQUFFVyxNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHRjtRQUU1QixPQUFPQyxPQUFPRSxJQUFJLENBQUNDLE1BQU0sQ0FBQztZQUN4QkMsTUFBTTtnQkFDSlIsTUFBTVAsTUFBTU8sSUFBSTtnQkFDaEJTLFVBQVVKLFFBQVFLLElBQUksQ0FBQ0MsRUFBRTtZQUMzQjtRQUNGO0lBQ0Y7SUFFRkMsZUFBZXRCLGtEQUFlQSxDQUFDTyxLQUFLLENBQUMsQ0FBQyxFQUFFTSxHQUFHLEVBQUU7UUFDM0MsT0FBT0EsSUFBSUMsTUFBTSxDQUFDRSxJQUFJLENBQUNPLFNBQVMsQ0FBQztZQUMvQkMsT0FBTztnQkFDTEwsVUFBVU4sSUFBSUUsT0FBTyxFQUFFSyxLQUFLQztZQUM5QjtZQUNBSSxTQUFTO2dCQUFFQyxXQUFXO1lBQU87UUFDL0I7SUFDRjtBQUNGLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vcGFja2FnZXMvYXBpL3NyYy9yb3V0ZXJzL3Bvc3QudHM/ODNkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG5pbXBvcnQgeyBjcmVhdGVUUlBDUm91dGVyLCBwcm90ZWN0ZWRQcm9jZWR1cmUsIHB1YmxpY1Byb2NlZHVyZSB9IGZyb20gXCIuLi90cnBjXCI7XG5cbmV4cG9ydCBjb25zdCBwb3N0Um91dGVyID0gY3JlYXRlVFJQQ1JvdXRlcih7XG4gIGhlbGxvOiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoei5vYmplY3QoeyB0ZXh0OiB6LnN0cmluZygpIH0pKVxuICAgIC5xdWVyeSgoeyBpbnB1dCB9KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBncmVldGluZzogYEhlbGxvICR7aW5wdXQudGV4dH1gLFxuICAgICAgfTtcbiAgICB9KSxcblxuICBjcmVhdGVQb3N0OiBwcm90ZWN0ZWRQcm9jZWR1cmVcbiAgICAuaW5wdXQoei5vYmplY3QoeyBuYW1lOiB6LnN0cmluZygpLm1pbigxKSB9KSlcbiAgICAubXV0YXRpb24oKHsgY3R4LCBpbnB1dCB9KSA9PiB7XG4gICAgICBjb25zdCB7IHByaXNtYSwgc2Vzc2lvbiB9ID0gY3R4O1xuXG4gICAgICByZXR1cm4gcHJpc21hLnBvc3QuY3JlYXRlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG5hbWU6IGlucHV0Lm5hbWUsXG4gICAgICAgICAgYXV0aG9ySWQ6IHNlc3Npb24udXNlci5pZCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pLFxuXG4gIGdldExhdGVzdFBvc3Q6IHB1YmxpY1Byb2NlZHVyZS5xdWVyeSgoeyBjdHggfSkgPT4ge1xuICAgIHJldHVybiBjdHgucHJpc21hLnBvc3QuZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGF1dGhvcklkOiBjdHguc2Vzc2lvbj8udXNlci5pZCxcbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogXCJkZXNjXCIgfSxcbiAgICB9KTtcbiAgfSksXG59KTtcbiJdLCJuYW1lcyI6WyJ6IiwiY3JlYXRlVFJQQ1JvdXRlciIsInByb3RlY3RlZFByb2NlZHVyZSIsInB1YmxpY1Byb2NlZHVyZSIsInBvc3RSb3V0ZXIiLCJoZWxsbyIsImlucHV0Iiwib2JqZWN0IiwidGV4dCIsInN0cmluZyIsInF1ZXJ5IiwiZ3JlZXRpbmciLCJjcmVhdGVQb3N0IiwibmFtZSIsIm1pbiIsIm11dGF0aW9uIiwiY3R4IiwicHJpc21hIiwic2Vzc2lvbiIsInBvc3QiLCJjcmVhdGUiLCJkYXRhIiwiYXV0aG9ySWQiLCJ1c2VyIiwiaWQiLCJnZXRMYXRlc3RQb3N0IiwiZmluZEZpcnN0Iiwid2hlcmUiLCJvcmRlckJ5IiwiY3JlYXRlZEF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/routers/post.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/api/src/trpc.ts":
/*!**************************************!*\
  !*** ../../packages/api/src/trpc.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInnerTRPCContext: () => (/* binding */ createInnerTRPCContext),\n/* harmony export */   createTRPCContext: () => (/* binding */ createTRPCContext),\n/* harmony export */   createTRPCRouter: () => (/* binding */ createTRPCRouter),\n/* harmony export */   protectedProcedure: () => (/* binding */ protectedProcedure),\n/* harmony export */   publicProcedure: () => (/* binding */ publicProcedure),\n/* harmony export */   t: () => (/* binding */ t)\n/* harmony export */ });\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var superjson__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! superjson */ \"(rsc)/../../node_modules/superjson/dist/esm/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _acme_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @acme/auth */ \"(rsc)/../../packages/auth/index.ts\");\n/* harmony import */ var _acme_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @acme/db */ \"(rsc)/../../packages/db/index.ts\");\n/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */ \n\n\n\n\n/**\n * This helper generates the \"internals\" for a tRPC context. If you need to use it, you can export\n * it from here.\n *\n * Examples of things you may need it for:\n * - testing, so we don't have to mock Next.js' req/res\n * - tRPC's `createSSGHelpers`, where we don't have req/res\n *\n * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts\n */ const createInnerTRPCContext = async ({ req })=>{\n    return {\n        req,\n        unprotectedDb: _acme_db__WEBPACK_IMPORTED_MODULE_3__.db,\n        prisma: await (0,_acme_auth__WEBPACK_IMPORTED_MODULE_2__.getEnhancedPrisma)(),\n        session: await (0,_acme_auth__WEBPACK_IMPORTED_MODULE_2__.auth)()\n    };\n};\n/**\n * This is the actual context you will use in your router. It will be used to process every request\n * that goes through your tRPC endpoint.\n *\n * @see https://trpc.io/docs/context\n */ const createTRPCContext = async (opts)=>{\n    // Fetch stuff that depends on the request\n    return await createInnerTRPCContext(opts);\n};\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */ const t = _trpc_server__WEBPACK_IMPORTED_MODULE_0__.initTRPC.context().create({\n    transformer: superjson__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    errorFormatter ({ shape, error }) {\n        return {\n            ...shape,\n            data: {\n                ...shape.data,\n                zodError: error.cause instanceof zod__WEBPACK_IMPORTED_MODULE_4__.ZodError ? error.cause.flatten() : null\n            }\n        };\n    }\n});\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */ /**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */ const createTRPCRouter = t.router;\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */ const publicProcedure = t.procedure;\n/**\n * Reusable middleware that enforces users are logged in before running the\n * procedure\n */ const enforceUserIsAuthed = t.middleware(({ ctx, next })=>{\n    if (!ctx.session?.user) {\n        throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    return next({\n        ctx: {\n            // infers the `session` as non-nullable\n            session: {\n                ...ctx.session,\n                user: ctx.session.user\n            }\n        }\n    });\n});\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use\n * this. It verifies the session is valid and guarantees ctx.session.user is not\n * null\n *\n * @see https://trpc.io/docs/procedures\n */ const protectedProcedure = t.procedure.use(enforceUserIsAuthed); // Server action with tRPC: https://github.com/trpc/examples-next-app-dir/blob/main/src/app/server-action/_actions.tsx#L12\n // export const createAction = experimental_createServerActionHandler(t, {\n //   async createContext() {\n //     const session = await auth();\n //     return {\n //       session,\n //       headers: {\n //         // Pass the cookie header to the API\n //         cookies: headers().get('cookie') ?? '',\n //       },\n //     };\n //   },\n // });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/api/src/trpc.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/auth/authorize.ts":
/*!****************************************!*\
  !*** ../../packages/auth/authorize.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorize: () => (/* binding */ authorize)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/../../node_modules/bcryptjs/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _acme_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @acme/db */ \"(rsc)/../../packages/db/index.ts\");\n\n\n\nconst credentialsSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    email: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().email(),\n    password: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().min(6)\n});\nasync function getUser(email) {\n    try {\n        const user = await _acme_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findFirst({\n            where: {\n                email\n            }\n        });\n        return user;\n    } catch (error) {\n        throw new Error(\"Failed to fetch user.\");\n    }\n}\nconst authorize = async (credentials, _request)=>{\n    const parsedCredentials = credentialsSchema.safeParse(credentials);\n    if (parsedCredentials.success) {\n        const { email, password } = parsedCredentials.data;\n        const user = await getUser(email);\n        if (!user) return null;\n        const passwordsMatch = await (0,bcryptjs__WEBPACK_IMPORTED_MODULE_0__.compare)(password, user.password);\n        if (passwordsMatch) return user;\n    }\n    console.log(\"Invalid credentials\");\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXV0aC9hdXRob3JpemUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUM7QUFDWDtBQUdNO0FBRTlCLE1BQU1HLG9CQUFvQkYsa0NBQUNBLENBQUNHLE1BQU0sQ0FBQztJQUNqQ0MsT0FBT0osa0NBQUNBLENBQUNLLE1BQU0sR0FBR0QsS0FBSztJQUN2QkUsVUFBVU4sa0NBQUNBLENBQUNLLE1BQU0sR0FBR0UsR0FBRyxDQUFDO0FBQzNCO0FBRUEsZUFBZUMsUUFBUUosS0FBYTtJQUNsQyxJQUFJO1FBQ0YsTUFBTUssT0FBTyxNQUFNUix3Q0FBRUEsQ0FBQ1EsSUFBSSxDQUFDQyxTQUFTLENBQUM7WUFBRUMsT0FBTztnQkFBRVA7WUFBTTtRQUFFO1FBQ3hELE9BQU9LO0lBQ1QsRUFBRSxPQUFPRyxPQUFPO1FBQ2QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0Y7QUFFTyxNQUFNQyxZQUFZLE9BQ3ZCQyxhQUNBQztJQUVBLE1BQU1DLG9CQUFvQmYsa0JBQWtCZ0IsU0FBUyxDQUFDSDtJQUV0RCxJQUFJRSxrQkFBa0JFLE9BQU8sRUFBRTtRQUM3QixNQUFNLEVBQUVmLEtBQUssRUFBRUUsUUFBUSxFQUFFLEdBQUdXLGtCQUFrQkcsSUFBSTtRQUVsRCxNQUFNWCxPQUFPLE1BQU1ELFFBQVFKO1FBQzNCLElBQUksQ0FBQ0ssTUFBTSxPQUFPO1FBRWxCLE1BQU1ZLGlCQUFpQixNQUFNdEIsaURBQU9BLENBQUNPLFVBQVVHLEtBQUtILFFBQVE7UUFDNUQsSUFBSWUsZ0JBQWdCLE9BQU9aO0lBQzdCO0lBRUFhLFFBQVFDLEdBQUcsQ0FBQztJQUNaLE9BQU87QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL3BhY2thZ2VzL2F1dGgvYXV0aG9yaXplLnRzP2QxNjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFyZSB9IGZyb20gXCJiY3J5cHRqc1wiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcblxuaW1wb3J0IHR5cGUgeyBVc2VyIH0gZnJvbSBcIkBhY21lL2RiXCI7XG5pbXBvcnQgeyBkYiB9IGZyb20gXCJAYWNtZS9kYlwiO1xuXG5jb25zdCBjcmVkZW50aWFsc1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgZW1haWw6IHouc3RyaW5nKCkuZW1haWwoKSxcbiAgcGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDYpLFxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFVzZXIoZW1haWw6IHN0cmluZyk6IFByb21pc2U8VXNlciB8IG51bGw+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgZGIudXNlci5maW5kRmlyc3QoeyB3aGVyZTogeyBlbWFpbCB9IH0pO1xuICAgIHJldHVybiB1c2VyO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1c2VyLlwiKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXV0aG9yaXplID0gYXN5bmMgKFxuICBjcmVkZW50aWFsczogUGFydGlhbDxSZWNvcmQ8XCJlbWFpbFwiIHwgXCJwYXNzd29yZFwiIHwgXCJuYW1lXCIsIHVua25vd24+PixcbiAgX3JlcXVlc3Q6IFJlcXVlc3QsXG4pOiBQcm9taXNlPFVzZXIgfCBudWxsPiA9PiB7XG4gIGNvbnN0IHBhcnNlZENyZWRlbnRpYWxzID0gY3JlZGVudGlhbHNTY2hlbWEuc2FmZVBhcnNlKGNyZWRlbnRpYWxzKTtcblxuICBpZiAocGFyc2VkQ3JlZGVudGlhbHMuc3VjY2Vzcykge1xuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSBwYXJzZWRDcmVkZW50aWFscy5kYXRhO1xuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IGdldFVzZXIoZW1haWwpO1xuICAgIGlmICghdXNlcikgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBwYXNzd29yZHNNYXRjaCA9IGF3YWl0IGNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAgIGlmIChwYXNzd29yZHNNYXRjaCkgcmV0dXJuIHVzZXI7XG4gIH1cblxuICBjb25zb2xlLmxvZyhcIkludmFsaWQgY3JlZGVudGlhbHNcIik7XG4gIHJldHVybiBudWxsO1xufTtcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwieiIsImRiIiwiY3JlZGVudGlhbHNTY2hlbWEiLCJvYmplY3QiLCJlbWFpbCIsInN0cmluZyIsInBhc3N3b3JkIiwibWluIiwiZ2V0VXNlciIsInVzZXIiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImVycm9yIiwiRXJyb3IiLCJhdXRob3JpemUiLCJjcmVkZW50aWFscyIsIl9yZXF1ZXN0IiwicGFyc2VkQ3JlZGVudGlhbHMiLCJzYWZlUGFyc2UiLCJzdWNjZXNzIiwiZGF0YSIsInBhc3N3b3Jkc01hdGNoIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/auth/authorize.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/auth/config.ts":
/*!*************************************!*\
  !*** ../../packages/auth/config.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authConfig: () => (/* binding */ authConfig)\n/* harmony export */ });\n// This file cannot be exported from the package index due to build dependencies\n// and Edge runtime compatibility (used in Next.js middleware)\nconst PUBLIC_PATHS = [\n    \"/login\",\n    \"/signup\"\n];\nconst authConfig = {\n    pages: {\n        signIn: \"/login\",\n        newUser: \"/signup\"\n    },\n    providers: [],\n    callbacks: {\n        session: ({ session, token })=>{\n            //   if (session.user) {\n            //     const user = await db.user.findUniqueOrThrow({\n            //       where: { id: token.sub },\n            //       select: { role: true },\n            //     });\n            //     session.user.role = user.role; // <-- put other properties on the session here\n            //   }\n            session.user.id = token.sub;\n            return session;\n        },\n        authorized ({ auth, request: { nextUrl } }) {\n            const isLoggedIn = !!auth?.user;\n            const isOnPublicRoute = PUBLIC_PATHS.includes(nextUrl.pathname);\n            const isOnLoginPage = nextUrl.pathname.startsWith(\"/login\");\n            if (isOnLoginPage && isLoggedIn) {\n                return Response.redirect(new URL(\"/\", nextUrl));\n            }\n            if (isOnPublicRoute) {\n                return true;\n            }\n            return isLoggedIn; // Redirect unauthenticated users to login page if false\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXV0aC9jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGdGQUFnRjtBQUNoRiw4REFBOEQ7QUFLOUQsTUFBTUEsZUFBZTtJQUFDO0lBQVU7Q0FBVTtBQW9CbkMsTUFBTUMsYUFBYTtJQUN4QkMsT0FBTztRQUNMQyxRQUFRO1FBQ1JDLFNBQVM7SUFDWDtJQUNBQyxXQUFXLEVBR1Y7SUFDREMsV0FBVztRQUNUQyxTQUFTLENBQUMsRUFBRUEsT0FBTyxFQUFFQyxLQUFLLEVBQUU7WUFDMUIsd0JBQXdCO1lBQ3hCLHFEQUFxRDtZQUNyRCxrQ0FBa0M7WUFDbEMsZ0NBQWdDO1lBQ2hDLFVBQVU7WUFFVixxRkFBcUY7WUFDckYsTUFBTTtZQUNORCxRQUFRRSxJQUFJLENBQUNDLEVBQUUsR0FBR0YsTUFBTUcsR0FBRztZQUMzQixPQUFPSjtRQUNUO1FBQ0FLLFlBQVcsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZDLE1BQU1DLGFBQWEsQ0FBQyxDQUFDSCxNQUFNSjtZQUMzQixNQUFNUSxrQkFBa0JqQixhQUFha0IsUUFBUSxDQUFDSCxRQUFRSSxRQUFRO1lBQzlELE1BQU1DLGdCQUFnQkwsUUFBUUksUUFBUSxDQUFDRSxVQUFVLENBQUM7WUFDbEQsSUFBSUQsaUJBQWlCSixZQUFZO2dCQUMvQixPQUFPTSxTQUFTQyxRQUFRLENBQUMsSUFBSUMsSUFBSSxLQUFLVDtZQUN4QztZQUNBLElBQUlFLGlCQUFpQjtnQkFDbkIsT0FBTztZQUNUO1lBQ0EsT0FBT0QsWUFBWSx3REFBd0Q7UUFDN0U7SUFDRjtBQUNGLEVBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL3BhY2thZ2VzL2F1dGgvY29uZmlnLnRzPzQ3OTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGNhbm5vdCBiZSBleHBvcnRlZCBmcm9tIHRoZSBwYWNrYWdlIGluZGV4IGR1ZSB0byBidWlsZCBkZXBlbmRlbmNpZXNcbi8vIGFuZCBFZGdlIHJ1bnRpbWUgY29tcGF0aWJpbGl0eSAodXNlZCBpbiBOZXh0LmpzIG1pZGRsZXdhcmUpXG5cbmltcG9ydCB0eXBlIHsgRGVmYXVsdFNlc3Npb24gfSBmcm9tIFwiQGF1dGgvY29yZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBOZXh0QXV0aENvbmZpZyB9IGZyb20gXCJuZXh0LWF1dGhcIjtcblxuY29uc3QgUFVCTElDX1BBVEhTID0gW1wiL2xvZ2luXCIsIFwiL3NpZ251cFwiXTtcblxuLyoqXG4gKiBNb2R1bGUgYXVnbWVudGF0aW9uIGZvciBgbmV4dC1hdXRoYCB0eXBlc1xuICogQWxsb3dzIHVzIHRvIGFkZCBjdXN0b20gcHJvcGVydGllcyB0byB0aGUgYHNlc3Npb25gIG9iamVjdFxuICogYW5kIGtlZXAgdHlwZSBzYWZldHlcbiAqIEBzZWUgaHR0cHM6Ly9uZXh0LWF1dGguanMub3JnL2dldHRpbmctc3RhcnRlZC90eXBlc2NyaXB0I21vZHVsZS1hdWdtZW50YXRpb25cbiAqKi9cbmRlY2xhcmUgbW9kdWxlIFwibmV4dC1hdXRoXCIge1xuICBpbnRlcmZhY2UgU2Vzc2lvbiBleHRlbmRzIERlZmF1bHRTZXNzaW9uIHtcbiAgICB1c2VyOiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgZW1haWw6IHN0cmluZztcbiAgICAgIHJvbGU6IHN0cmluZztcbiAgICAgIC8vIC4uLm90aGVyIHByb3BlcnRpZXNcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhdXRoQ29uZmlnID0ge1xuICBwYWdlczoge1xuICAgIHNpZ25JbjogXCIvbG9naW5cIixcbiAgICBuZXdVc2VyOiBcIi9zaWdudXBcIixcbiAgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgLy8gYWRkZWQgbGF0ZXIgaW4gYXV0aC50cyBzaW5jZSBpdCByZXF1aXJlcyBiY3J5cHQgd2hpY2ggaXMgb25seSBjb21wYXRpYmxlIHdpdGggTm9kZS5qc1xuICAgIC8vIHdoaWxlIHRoaXMgZmlsZSBpcyBhbHNvIHVzZWQgaW4gbm9uLU5vZGUuanMgZW52aXJvbm1lbnRzXG4gIF0sXG4gIGNhbGxiYWNrczoge1xuICAgIHNlc3Npb246ICh7IHNlc3Npb24sIHRva2VuIH0pID0+IHtcbiAgICAgIC8vICAgaWYgKHNlc3Npb24udXNlcikge1xuICAgICAgLy8gICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi51c2VyLmZpbmRVbmlxdWVPclRocm93KHtcbiAgICAgIC8vICAgICAgIHdoZXJlOiB7IGlkOiB0b2tlbi5zdWIgfSxcbiAgICAgIC8vICAgICAgIHNlbGVjdDogeyByb2xlOiB0cnVlIH0sXG4gICAgICAvLyAgICAgfSk7XG5cbiAgICAgIC8vICAgICBzZXNzaW9uLnVzZXIucm9sZSA9IHVzZXIucm9sZTsgLy8gPC0tIHB1dCBvdGhlciBwcm9wZXJ0aWVzIG9uIHRoZSBzZXNzaW9uIGhlcmVcbiAgICAgIC8vICAgfVxuICAgICAgc2Vzc2lvbi51c2VyLmlkID0gdG9rZW4uc3ViITtcbiAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH0sXG4gICAgYXV0aG9yaXplZCh7IGF1dGgsIHJlcXVlc3Q6IHsgbmV4dFVybCB9IH0pIHtcbiAgICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSAhIWF1dGg/LnVzZXI7XG4gICAgICBjb25zdCBpc09uUHVibGljUm91dGUgPSBQVUJMSUNfUEFUSFMuaW5jbHVkZXMobmV4dFVybC5wYXRobmFtZSk7XG4gICAgICBjb25zdCBpc09uTG9naW5QYWdlID0gbmV4dFVybC5wYXRobmFtZS5zdGFydHNXaXRoKFwiL2xvZ2luXCIpO1xuICAgICAgaWYgKGlzT25Mb2dpblBhZ2UgJiYgaXNMb2dnZWRJbikge1xuICAgICAgICByZXR1cm4gUmVzcG9uc2UucmVkaXJlY3QobmV3IFVSTChcIi9cIiwgbmV4dFVybCkpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT25QdWJsaWNSb3V0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0xvZ2dlZEluOyAvLyBSZWRpcmVjdCB1bmF1dGhlbnRpY2F0ZWQgdXNlcnMgdG8gbG9naW4gcGFnZSBpZiBmYWxzZVxuICAgIH0sXG4gIH0sXG59IHNhdGlzZmllcyBOZXh0QXV0aENvbmZpZztcbiJdLCJuYW1lcyI6WyJQVUJMSUNfUEFUSFMiLCJhdXRoQ29uZmlnIiwicGFnZXMiLCJzaWduSW4iLCJuZXdVc2VyIiwicHJvdmlkZXJzIiwiY2FsbGJhY2tzIiwic2Vzc2lvbiIsInRva2VuIiwidXNlciIsImlkIiwic3ViIiwiYXV0aG9yaXplZCIsImF1dGgiLCJyZXF1ZXN0IiwibmV4dFVybCIsImlzTG9nZ2VkSW4iLCJpc09uUHVibGljUm91dGUiLCJpbmNsdWRlcyIsInBhdGhuYW1lIiwiaXNPbkxvZ2luUGFnZSIsInN0YXJ0c1dpdGgiLCJSZXNwb25zZSIsInJlZGlyZWN0IiwiVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/auth/config.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/auth/index.ts":
/*!************************************!*\
  !*** ../../packages/auth/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   getEnhancedPrisma: () => (/* binding */ getEnhancedPrisma),\n/* harmony export */   handlers: () => (/* binding */ handlers),\n/* harmony export */   providers: () => (/* binding */ providers),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut)\n/* harmony export */ });\n/* harmony import */ var _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core/providers/credentials */ \"(rsc)/../../node_modules/@auth/core/providers/credentials.js\");\n/* harmony import */ var _zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zenstackhq/runtime */ \"@zenstackhq/runtime\");\n/* harmony import */ var _zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth */ \"(rsc)/../../node_modules/next-auth/index.js\");\n/* harmony import */ var _acme_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @acme/db */ \"(rsc)/../../packages/db/index.ts\");\n/* harmony import */ var _authorize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./authorize */ \"(rsc)/../../packages/auth/authorize.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config */ \"(rsc)/../../packages/auth/config.ts\");\n\n\n\n\n\n\n// Update this whenever adding new providers so that the client can\nconst providers = [\n    \"credentials\"\n];\n// eslint-disable-next-line -- fixed in next release. See https://github.com/nextauthjs/next-auth/commit/37219665d89840b194851a1c9ba6768690111e6b\nconst { auth, signIn, signOut, handlers } = (0,next_auth__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n    ..._config__WEBPACK_IMPORTED_MODULE_5__.authConfig,\n    session: {\n        strategy: \"jwt\",\n        maxAge: 3 * 24 * 60 * 60\n    },\n    providers: [\n        (0,_auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            authorize: _authorize__WEBPACK_IMPORTED_MODULE_4__.authorize\n        })\n    ]\n});\n/**\n * Get an authorization-enabled database client\n */ async function getEnhancedPrisma() {\n    const session = await auth();\n    const user = await _acme_db__WEBPACK_IMPORTED_MODULE_3__.db.user.findFirst({\n        where: {\n            id: session?.user?.id\n        }\n    });\n    return (0,_zenstackhq_runtime__WEBPACK_IMPORTED_MODULE_1__.enhance)(_acme_db__WEBPACK_IMPORTED_MODULE_3__.db, {\n        user: user\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXV0aC9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTJEO0FBQ2I7QUFDYjtBQUdIO0FBRVU7QUFDRjtBQUl0QyxtRUFBbUU7QUFDNUQsTUFBTU0sWUFBWTtJQUFDO0NBQWMsQ0FBVTtBQUdsRCxpSkFBaUo7QUFDMUksTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUUsR0FBR1IscURBQVFBLENBQUM7SUFDMUQsR0FBR0csK0NBQVU7SUFDYk0sU0FBUztRQUNQQyxVQUFVO1FBQ1ZDLFFBQVEsSUFBSSxLQUFLLEtBQUs7SUFDeEI7SUFDQVAsV0FBVztRQUNUTiw0RUFBV0EsQ0FBQztZQUNWSSxTQUFTQSxtREFBQUE7UUFDWDtLQUNEO0FBQ0gsR0FBRztBQUVIOztDQUVDLEdBQ00sZUFBZVU7SUFDcEIsTUFBTUgsVUFBVSxNQUFNSjtJQUN0QixNQUFNUSxPQUFPLE1BQU1aLHdDQUFFQSxDQUFDWSxJQUFJLENBQUNDLFNBQVMsQ0FBQztRQUNuQ0MsT0FBTztZQUFFQyxJQUFJUCxTQUFTSSxNQUFNRztRQUFHO0lBQ2pDO0lBQ0EsT0FBT2pCLDREQUFPQSxDQUFDRSx3Q0FBRUEsRUFBRTtRQUFFWSxNQUFNQTtJQUF5QjtBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9wYWNrYWdlcy9hdXRoL2luZGV4LnRzPzYyNzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENyZWRlbnRpYWxzIGZyb20gXCJAYXV0aC9jb3JlL3Byb3ZpZGVycy9jcmVkZW50aWFsc1wiO1xuaW1wb3J0IHsgZW5oYW5jZSB9IGZyb20gXCJAemVuc3RhY2tocS9ydW50aW1lXCI7XG5pbXBvcnQgTmV4dEF1dGggZnJvbSBcIm5leHQtYXV0aFwiO1xuXG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tIFwiQGFjbWUvZGJcIjtcbmltcG9ydCB7IGRiIH0gZnJvbSBcIkBhY21lL2RiXCI7XG5cbmltcG9ydCB7IGF1dGhvcml6ZSB9IGZyb20gXCIuL2F1dGhvcml6ZVwiO1xuaW1wb3J0IHsgYXV0aENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuXG5leHBvcnQgdHlwZSB7IFNlc3Npb24gfSBmcm9tIFwibmV4dC1hdXRoXCI7XG5cbi8vIFVwZGF0ZSB0aGlzIHdoZW5ldmVyIGFkZGluZyBuZXcgcHJvdmlkZXJzIHNvIHRoYXQgdGhlIGNsaWVudCBjYW5cbmV4cG9ydCBjb25zdCBwcm92aWRlcnMgPSBbXCJjcmVkZW50aWFsc1wiXSBhcyBjb25zdDtcbmV4cG9ydCB0eXBlIE9BdXRoUHJvdmlkZXJzID0gKHR5cGVvZiBwcm92aWRlcnMpW251bWJlcl07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAtLSBmaXhlZCBpbiBuZXh0IHJlbGVhc2UuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmV4dGF1dGhqcy9uZXh0LWF1dGgvY29tbWl0LzM3MjE5NjY1ZDg5ODQwYjE5NDg1MWExYzliYTY3Njg2OTAxMTFlNmJcbmV4cG9ydCBjb25zdCB7IGF1dGgsIHNpZ25Jbiwgc2lnbk91dCwgaGFuZGxlcnMgfSA9IE5leHRBdXRoKHtcbiAgLi4uYXV0aENvbmZpZyxcbiAgc2Vzc2lvbjoge1xuICAgIHN0cmF0ZWd5OiBcImp3dFwiLFxuICAgIG1heEFnZTogMyAqIDI0ICogNjAgKiA2MCwgLy8gMyBkYXlzXG4gIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIENyZWRlbnRpYWxzKHtcbiAgICAgIGF1dGhvcml6ZSxcbiAgICB9KSxcbiAgXSxcbn0pO1xuXG4vKipcbiAqIEdldCBhbiBhdXRob3JpemF0aW9uLWVuYWJsZWQgZGF0YWJhc2UgY2xpZW50XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFbmhhbmNlZFByaXNtYSgpIHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGF1dGgoKTtcbiAgY29uc3QgdXNlciA9IGF3YWl0IGRiLnVzZXIuZmluZEZpcnN0KHtcbiAgICB3aGVyZTogeyBpZDogc2Vzc2lvbj8udXNlcj8uaWQgfSxcbiAgfSk7XG4gIHJldHVybiBlbmhhbmNlKGRiLCB7IHVzZXI6IHVzZXIgYXMgVXNlciB8IHVuZGVmaW5lZCB9KTtcbn1cbiJdLCJuYW1lcyI6WyJDcmVkZW50aWFscyIsImVuaGFuY2UiLCJOZXh0QXV0aCIsImRiIiwiYXV0aG9yaXplIiwiYXV0aENvbmZpZyIsInByb3ZpZGVycyIsImF1dGgiLCJzaWduSW4iLCJzaWduT3V0IiwiaGFuZGxlcnMiLCJzZXNzaW9uIiwic3RyYXRlZ3kiLCJtYXhBZ2UiLCJnZXRFbmhhbmNlZFByaXNtYSIsInVzZXIiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/auth/index.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/db/index.ts":
/*!**********************************!*\
  !*** ../../packages/db/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _prisma_client__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"db\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _prisma_client__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst globalForPrisma = globalThis;\n\nconst db = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) globalForPrisma.prisma = db;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvZGIvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLGtCQUFrQkM7QUFJTztBQUV4QixNQUFNQyxLQUNYRixnQkFBZ0JHLE1BQU0sSUFDdEIsSUFBSUosd0RBQVlBLENBQUM7SUFDZkssS0FDRUMsS0FBc0MsR0FDbEM7UUFBQztRQUFTO1FBQVM7S0FBTyxHQUMxQixDQUFTO0FBQ2pCLEdBQUc7QUFFTCxJQUFJQSxJQUFxQyxFQUFFTCxnQkFBZ0JHLE1BQU0sR0FBR0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vcGFja2FnZXMvZGIvaW5kZXgudHM/ZGZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tIFwiQHByaXNtYS9jbGllbnRcIjtcblxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQ7XG59O1xuXG5leHBvcnQgKiBmcm9tIFwiQHByaXNtYS9jbGllbnRcIjtcblxuZXhwb3J0IGNvbnN0IGRiID1cbiAgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiXG4gICAgICAgID8gW1wicXVlcnlcIiwgXCJlcnJvclwiLCBcIndhcm5cIl1cbiAgICAgICAgOiBbXCJlcnJvclwiXSxcbiAgfSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBkYjtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwiZGIiLCJwcmlzbWEiLCJsb2ciLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/db/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/env.mjs":
/*!*********************!*\
  !*** ./src/env.mjs ***!
  \*********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   env: () => (/* binding */ env)\n/* harmony export */ });\n/* harmony import */ var _t3_oss_env_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @t3-oss/env-nextjs */ \"(rsc)/../../node_modules/@t3-oss/env-nextjs/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n\n\nconst env = (0,_t3_oss_env_nextjs__WEBPACK_IMPORTED_MODULE_0__.createEnv)({\n    /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */ server: {\n        DATABASE_URL: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url().refine((str)=>!str.includes(\"YOUR_MYSQL_URL_HERE\"), \"You forgot to change the default URL\"),\n        NODE_ENV: zod__WEBPACK_IMPORTED_MODULE_1__.z.enum([\n            \"development\",\n            \"test\",\n            \"production\"\n        ]).default(\"development\")\n    },\n    /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */ client: {\n    },\n    /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */ runtimeEnv: {\n        DATABASE_URL: process.env.DATABASE_URL,\n        NODE_ENV: \"development\"\n    },\n    /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */ skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n    /**\n   * Makes it so that empty strings are treated as undefined.\n   * `SOME_VAR: z.string()` and `SOME_VAR=''` will throw an error.\n   */ emptyStringAsUndefined: true\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvZW52Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDdkI7QUFFakIsTUFBTUUsTUFBTUYsNkRBQVNBLENBQUM7SUFDM0I7OztHQUdDLEdBQ0RHLFFBQVE7UUFDTkMsY0FBY0gsa0NBQUNBLENBQ1pJLE1BQU0sR0FDTkMsR0FBRyxHQUNIQyxNQUFNLENBQ0wsQ0FBQ0MsTUFBUSxDQUFDQSxJQUFJQyxRQUFRLENBQUMsd0JBQ3ZCO1FBRUpDLFVBQVVULGtDQUFDQSxDQUNSVSxJQUFJLENBQUM7WUFBQztZQUFlO1lBQVE7U0FBYSxFQUMxQ0MsT0FBTyxDQUFDO0lBQ2I7SUFFQTs7OztHQUlDLEdBQ0RDLFFBQVE7SUFFUjtJQUVBOzs7R0FHQyxHQUNEQyxZQUFZO1FBQ1ZWLGNBQWNXLFFBQVFiLEdBQUcsQ0FBQ0UsWUFBWTtRQUN0Q00sVUFwQ0o7SUFzQ0U7SUFDQTs7O0dBR0MsR0FDRE0sZ0JBQWdCLENBQUMsQ0FBQ0QsUUFBUWIsR0FBRyxDQUFDZSxtQkFBbUI7SUFDakQ7OztHQUdDLEdBQ0RDLHdCQUF3QjtBQUMxQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4vc3JjL2Vudi5tanM/YzNiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFbnYgfSBmcm9tIFwiQHQzLW9zcy9lbnYtbmV4dGpzXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG5leHBvcnQgY29uc3QgZW52ID0gY3JlYXRlRW52KHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgeW91ciBzZXJ2ZXItc2lkZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgc2NoZW1hIGhlcmUuIFRoaXMgd2F5IHlvdSBjYW4gZW5zdXJlIHRoZSBhcHBcbiAgICogaXNuJ3QgYnVpbHQgd2l0aCBpbnZhbGlkIGVudiB2YXJzLlxuICAgKi9cbiAgc2VydmVyOiB7XG4gICAgREFUQUJBU0VfVVJMOiB6XG4gICAgICAuc3RyaW5nKClcbiAgICAgIC51cmwoKVxuICAgICAgLnJlZmluZShcbiAgICAgICAgKHN0cikgPT4gIXN0ci5pbmNsdWRlcyhcIllPVVJfTVlTUUxfVVJMX0hFUkVcIiksXG4gICAgICAgIFwiWW91IGZvcmdvdCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgVVJMXCJcbiAgICAgICksXG4gICAgTk9ERV9FTlY6IHpcbiAgICAgIC5lbnVtKFtcImRldmVsb3BtZW50XCIsIFwidGVzdFwiLCBcInByb2R1Y3Rpb25cIl0pXG4gICAgICAuZGVmYXVsdChcImRldmVsb3BtZW50XCIpLFxuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHlvdXIgY2xpZW50LXNpZGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHNjaGVtYSBoZXJlLiBUaGlzIHdheSB5b3UgY2FuIGVuc3VyZSB0aGUgYXBwXG4gICAqIGlzbid0IGJ1aWx0IHdpdGggaW52YWxpZCBlbnYgdmFycy4gVG8gZXhwb3NlIHRoZW0gdG8gdGhlIGNsaWVudCwgcHJlZml4IHRoZW0gd2l0aFxuICAgKiBgTkVYVF9QVUJMSUNfYC5cbiAgICovXG4gIGNsaWVudDoge1xuICAgIC8vIE5FWFRfUFVCTElDX0NMSUVOVFZBUjogei5zdHJpbmcoKSxcbiAgfSxcblxuICAvKipcbiAgICogWW91IGNhbid0IGRlc3RydWN0IGBwcm9jZXNzLmVudmAgYXMgYSByZWd1bGFyIG9iamVjdCBpbiB0aGUgTmV4dC5qcyBlZGdlIHJ1bnRpbWVzIChlLmcuXG4gICAqIG1pZGRsZXdhcmVzKSBvciBjbGllbnQtc2lkZSBzbyB3ZSBuZWVkIHRvIGRlc3RydWN0IG1hbnVhbGx5LlxuICAgKi9cbiAgcnVudGltZUVudjoge1xuICAgIERBVEFCQVNFX1VSTDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxuICAgIE5PREVfRU5WOiBwcm9jZXNzLmVudi5OT0RFX0VOVixcbiAgICAvLyBORVhUX1BVQkxJQ19DTElFTlRWQVI6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMSUVOVFZBUixcbiAgfSxcbiAgLyoqXG4gICAqIFJ1biBgYnVpbGRgIG9yIGBkZXZgIHdpdGggYFNLSVBfRU5WX1ZBTElEQVRJT05gIHRvIHNraXAgZW52IHZhbGlkYXRpb24uIFRoaXMgaXMgZXNwZWNpYWxseVxuICAgKiB1c2VmdWwgZm9yIERvY2tlciBidWlsZHMuXG4gICAqL1xuICBza2lwVmFsaWRhdGlvbjogISFwcm9jZXNzLmVudi5TS0lQX0VOVl9WQUxJREFUSU9OLFxuICAvKipcbiAgICogTWFrZXMgaXQgc28gdGhhdCBlbXB0eSBzdHJpbmdzIGFyZSB0cmVhdGVkIGFzIHVuZGVmaW5lZC5cbiAgICogYFNPTUVfVkFSOiB6LnN0cmluZygpYCBhbmQgYFNPTUVfVkFSPScnYCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKi9cbiAgZW1wdHlTdHJpbmdBc1VuZGVmaW5lZDogdHJ1ZSxcbn0pO1xuIl0sIm5hbWVzIjpbImNyZWF0ZUVudiIsInoiLCJlbnYiLCJzZXJ2ZXIiLCJEQVRBQkFTRV9VUkwiLCJzdHJpbmciLCJ1cmwiLCJyZWZpbmUiLCJzdHIiLCJpbmNsdWRlcyIsIk5PREVfRU5WIiwiZW51bSIsImRlZmF1bHQiLCJjbGllbnQiLCJydW50aW1lRW52IiwicHJvY2VzcyIsInNraXBWYWxpZGF0aW9uIiwiU0tJUF9FTlZfVkFMSURBVElPTiIsImVtcHR5U3RyaW5nQXNVbmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/env.mjs\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/jose","vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/superjson","vendor-chunks/@trpc","vendor-chunks/@panva","vendor-chunks/preact","vendor-chunks/bcryptjs","vendor-chunks/prisma","vendor-chunks/zod","vendor-chunks/preact-render-to-string","vendor-chunks/oauth4webapi","vendor-chunks/is-what","vendor-chunks/copy-anything","vendor-chunks/@t3-oss","vendor-chunks/@swc","vendor-chunks/@auth","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fetto%2Fprj%2Factive%2Fcode-master%2Fapps%2Fnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();