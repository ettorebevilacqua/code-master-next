"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prisma";
exports.ids = ["vendor-chunks/prisma"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.prisma/client/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/.prisma/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, NotFoundError, getPrismaClient, sqltag, empty, join, raw, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public } = __webpack_require__(/*! ./runtime/library */ \"(rsc)/../../node_modules/.prisma/client/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 5.5.2\n * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a\n */ Prisma.prismaVersion = {\n    client: \"5.5.2\",\n    engine: \"aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.NotFoundError = NotFoundError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    Serializable: \"Serializable\"\n});\nexports.Prisma.UserScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    email: \"email\",\n    emailVerified: \"emailVerified\",\n    password: \"password\",\n    role: \"role\",\n    image: \"image\"\n};\nexports.Prisma.PostScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    authorId: \"authorId\"\n};\nexports.Prisma.AccountScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    type: \"type\",\n    provider: \"provider\",\n    providerAccountId: \"providerAccountId\",\n    refresh_token: \"refresh_token\",\n    access_token: \"access_token\",\n    expires_at: \"expires_at\",\n    token_type: \"token_type\",\n    scope: \"scope\",\n    id_token: \"id_token\",\n    session_state: \"session_state\"\n};\nexports.Prisma.SessionScalarFieldEnum = {\n    id: \"id\",\n    sessionToken: \"sessionToken\",\n    userId: \"userId\",\n    expires: \"expires\"\n};\nexports.Prisma.VerificationTokenScalarFieldEnum = {\n    identifier: \"identifier\",\n    token: \"token\",\n    expires: \"expires\"\n};\nexports.Prisma.SortOrder = {\n    asc: \"asc\",\n    desc: \"desc\"\n};\nexports.Prisma.NullsOrder = {\n    first: \"first\",\n    last: \"last\"\n};\nexports.Prisma.ModelName = {\n    User: \"User\",\n    Post: \"Post\",\n    Account: \"Account\",\n    Session: \"Session\",\n    VerificationToken: \"VerificationToken\"\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"/home/etto/prj/active/code-master/node_modules/.prisma/client\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"debian-openssl-1.1.x\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": \"../../../.env\"\n    },\n    \"relativePath\": \"../../../packages/db/prisma\",\n    \"clientVersion\": \"5.5.2\",\n    \"engineVersion\": \"aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"sqlite\",\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": \"Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBETyBOT1QgTU9ESUZZIFRISVMgRklMRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vCi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBaZW5TdGFjayBDTEkgYW5kIHNob3VsZCBub3QgYmUgbWFudWFsbHkgdXBkYXRlZC4gLy8KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKZGF0YXNvdXJjZSBkYiB7CiAgcHJvdmlkZXIgPSAic3FsaXRlIgogIHVybCAgICAgID0gZW52KCJEQVRBQkFTRV9VUkwiKQp9CgpnZW5lcmF0b3IgY2xpZW50IHsKICBwcm92aWRlciA9ICJwcmlzbWEtY2xpZW50LWpzIgogIG91dHB1dCAgID0gIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucHJpc21hL2NsaWVudCIKfQoKLy8vIEBAYWxsb3coJ2FsbCcsIHRydWUpCm1vZGVsIFVzZXIgewogIGlkICAgICAgICAgICAgU3RyaW5nICAgIEBpZCgpIEBkZWZhdWx0KGN1aWQoKSkKICBuYW1lICAgICAgICAgIFN0cmluZwogIC8vLyBAZW1haWwKICBlbWFpbCAgICAgICAgIFN0cmluZyAgICBAdW5pcXVlKCkKICBlbWFpbFZlcmlmaWVkIERhdGVUaW1lPwogIC8vLyBAcGFzc3dvcmQKICAvLy8gQG9taXQKICBwYXNzd29yZCAgICAgIFN0cmluZwogIHJvbGUgICAgICAgICAgU3RyaW5nICAgIEBkZWZhdWx0KCJ1c2VyIikKICBpbWFnZSAgICAgICAgIFN0cmluZz8KICBjcmVhdGVkUG9zdHMgIFBvc3RbXQogIGFjY291bnRzICAgICAgQWNjb3VudFtdCiAgc2Vzc2lvbnMgICAgICBTZXNzaW9uW10KfQoKLy8vIEBAYWxsb3coJ2FsbCcsIHRydWUpCm1vZGVsIFBvc3QgewogIGlkICAgICAgICBJbnQgICAgICBAaWQoKSBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgbmFtZSAgICAgIFN0cmluZwogIGNyZWF0ZWRBdCBEYXRlVGltZSBAZGVmYXVsdChub3coKSkKICB1cGRhdGVkQXQgRGF0ZVRpbWUgQHVwZGF0ZWRBdCgpCiAgYXV0aG9ySWQgIFN0cmluZwogIGF1dGhvciAgICBVc2VyICAgICBAcmVsYXRpb24oZmllbGRzOiBbYXV0aG9ySWRdLCByZWZlcmVuY2VzOiBbaWRdKQoKICBAQGluZGV4KFtuYW1lXSkKfQoKbW9kZWwgQWNjb3VudCB7CiAgaWQgICAgICAgICAgICAgICAgU3RyaW5nICBAaWQoKSBAZGVmYXVsdChjdWlkKCkpCiAgdXNlcklkICAgICAgICAgICAgU3RyaW5nCiAgdHlwZSAgICAgICAgICAgICAgU3RyaW5nCiAgcHJvdmlkZXIgICAgICAgICAgU3RyaW5nCiAgcHJvdmlkZXJBY2NvdW50SWQgU3RyaW5nCiAgcmVmcmVzaF90b2tlbiAgICAgU3RyaW5nPwogIGFjY2Vzc190b2tlbiAgICAgIFN0cmluZz8KICBleHBpcmVzX2F0ICAgICAgICBJbnQ/CiAgdG9rZW5fdHlwZSAgICAgICAgU3RyaW5nPwogIHNjb3BlICAgICAgICAgICAgIFN0cmluZz8KICBpZF90b2tlbiAgICAgICAgICBTdHJpbmc/CiAgc2Vzc2lvbl9zdGF0ZSAgICAgU3RyaW5nPwogIHVzZXIgICAgICAgICAgICAgIFVzZXIgICAgQHJlbGF0aW9uKGZpZWxkczogW3VzZXJJZF0sIHJlZmVyZW5jZXM6IFtpZF0sIG9uRGVsZXRlOiBDYXNjYWRlKQoKICBAQHVuaXF1ZShbcHJvdmlkZXIsIHByb3ZpZGVyQWNjb3VudElkXSkKfQoKbW9kZWwgU2Vzc2lvbiB7CiAgaWQgICAgICAgICAgIFN0cmluZyAgIEBpZCgpIEBkZWZhdWx0KGN1aWQoKSkKICBzZXNzaW9uVG9rZW4gU3RyaW5nICAgQHVuaXF1ZSgpCiAgdXNlcklkICAgICAgIFN0cmluZwogIGV4cGlyZXMgICAgICBEYXRlVGltZQogIHVzZXIgICAgICAgICBVc2VyICAgICBAcmVsYXRpb24oZmllbGRzOiBbdXNlcklkXSwgcmVmZXJlbmNlczogW2lkXSwgb25EZWxldGU6IENhc2NhZGUpCn0KCm1vZGVsIFZlcmlmaWNhdGlvblRva2VuIHsKICBpZGVudGlmaWVyIFN0cmluZwogIHRva2VuICAgICAgU3RyaW5nICAgQHVuaXF1ZSgpCiAgZXhwaXJlcyAgICBEYXRlVGltZQoKICBAQHVuaXF1ZShbaWRlbnRpZmllciwgdG9rZW5dKQp9Cg==\",\n    \"inlineSchemaHash\": \"a34c793417b646552b82cf79ad42d1655fbdd90122ad356f88cd40fddaf7815c\"\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, \"schema.prisma\"))) {\n    const alternativePaths = [\n        \"../../node_modules/.prisma/client\",\n        \"../node_modules/.prisma/client\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, \"schema.prisma\"));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse('{\"models\":{\"User\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"cuid\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"email\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"@email\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"password\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"@password\\\\\\\\n@omit\"},{\"name\":\"role\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":\"user\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"image\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdPosts\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Post\",\"relationName\":\"PostToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"accounts\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Account\",\"relationName\":\"AccountToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sessions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Session\",\"relationName\":\"SessionToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false,\"documentation\":\"@@allow(\\'all\\', true)\"},\"Post\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"authorId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"author\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"relationName\":\"PostToUser\",\"relationFromFields\":[\"authorId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false,\"documentation\":\"@@allow(\\'all\\', true)\"},\"Account\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"cuid\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"type\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"provider\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"access_token\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"token_type\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"scope\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"id_token\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"session_state\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"user\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"relationName\":\"AccountToUser\",\"relationFromFields\":[\"userId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"provider\",\"providerAccountId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"provider\",\"providerAccountId\"]}],\"isGenerated\":false},\"Session\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"cuid\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expires\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"user\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"relationName\":\"SessionToUser\",\"relationFromFields\":[\"userId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"VerificationToken\":{\"dbName\":null,\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"token\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expires\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"identifier\",\"token\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"identifier\",\"token\"]}],\"isGenerated\":false}},\"enums\":{},\"types\":{}}');\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library */ \"(rsc)/../../node_modules/.prisma/client/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"libquery_engine-debian-openssl-1.1.x.so.node\");\npath.join(process.cwd(), \"../../node_modules/.prisma/client/libquery_engine-debian-openssl-1.1.x.so.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"../../node_modules/.prisma/client/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.prisma/client/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.prisma/client/runtime/library.js":
/*!************************************************************!*\
  !*** ../../node_modules/.prisma/client/runtime/library.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Ll = Object.create;\nvar Rt = Object.defineProperty;\nvar $l = Object.getOwnPropertyDescriptor;\nvar ql = Object.getOwnPropertyNames;\nvar Vl = Object.getPrototypeOf, jl = Object.prototype.hasOwnProperty;\nvar Bl = (e1, t1, r1)=>t1 in e1 ? Rt(e1, t1, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r1\n    }) : e1[t1] = r1;\nvar V = (e1, t1)=>()=>(t1 || e1((t1 = {\n            exports: {}\n        }).exports, t1), t1.exports), St = (e1, t1)=>{\n    for(var r1 in t1)Rt(e1, r1, {\n        get: t1[r1],\n        enumerable: !0\n    });\n}, Xi = (e1, t1, r1, n1)=>{\n    if (t1 && typeof t1 == \"object\" || typeof t1 == \"function\") for (let i1 of ql(t1))!jl.call(e1, i1) && i1 !== r1 && Rt(e1, i1, {\n        get: ()=>t1[i1],\n        enumerable: !(n1 = $l(t1, i1)) || n1.enumerable\n    });\n    return e1;\n};\nvar S = (e1, t1, r1)=>(r1 = e1 != null ? Ll(Vl(e1)) : {}, Xi(t1 || !e1 || !e1.__esModule ? Rt(r1, \"default\", {\n        value: e1,\n        enumerable: !0\n    }) : r1, e1)), Ul = (e1)=>Xi(Rt({}, \"__esModule\", {\n        value: !0\n    }), e1);\nvar eo = (e1, t1, r1)=>(Bl(e1, typeof t1 != \"symbol\" ? t1 + \"\" : t1, r1), r1);\nvar co = V((xm1, uo1)=>{\n    \"use strict\";\n    var rt1 = 1e3, nt1 = rt1 * 60, it1 = nt1 * 60, Qe1 = it1 * 24, Kl1 = Qe1 * 7, Ql1 = Qe1 * 365.25;\n    uo1.exports = function(e1, t1) {\n        t1 = t1 || {};\n        var r1 = typeof e1;\n        if (r1 === \"string\" && e1.length > 0) return Gl1(e1);\n        if (r1 === \"number\" && isFinite(e1)) return t1.long ? Hl1(e1) : Jl1(e1);\n        throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(e1));\n    };\n    function Gl1(e1) {\n        if (e1 = String(e1), !(e1.length > 100)) {\n            var t1 = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e1);\n            if (t1) {\n                var r1 = parseFloat(t1[1]), n1 = (t1[2] || \"ms\").toLowerCase();\n                switch(n1){\n                    case \"years\":\n                    case \"year\":\n                    case \"yrs\":\n                    case \"yr\":\n                    case \"y\":\n                        return r1 * Ql1;\n                    case \"weeks\":\n                    case \"week\":\n                    case \"w\":\n                        return r1 * Kl1;\n                    case \"days\":\n                    case \"day\":\n                    case \"d\":\n                        return r1 * Qe1;\n                    case \"hours\":\n                    case \"hour\":\n                    case \"hrs\":\n                    case \"hr\":\n                    case \"h\":\n                        return r1 * it1;\n                    case \"minutes\":\n                    case \"minute\":\n                    case \"mins\":\n                    case \"min\":\n                    case \"m\":\n                        return r1 * nt1;\n                    case \"seconds\":\n                    case \"second\":\n                    case \"secs\":\n                    case \"sec\":\n                    case \"s\":\n                        return r1 * rt1;\n                    case \"milliseconds\":\n                    case \"millisecond\":\n                    case \"msecs\":\n                    case \"msec\":\n                    case \"ms\":\n                        return r1;\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n    function Jl1(e1) {\n        var t1 = Math.abs(e1);\n        return t1 >= Qe1 ? Math.round(e1 / Qe1) + \"d\" : t1 >= it1 ? Math.round(e1 / it1) + \"h\" : t1 >= nt1 ? Math.round(e1 / nt1) + \"m\" : t1 >= rt1 ? Math.round(e1 / rt1) + \"s\" : e1 + \"ms\";\n    }\n    function Hl1(e1) {\n        var t1 = Math.abs(e1);\n        return t1 >= Qe1 ? br1(e1, t1, Qe1, \"day\") : t1 >= it1 ? br1(e1, t1, it1, \"hour\") : t1 >= nt1 ? br1(e1, t1, nt1, \"minute\") : t1 >= rt1 ? br1(e1, t1, rt1, \"second\") : e1 + \" ms\";\n    }\n    function br1(e1, t1, r1, n1) {\n        var i1 = t1 >= r1 * 1.5;\n        return Math.round(e1 / r1) + \" \" + n1 + (i1 ? \"s\" : \"\");\n    }\n});\nvar kn = V((bm1, po1)=>{\n    \"use strict\";\n    function Wl1(e1) {\n        r1.debug = r1, r1.default = r1, r1.coerce = l1, r1.disable = o1, r1.enable = i1, r1.enabled = s1, r1.humanize = co(), r1.destroy = u1, Object.keys(e1).forEach((c1)=>{\n            r1[c1] = e1[c1];\n        }), r1.names = [], r1.skips = [], r1.formatters = {};\n        function t1(c1) {\n            let p1 = 0;\n            for(let d1 = 0; d1 < c1.length; d1++)p1 = (p1 << 5) - p1 + c1.charCodeAt(d1), p1 |= 0;\n            return r1.colors[Math.abs(p1) % r1.colors.length];\n        }\n        r1.selectColor = t1;\n        function r1(c1) {\n            let p1, d1 = null, f1, y1;\n            function g1(...P1) {\n                if (!g1.enabled) return;\n                let T1 = g1, C1 = Number(new Date), x1 = C1 - (p1 || C1);\n                T1.diff = x1, T1.prev = p1, T1.curr = C1, p1 = C1, P1[0] = r1.coerce(P1[0]), typeof P1[0] != \"string\" && P1.unshift(\"%O\");\n                let M1 = 0;\n                P1[0] = P1[0].replace(/%([a-zA-Z%])/g, (J1, Ke1)=>{\n                    if (J1 === \"%%\") return \"%\";\n                    M1++;\n                    let $1 = r1.formatters[Ke1];\n                    if (typeof $1 == \"function\") {\n                        let z1 = P1[M1];\n                        J1 = $1.call(T1, z1), P1.splice(M1, 1), M1--;\n                    }\n                    return J1;\n                }), r1.formatArgs.call(T1, P1), (T1.log || r1.log).apply(T1, P1);\n            }\n            return g1.namespace = c1, g1.useColors = r1.useColors(), g1.color = r1.selectColor(c1), g1.extend = n1, g1.destroy = r1.destroy, Object.defineProperty(g1, \"enabled\", {\n                enumerable: !0,\n                configurable: !1,\n                get: ()=>d1 !== null ? d1 : (f1 !== r1.namespaces && (f1 = r1.namespaces, y1 = r1.enabled(c1)), y1),\n                set: (P1)=>{\n                    d1 = P1;\n                }\n            }), typeof r1.init == \"function\" && r1.init(g1), g1;\n        }\n        function n1(c1, p1) {\n            let d1 = r1(this.namespace + (typeof p1 > \"u\" ? \":\" : p1) + c1);\n            return d1.log = this.log, d1;\n        }\n        function i1(c1) {\n            r1.save(c1), r1.namespaces = c1, r1.names = [], r1.skips = [];\n            let p1, d1 = (typeof c1 == \"string\" ? c1 : \"\").split(/[\\s,]+/), f1 = d1.length;\n            for(p1 = 0; p1 < f1; p1++)d1[p1] && (c1 = d1[p1].replace(/\\*/g, \".*?\"), c1[0] === \"-\" ? r1.skips.push(new RegExp(\"^\" + c1.slice(1) + \"$\")) : r1.names.push(new RegExp(\"^\" + c1 + \"$\")));\n        }\n        function o1() {\n            let c1 = [\n                ...r1.names.map(a1),\n                ...r1.skips.map(a1).map((p1)=>\"-\" + p1)\n            ].join(\",\");\n            return r1.enable(\"\"), c1;\n        }\n        function s1(c1) {\n            if (c1[c1.length - 1] === \"*\") return !0;\n            let p1, d1;\n            for(p1 = 0, d1 = r1.skips.length; p1 < d1; p1++)if (r1.skips[p1].test(c1)) return !1;\n            for(p1 = 0, d1 = r1.names.length; p1 < d1; p1++)if (r1.names[p1].test(c1)) return !0;\n            return !1;\n        }\n        function a1(c1) {\n            return c1.toString().substring(2, c1.toString().length - 2).replace(/\\.\\*\\?$/, \"*\");\n        }\n        function l1(c1) {\n            return c1 instanceof Error ? c1.stack || c1.message : c1;\n        }\n        function u1() {\n            console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n        }\n        return r1.enable(r1.load()), r1;\n    }\n    po1.exports = Wl1;\n});\nvar mo = V((le1, Er1)=>{\n    \"use strict\";\n    le1.formatArgs = Yl1;\n    le1.save = Zl1;\n    le1.load = Xl1;\n    le1.useColors = zl1;\n    le1.storage = eu1();\n    le1.destroy = (()=>{\n        let e1 = !1;\n        return ()=>{\n            e1 || (e1 = !0, console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\"));\n        };\n    })();\n    le1.colors = [\n        \"#0000CC\",\n        \"#0000FF\",\n        \"#0033CC\",\n        \"#0033FF\",\n        \"#0066CC\",\n        \"#0066FF\",\n        \"#0099CC\",\n        \"#0099FF\",\n        \"#00CC00\",\n        \"#00CC33\",\n        \"#00CC66\",\n        \"#00CC99\",\n        \"#00CCCC\",\n        \"#00CCFF\",\n        \"#3300CC\",\n        \"#3300FF\",\n        \"#3333CC\",\n        \"#3333FF\",\n        \"#3366CC\",\n        \"#3366FF\",\n        \"#3399CC\",\n        \"#3399FF\",\n        \"#33CC00\",\n        \"#33CC33\",\n        \"#33CC66\",\n        \"#33CC99\",\n        \"#33CCCC\",\n        \"#33CCFF\",\n        \"#6600CC\",\n        \"#6600FF\",\n        \"#6633CC\",\n        \"#6633FF\",\n        \"#66CC00\",\n        \"#66CC33\",\n        \"#9900CC\",\n        \"#9900FF\",\n        \"#9933CC\",\n        \"#9933FF\",\n        \"#99CC00\",\n        \"#99CC33\",\n        \"#CC0000\",\n        \"#CC0033\",\n        \"#CC0066\",\n        \"#CC0099\",\n        \"#CC00CC\",\n        \"#CC00FF\",\n        \"#CC3300\",\n        \"#CC3333\",\n        \"#CC3366\",\n        \"#CC3399\",\n        \"#CC33CC\",\n        \"#CC33FF\",\n        \"#CC6600\",\n        \"#CC6633\",\n        \"#CC9900\",\n        \"#CC9933\",\n        \"#CCCC00\",\n        \"#CCCC33\",\n        \"#FF0000\",\n        \"#FF0033\",\n        \"#FF0066\",\n        \"#FF0099\",\n        \"#FF00CC\",\n        \"#FF00FF\",\n        \"#FF3300\",\n        \"#FF3333\",\n        \"#FF3366\",\n        \"#FF3399\",\n        \"#FF33CC\",\n        \"#FF33FF\",\n        \"#FF6600\",\n        \"#FF6633\",\n        \"#FF9900\",\n        \"#FF9933\",\n        \"#FFCC00\",\n        \"#FFCC33\"\n    ];\n    function zl1() {\n        return  false ? 0 : typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/) ? !1 : typeof document < \"u\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||  false && (0) || typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n    }\n    function Yl1(e1) {\n        if (e1[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + e1[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + Er1.exports.humanize(this.diff), !this.useColors) return;\n        let t1 = \"color: \" + this.color;\n        e1.splice(1, 0, t1, \"color: inherit\");\n        let r1 = 0, n1 = 0;\n        e1[0].replace(/%[a-zA-Z%]/g, (i1)=>{\n            i1 !== \"%%\" && (r1++, i1 === \"%c\" && (n1 = r1));\n        }), e1.splice(n1, 0, t1);\n    }\n    le1.log = console.debug || console.log || (()=>{});\n    function Zl1(e1) {\n        try {\n            e1 ? le1.storage.setItem(\"debug\", e1) : le1.storage.removeItem(\"debug\");\n        } catch  {}\n    }\n    function Xl1() {\n        let e1;\n        try {\n            e1 = le1.storage.getItem(\"debug\");\n        } catch  {}\n        return !e1 && typeof process < \"u\" && \"env\" in process && (e1 = process.env.DEBUG), e1;\n    }\n    function eu1() {\n        try {\n            return localStorage;\n        } catch  {}\n    }\n    Er1.exports = kn()(le1);\n    var { formatters: tu1 } = Er1.exports;\n    tu1.j = function(e1) {\n        try {\n            return JSON.stringify(e1);\n        } catch (t1) {\n            return \"[UnexpectedJSONParseError]: \" + t1.message;\n        }\n    };\n});\nvar Fn = V((Em1, fo1)=>{\n    \"use strict\";\n    fo1.exports = (e1, t1 = process.argv)=>{\n        let r1 = e1.startsWith(\"-\") ? \"\" : e1.length === 1 ? \"-\" : \"--\", n1 = t1.indexOf(r1 + e1), i1 = t1.indexOf(\"--\");\n        return n1 !== -1 && (i1 === -1 || n1 < i1);\n    };\n});\nvar _n = V((wm1, yo1)=>{\n    \"use strict\";\n    var ru1 = __webpack_require__(/*! os */ \"os\"), go1 = __webpack_require__(/*! tty */ \"tty\"), de1 = Fn(), { env: B1 } = process, ke1;\n    de1(\"no-color\") || de1(\"no-colors\") || de1(\"color=false\") || de1(\"color=never\") ? ke1 = 0 : (de1(\"color\") || de1(\"colors\") || de1(\"color=true\") || de1(\"color=always\")) && (ke1 = 1);\n    \"FORCE_COLOR\" in B1 && (B1.FORCE_COLOR === \"true\" ? ke1 = 1 : B1.FORCE_COLOR === \"false\" ? ke1 = 0 : ke1 = B1.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(B1.FORCE_COLOR, 10), 3));\n    function Dn1(e1) {\n        return e1 === 0 ? !1 : {\n            level: e1,\n            hasBasic: !0,\n            has256: e1 >= 2,\n            has16m: e1 >= 3\n        };\n    }\n    function On1(e1, t1) {\n        if (ke1 === 0) return 0;\n        if (de1(\"color=16m\") || de1(\"color=full\") || de1(\"color=truecolor\")) return 3;\n        if (de1(\"color=256\")) return 2;\n        if (e1 && !t1 && ke1 === void 0) return 0;\n        let r1 = ke1 || 0;\n        if (B1.TERM === \"dumb\") return r1;\n        if (process.platform === \"win32\") {\n            let n1 = ru1.release().split(\".\");\n            return Number(n1[0]) >= 10 && Number(n1[2]) >= 10586 ? Number(n1[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in B1) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n1)=>n1 in B1) || B1.CI_NAME === \"codeship\" ? 1 : r1;\n        if (\"TEAMCITY_VERSION\" in B1) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(B1.TEAMCITY_VERSION) ? 1 : 0;\n        if (B1.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in B1) {\n            let n1 = parseInt((B1.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(B1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n1 >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(B1.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(B1.TERM) || \"COLORTERM\" in B1 ? 1 : r1;\n    }\n    function nu1(e1) {\n        let t1 = On1(e1, e1 && e1.isTTY);\n        return Dn1(t1);\n    }\n    yo1.exports = {\n        supportsColor: nu1,\n        stdout: Dn1(On1(!0, go1.isatty(1))),\n        stderr: Dn1(On1(!0, go1.isatty(2)))\n    };\n});\nvar xo = V((H1, Pr1)=>{\n    \"use strict\";\n    var iu1 = __webpack_require__(/*! tty */ \"tty\"), wr1 = __webpack_require__(/*! util */ \"util\");\n    H1.init = pu1;\n    H1.log = lu1;\n    H1.formatArgs = su1;\n    H1.save = uu1;\n    H1.load = cu1;\n    H1.useColors = ou1;\n    H1.destroy = wr1.deprecate(()=>{}, \"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n    H1.colors = [\n        6,\n        2,\n        3,\n        4,\n        5,\n        1\n    ];\n    try {\n        let e1 = _n();\n        e1 && (e1.stderr || e1).level >= 2 && (H1.colors = [\n            20,\n            21,\n            26,\n            27,\n            32,\n            33,\n            38,\n            39,\n            40,\n            41,\n            42,\n            43,\n            44,\n            45,\n            56,\n            57,\n            62,\n            63,\n            68,\n            69,\n            74,\n            75,\n            76,\n            77,\n            78,\n            79,\n            80,\n            81,\n            92,\n            93,\n            98,\n            99,\n            112,\n            113,\n            128,\n            129,\n            134,\n            135,\n            148,\n            149,\n            160,\n            161,\n            162,\n            163,\n            164,\n            165,\n            166,\n            167,\n            168,\n            169,\n            170,\n            171,\n            172,\n            173,\n            178,\n            179,\n            184,\n            185,\n            196,\n            197,\n            198,\n            199,\n            200,\n            201,\n            202,\n            203,\n            204,\n            205,\n            206,\n            207,\n            208,\n            209,\n            214,\n            215,\n            220,\n            221\n        ]);\n    } catch  {}\n    H1.inspectOpts = Object.keys(process.env).filter((e1)=>/^debug_/i.test(e1)).reduce((e1, t1)=>{\n        let r1 = t1.substring(6).toLowerCase().replace(/_([a-z])/g, (i1, o1)=>o1.toUpperCase()), n1 = process.env[t1];\n        return /^(yes|on|true|enabled)$/i.test(n1) ? n1 = !0 : /^(no|off|false|disabled)$/i.test(n1) ? n1 = !1 : n1 === \"null\" ? n1 = null : n1 = Number(n1), e1[r1] = n1, e1;\n    }, {});\n    function ou1() {\n        return \"colors\" in H1.inspectOpts ? !!H1.inspectOpts.colors : iu1.isatty(process.stderr.fd);\n    }\n    function su1(e1) {\n        let { namespace: t1, useColors: r1 } = this;\n        if (r1) {\n            let n1 = this.color, i1 = \"\\x1b[3\" + (n1 < 8 ? n1 : \"8;5;\" + n1), o1 = `  ${i1};1m${t1} \\x1B[0m`;\n            e1[0] = o1 + e1[0].split(`\n`).join(`\n` + o1), e1.push(i1 + \"m+\" + Pr1.exports.humanize(this.diff) + \"\\x1b[0m\");\n        } else e1[0] = au1() + t1 + \" \" + e1[0];\n    }\n    function au1() {\n        return H1.inspectOpts.hideDate ? \"\" : new Date().toISOString() + \" \";\n    }\n    function lu1(...e1) {\n        return process.stderr.write(wr1.format(...e1) + `\n`);\n    }\n    function uu1(e1) {\n        e1 ? process.env.DEBUG = e1 : delete process.env.DEBUG;\n    }\n    function cu1() {\n        return process.env.DEBUG;\n    }\n    function pu1(e1) {\n        e1.inspectOpts = {};\n        let t1 = Object.keys(H1.inspectOpts);\n        for(let r1 = 0; r1 < t1.length; r1++)e1.inspectOpts[t1[r1]] = H1.inspectOpts[t1[r1]];\n    }\n    Pr1.exports = kn()(H1);\n    var { formatters: ho1 } = Pr1.exports;\n    ho1.o = function(e1) {\n        return this.inspectOpts.colors = this.useColors, wr1.inspect(e1, this.inspectOpts).split(`\n`).map((t1)=>t1.trim()).join(\" \");\n    };\n    ho1.O = function(e1) {\n        return this.inspectOpts.colors = this.useColors, wr1.inspect(e1, this.inspectOpts);\n    };\n});\nvar Ln = V((Pm1, Nn1)=>{\n    \"use strict\";\n    typeof process > \"u\" || process.type === \"renderer\" || false === !0 || process.__nwjs ? Nn1.exports = mo() : Nn1.exports = xo();\n});\nvar So = V((ef1, Un1)=>{\n    \"use strict\";\n    var A1 = Un1.exports;\n    Un1.exports.default = A1;\n    var I1 = \"\\x1b[\", kt1 = \"\\x1b]\", at1 = \"\\x07\", Mr1 = \";\", Ro1 = process.env.TERM_PROGRAM === \"Apple_Terminal\";\n    A1.cursorTo = (e1, t1)=>{\n        if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n        return typeof t1 != \"number\" ? I1 + (e1 + 1) + \"G\" : I1 + (t1 + 1) + \";\" + (e1 + 1) + \"H\";\n    };\n    A1.cursorMove = (e1, t1)=>{\n        if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n        let r1 = \"\";\n        return e1 < 0 ? r1 += I1 + -e1 + \"D\" : e1 > 0 && (r1 += I1 + e1 + \"C\"), t1 < 0 ? r1 += I1 + -t1 + \"A\" : t1 > 0 && (r1 += I1 + t1 + \"B\"), r1;\n    };\n    A1.cursorUp = (e1 = 1)=>I1 + e1 + \"A\";\n    A1.cursorDown = (e1 = 1)=>I1 + e1 + \"B\";\n    A1.cursorForward = (e1 = 1)=>I1 + e1 + \"C\";\n    A1.cursorBackward = (e1 = 1)=>I1 + e1 + \"D\";\n    A1.cursorLeft = I1 + \"G\";\n    A1.cursorSavePosition = Ro1 ? \"\\x1b7\" : I1 + \"s\";\n    A1.cursorRestorePosition = Ro1 ? \"\\x1b8\" : I1 + \"u\";\n    A1.cursorGetPosition = I1 + \"6n\";\n    A1.cursorNextLine = I1 + \"E\";\n    A1.cursorPrevLine = I1 + \"F\";\n    A1.cursorHide = I1 + \"?25l\";\n    A1.cursorShow = I1 + \"?25h\";\n    A1.eraseLines = (e1)=>{\n        let t1 = \"\";\n        for(let r1 = 0; r1 < e1; r1++)t1 += A1.eraseLine + (r1 < e1 - 1 ? A1.cursorUp() : \"\");\n        return e1 && (t1 += A1.cursorLeft), t1;\n    };\n    A1.eraseEndLine = I1 + \"K\";\n    A1.eraseStartLine = I1 + \"1K\";\n    A1.eraseLine = I1 + \"2K\";\n    A1.eraseDown = I1 + \"J\";\n    A1.eraseUp = I1 + \"1J\";\n    A1.eraseScreen = I1 + \"2J\";\n    A1.scrollUp = I1 + \"S\";\n    A1.scrollDown = I1 + \"T\";\n    A1.clearScreen = \"\\x1bc\";\n    A1.clearTerminal = process.platform === \"win32\" ? `${A1.eraseScreen}${I1}0f` : `${A1.eraseScreen}${I1}3J${I1}H`;\n    A1.beep = at1;\n    A1.link = (e1, t1)=>[\n            kt1,\n            \"8\",\n            Mr1,\n            Mr1,\n            t1,\n            at1,\n            e1,\n            kt1,\n            \"8\",\n            Mr1,\n            Mr1,\n            at1\n        ].join(\"\");\n    A1.image = (e1, t1 = {})=>{\n        let r1 = `${kt1}1337;File=inline=1`;\n        return t1.width && (r1 += `;width=${t1.width}`), t1.height && (r1 += `;height=${t1.height}`), t1.preserveAspectRatio === !1 && (r1 += \";preserveAspectRatio=0\"), r1 + \":\" + e1.toString(\"base64\") + at1;\n    };\n    A1.iTerm = {\n        setCwd: (e1 = process.cwd())=>`${kt1}50;CurrentDir=${e1}${at1}`,\n        annotation: (e1, t1 = {})=>{\n            let r1 = `${kt1}1337;`, n1 = typeof t1.x < \"u\", i1 = typeof t1.y < \"u\";\n            if ((n1 || i1) && !(n1 && i1 && typeof t1.length < \"u\")) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n            return e1 = e1.replace(/\\|/g, \"\"), r1 += t1.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", t1.length > 0 ? r1 += (n1 ? [\n                e1,\n                t1.length,\n                t1.x,\n                t1.y\n            ] : [\n                t1.length,\n                e1\n            ]).join(\"|\") : r1 += e1, r1 + at1;\n        }\n    };\n});\nvar Fo = V((tf1, ko1)=>{\n    \"use strict\";\n    var hu1 = _n(), lt1 = Fn();\n    function Io1(e1) {\n        if (/^\\d{3,4}$/.test(e1)) {\n            let r1 = /(\\d{1,2})(\\d{2})/.exec(e1);\n            return {\n                major: 0,\n                minor: parseInt(r1[1], 10),\n                patch: parseInt(r1[2], 10)\n            };\n        }\n        let t1 = (e1 || \"\").split(\".\").map((r1)=>parseInt(r1, 10));\n        return {\n            major: t1[0],\n            minor: t1[1],\n            patch: t1[2]\n        };\n    }\n    function Kn1(e1) {\n        let { env: t1 } = process;\n        if (\"FORCE_HYPERLINK\" in t1) return !(t1.FORCE_HYPERLINK.length > 0 && parseInt(t1.FORCE_HYPERLINK, 10) === 0);\n        if (lt1(\"no-hyperlink\") || lt1(\"no-hyperlinks\") || lt1(\"hyperlink=false\") || lt1(\"hyperlink=never\")) return !1;\n        if (lt1(\"hyperlink=true\") || lt1(\"hyperlink=always\") || \"NETLIFY\" in t1) return !0;\n        if (!hu1.supportsColor(e1) || e1 && !e1.isTTY || process.platform === \"win32\" || \"CI\" in t1 || \"TEAMCITY_VERSION\" in t1) return !1;\n        if (\"TERM_PROGRAM\" in t1) {\n            let r1 = Io1(t1.TERM_PROGRAM_VERSION);\n            switch(t1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return r1.major === 3 ? r1.minor >= 1 : r1.major > 3;\n                case \"WezTerm\":\n                    return r1.major >= 20200620;\n                case \"vscode\":\n                    return r1.major > 1 || r1.major === 1 && r1.minor >= 72;\n            }\n        }\n        if (\"VTE_VERSION\" in t1) {\n            if (t1.VTE_VERSION === \"0.50.0\") return !1;\n            let r1 = Io1(t1.VTE_VERSION);\n            return r1.major > 0 || r1.minor >= 50;\n        }\n        return !1;\n    }\n    ko1.exports = {\n        supportsHyperlink: Kn1,\n        stdout: Kn1(process.stdout),\n        stderr: Kn1(process.stderr)\n    };\n});\nvar Oo = V((rf1, Ft1)=>{\n    \"use strict\";\n    var xu1 = So(), Qn1 = Fo(), Do1 = (e1, t1, { target: r1 = \"stdout\", ...n1 } = {})=>Qn1[r1] ? xu1.link(e1, t1) : n1.fallback === !1 ? e1 : typeof n1.fallback == \"function\" ? n1.fallback(e1, t1) : `${e1} (\\u200B${t1}\\u200B)`;\n    Ft1.exports = (e1, t1, r1 = {})=>Do1(e1, t1, r1);\n    Ft1.exports.stderr = (e1, t1, r1 = {})=>Do1(e1, t1, {\n            target: \"stderr\",\n            ...r1\n        });\n    Ft1.exports.isSupported = Qn1.stdout;\n    Ft1.exports.stderr.isSupported = Qn1.stderr;\n});\nvar Ko = V((wf1, Du1)=>{\n    Du1.exports = {\n        name: \"dotenv\",\n        version: \"16.0.3\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                require: \"./lib/main.js\",\n                types: \"./lib/main.d.ts\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            \"lint-readme\": \"standard-markdown\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap tests/*.js --100 -Rspec\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^17.0.9\",\n            decache: \"^4.6.1\",\n            dtslint: \"^3.7.0\",\n            sinon: \"^12.0.1\",\n            standard: \"^16.0.4\",\n            \"standard-markdown\": \"^7.1.0\",\n            \"standard-version\": \"^9.3.2\",\n            tap: \"^15.1.6\",\n            tar: \"^6.1.11\",\n            typescript: \"^4.5.4\"\n        },\n        engines: {\n            node: \">=12\"\n        }\n    };\n});\nvar Go = V((Pf1, Fr1)=>{\n    \"use strict\";\n    var Ou1 = __webpack_require__(/*! fs */ \"fs\"), Qo1 = __webpack_require__(/*! path */ \"path\"), _u1 = __webpack_require__(/*! os */ \"os\"), Nu1 = Ko(), Lu1 = Nu1.version, $u1 = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function qu1(e1) {\n        let t1 = {}, r1 = e1.toString();\n        r1 = r1.replace(/\\r\\n?/mg, `\n`);\n        let n1;\n        for(; (n1 = $u1.exec(r1)) != null;){\n            let i1 = n1[1], o1 = n1[2] || \"\";\n            o1 = o1.trim();\n            let s1 = o1[0];\n            o1 = o1.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s1 === '\"' && (o1 = o1.replace(/\\\\n/g, `\n`), o1 = o1.replace(/\\\\r/g, \"\\r\")), t1[i1] = o1;\n        }\n        return t1;\n    }\n    function Wn1(e1) {\n        console.log(`[dotenv@${Lu1}][DEBUG] ${e1}`);\n    }\n    function Vu1(e1) {\n        return e1[0] === \"~\" ? Qo1.join(_u1.homedir(), e1.slice(1)) : e1;\n    }\n    function ju1(e1) {\n        let t1 = Qo1.resolve(process.cwd(), \".env\"), r1 = \"utf8\", n1 = !!(e1 && e1.debug), i1 = !!(e1 && e1.override);\n        e1 && (e1.path != null && (t1 = Vu1(e1.path)), e1.encoding != null && (r1 = e1.encoding));\n        try {\n            let o1 = kr1.parse(Ou1.readFileSync(t1, {\n                encoding: r1\n            }));\n            return Object.keys(o1).forEach(function(s1) {\n                Object.prototype.hasOwnProperty.call(process.env, s1) ? (i1 === !0 && (process.env[s1] = o1[s1]), n1 && Wn1(i1 === !0 ? `\"${s1}\" is already defined in \\`process.env\\` and WAS overwritten` : `\"${s1}\" is already defined in \\`process.env\\` and was NOT overwritten`)) : process.env[s1] = o1[s1];\n            }), {\n                parsed: o1\n            };\n        } catch (o1) {\n            return n1 && Wn1(`Failed to load ${t1} ${o1.message}`), {\n                error: o1\n            };\n        }\n    }\n    var kr1 = {\n        config: ju1,\n        parse: qu1\n    };\n    Fr1.exports.config = kr1.config;\n    Fr1.exports.parse = kr1.parse;\n    Fr1.exports = kr1;\n});\nvar Zo = V((Sf1, Yo1)=>{\n    \"use strict\";\n    Yo1.exports = (e1)=>{\n        let t1 = e1.match(/^[ \\t]*(?=\\S)/gm);\n        return t1 ? t1.reduce((r1, n1)=>Math.min(r1, n1.length), 1 / 0) : 0;\n    };\n});\nvar es = V((If1, Xo1)=>{\n    \"use strict\";\n    var Qu1 = Zo();\n    Xo1.exports = (e1)=>{\n        let t1 = Qu1(e1);\n        if (t1 === 0) return e1;\n        let r1 = new RegExp(`^[ \\\\t]{${t1}}`, \"gm\");\n        return e1.replace(r1, \"\");\n    };\n});\nvar ts = V((kf1, Gu1)=>{\n    Gu1.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"5.5.1-1.aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.18.6\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar Xn = V((Or1)=>{\n    \"use strict\";\n    Object.defineProperty(Or1, \"__esModule\", {\n        value: !0\n    });\n    Or1.enginesVersion = void 0;\n    Or1.enginesVersion = ts().prisma.enginesVersion;\n});\nvar ii = V((Kf1, is1)=>{\n    \"use strict\";\n    is1.exports = (e1, t1 = 1, r1)=>{\n        if (r1 = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...r1\n        }, typeof e1 != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e1}\\``);\n        if (typeof t1 != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof t1}\\``);\n        if (typeof r1.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof r1.indent}\\``);\n        if (t1 === 0) return e1;\n        let n1 = r1.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e1.replace(n1, r1.indent.repeat(t1));\n    };\n});\nvar ls = V((Jf1, as1)=>{\n    \"use strict\";\n    as1.exports = ({ onlyFirst: e1 = !1 } = {})=>{\n        let t1 = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(t1, e1 ? void 0 : \"g\");\n    };\n});\nvar li = V((Hf1, us1)=>{\n    \"use strict\";\n    var rc1 = ls();\n    us1.exports = (e1)=>typeof e1 == \"string\" ? e1.replace(rc1(), \"\") : e1;\n});\nvar cs = V((Yf1, Nr1)=>{\n    \"use strict\";\n    Nr1.exports = (e1 = {})=>{\n        let t1;\n        if (e1.repoUrl) t1 = e1.repoUrl;\n        else if (e1.user && e1.repo) t1 = `https://github.com/${e1.user}/${e1.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let r1 = new URL(`${t1}/issues/new`), n1 = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i1 of n1){\n            let o1 = e1[i1];\n            if (o1 !== void 0) {\n                if (i1 === \"labels\" || i1 === \"projects\") {\n                    if (!Array.isArray(o1)) throw new TypeError(`The \\`${i1}\\` option should be an array`);\n                    o1 = o1.join(\",\");\n                }\n                r1.searchParams.set(i1, o1);\n            }\n        }\n        return r1.toString();\n    };\n    Nr1.exports.default = Nr1.exports;\n});\nvar Ui = V((CP1, Ka1)=>{\n    \"use strict\";\n    Ka1.exports = function() {\n        function e1(t1, r1, n1, i1, o1) {\n            return t1 < r1 || n1 < r1 ? t1 > n1 ? n1 + 1 : t1 + 1 : i1 === o1 ? r1 : r1 + 1;\n        }\n        return function(t1, r1) {\n            if (t1 === r1) return 0;\n            if (t1.length > r1.length) {\n                var n1 = t1;\n                t1 = r1, r1 = n1;\n            }\n            for(var i1 = t1.length, o1 = r1.length; i1 > 0 && t1.charCodeAt(i1 - 1) === r1.charCodeAt(o1 - 1);)i1--, o1--;\n            for(var s1 = 0; s1 < i1 && t1.charCodeAt(s1) === r1.charCodeAt(s1);)s1++;\n            if (i1 -= s1, o1 -= s1, i1 === 0 || o1 < 3) return o1;\n            var a1 = 0, l1, u1, c1, p1, d1, f1, y1, g1, P1, T1, C1, x1, M1 = [];\n            for(l1 = 0; l1 < i1; l1++)M1.push(l1 + 1), M1.push(t1.charCodeAt(s1 + l1));\n            for(var ce1 = M1.length - 1; a1 < o1 - 3;)for(P1 = r1.charCodeAt(s1 + (u1 = a1)), T1 = r1.charCodeAt(s1 + (c1 = a1 + 1)), C1 = r1.charCodeAt(s1 + (p1 = a1 + 2)), x1 = r1.charCodeAt(s1 + (d1 = a1 + 3)), f1 = a1 += 4, l1 = 0; l1 < ce1; l1 += 2)y1 = M1[l1], g1 = M1[l1 + 1], u1 = e1(y1, u1, c1, P1, g1), c1 = e1(u1, c1, p1, T1, g1), p1 = e1(c1, p1, d1, C1, g1), f1 = e1(p1, d1, f1, x1, g1), M1[l1] = f1, d1 = p1, p1 = c1, c1 = u1, u1 = y1;\n            for(; a1 < o1;)for(P1 = r1.charCodeAt(s1 + (u1 = a1)), f1 = ++a1, l1 = 0; l1 < ce1; l1 += 2)y1 = M1[l1], M1[l1] = f1 = e1(y1, u1, f1, P1, M1[l1 + 1]), u1 = y1;\n            return f1;\n        };\n    }();\n});\nvar sm = {};\nSt(sm, {\n    DMMF: ()=>pe,\n    DMMFClass: ()=>xr,\n    Debug: ()=>$n,\n    Decimal: ()=>Pe,\n    Extensions: ()=>Mn,\n    MetricsClient: ()=>dt,\n    NotFoundError: ()=>Me,\n    ObjectEnumValue: ()=>xe,\n    PrismaClientInitializationError: ()=>F,\n    PrismaClientKnownRequestError: ()=>U,\n    PrismaClientRustPanicError: ()=>ue,\n    PrismaClientUnknownRequestError: ()=>K,\n    PrismaClientValidationError: ()=>X,\n    Public: ()=>Rn,\n    Sql: ()=>oe,\n    Types: ()=>Sn,\n    defineDmmfProperty: ()=>ms,\n    empty: ()=>ys,\n    getPrismaClient: ()=>Ol,\n    itxClientDenyList: ()=>zi,\n    join: ()=>gs,\n    makeStrictEnum: ()=>_l,\n    objectEnumNames: ()=>ic,\n    objectEnumValues: ()=>$r,\n    raw: ()=>gi,\n    sqltag: ()=>yi,\n    warnEnvConflicts: ()=>Nl,\n    warnOnce: ()=>qt\n});\nmodule.exports = Ul(sm);\nvar Mn = {};\nSt(Mn, {\n    defineExtension: ()=>to,\n    getExtensionContext: ()=>ro\n});\nfunction to(e1) {\n    return typeof e1 == \"function\" ? e1 : (t1)=>t1.$extends(e1);\n}\nfunction ro(e1) {\n    return e1;\n}\nvar Rn = {};\nSt(Rn, {\n    validator: ()=>no\n});\nfunction no(...e1) {\n    return (t1)=>t1;\n}\nvar Sn = {};\nSt(Sn, {\n    Extensions: ()=>io,\n    Public: ()=>oo,\n    Result: ()=>so,\n    Utils: ()=>ao\n});\nvar io = {};\nvar oo = {};\nvar so = {};\nvar ao = {};\nvar Ie = (e1, t1)=>{\n    let r1 = {};\n    for (let n1 of e1){\n        let i1 = n1[t1];\n        r1[i1] = n1;\n    }\n    return r1;\n};\nfunction lo(e1) {\n    return e1.substring(0, 1).toLowerCase() + e1.substring(1);\n}\nvar xr = class {\n    constructor(t1){\n        this.document = t1;\n        this.compositeNames = new Set(this.datamodel.types.map((r1)=>r1.name)), this.typeAndModelMap = this.buildTypeModelMap(), this.mappingsMap = this.buildMappingsMap(), this.outputTypeMap = this.buildMergedOutputTypeMap(), this.rootFieldMap = this.buildRootFieldMap(), this.inputTypesByName = this.buildInputTypesMap();\n    }\n    get datamodel() {\n        return this.document.datamodel;\n    }\n    get mappings() {\n        return this.document.mappings;\n    }\n    get schema() {\n        return this.document.schema;\n    }\n    get inputObjectTypes() {\n        return this.schema.inputObjectTypes;\n    }\n    get outputObjectTypes() {\n        return this.schema.outputObjectTypes;\n    }\n    isComposite(t1) {\n        return this.compositeNames.has(t1);\n    }\n    getOtherOperationNames() {\n        return [\n            Object.values(this.mappings.otherOperations.write),\n            Object.values(this.mappings.otherOperations.read)\n        ].flat();\n    }\n    hasEnumInNamespace(t1, r1) {\n        return this.schema.enumTypes[r1]?.find((n1)=>n1.name === t1) !== void 0;\n    }\n    resolveInputObjectType(t1) {\n        return this.inputTypesByName.get(In(t1.type, t1.namespace));\n    }\n    resolveOutputObjectType(t1) {\n        if (t1.location === \"outputObjectTypes\") return this.outputObjectTypes[t1.namespace ?? \"prisma\"].find((r1)=>r1.name === t1.type);\n    }\n    buildModelMap() {\n        return Ie(this.datamodel.models, \"name\");\n    }\n    buildTypeMap() {\n        return Ie(this.datamodel.types, \"name\");\n    }\n    buildTypeModelMap() {\n        return {\n            ...this.buildTypeMap(),\n            ...this.buildModelMap()\n        };\n    }\n    buildMappingsMap() {\n        return Ie(this.mappings.modelOperations, \"model\");\n    }\n    buildMergedOutputTypeMap() {\n        return {\n            model: Ie(this.schema.outputObjectTypes.model, \"name\"),\n            prisma: Ie(this.schema.outputObjectTypes.prisma, \"name\")\n        };\n    }\n    buildRootFieldMap() {\n        return {\n            ...Ie(this.outputTypeMap.prisma.Query.fields, \"name\"),\n            ...Ie(this.outputTypeMap.prisma.Mutation.fields, \"name\")\n        };\n    }\n    buildInputTypesMap() {\n        let t1 = new Map;\n        for (let r1 of this.inputObjectTypes.prisma)t1.set(In(r1.name, \"prisma\"), r1);\n        if (!this.inputObjectTypes.model) return t1;\n        for (let r1 of this.inputObjectTypes.model)t1.set(In(r1.name, \"model\"), r1);\n        return t1;\n    }\n};\nfunction In(e1, t1) {\n    return t1 ? `${t1}.${e1}` : e1;\n}\nvar pe;\n((t1)=>{\n    let e1;\n    ((x1)=>(x1.findUnique = \"findUnique\", x1.findUniqueOrThrow = \"findUniqueOrThrow\", x1.findFirst = \"findFirst\", x1.findFirstOrThrow = \"findFirstOrThrow\", x1.findMany = \"findMany\", x1.create = \"create\", x1.createMany = \"createMany\", x1.update = \"update\", x1.updateMany = \"updateMany\", x1.upsert = \"upsert\", x1.delete = \"delete\", x1.deleteMany = \"deleteMany\", x1.groupBy = \"groupBy\", x1.count = \"count\", x1.aggregate = \"aggregate\", x1.findRaw = \"findRaw\", x1.aggregateRaw = \"aggregateRaw\"))(e1 = t1.ModelAction || (t1.ModelAction = {}));\n})(pe || (pe = {}));\nvar vr = S(Ln()), du = 100, It = [];\ntypeof process < \"u\" && typeof process.stderr?.write != \"function\" && (vr.default.log = console.debug ?? console.log);\nfunction mu(e1) {\n    let t1 = (0, vr.default)(e1), r1 = Object.assign((...n1)=>(t1.log = r1.log, n1.length !== 0 && It.push([\n            e1,\n            ...n1\n        ]), It.length > du && It.shift(), t1(\"\", ...n1)), t1);\n    return r1;\n}\nvar $n = Object.assign(mu, vr.default);\nfunction bo(e1 = 7500) {\n    let t1 = It.map((r1)=>r1.map((n1)=>typeof n1 == \"string\" ? n1 : JSON.stringify(n1)).join(\" \")).join(`\n`);\n    return t1.length < e1 ? t1 : t1.slice(-e1);\n}\nfunction Eo() {\n    It.length = 0;\n}\nvar O = $n;\nvar qn, wo, Po, vo, To = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: qn, NODE_DISABLE_COLORS: wo, NO_COLOR: Po, TERM: vo } = process.env || {}, To = process.stdout && process.stdout.isTTY);\nvar fu = {\n    enabled: !wo && Po == null && vo !== \"dumb\" && (qn != null && qn !== \"0\" || To)\n};\nfunction _(e1, t1) {\n    let r1 = new RegExp(`\\\\x1b\\\\[${t1}m`, \"g\"), n1 = `\\x1B[${e1}m`, i1 = `\\x1B[${t1}m`;\n    return function(o1) {\n        return !fu.enabled || o1 == null ? o1 : n1 + (~(\"\" + o1).indexOf(i1) ? o1.replace(r1, i1 + n1) : o1) + i1;\n    };\n}\nvar Tm = _(0, 0), ne = _(1, 22), Fe = _(2, 22), Cm = _(3, 23), te = _(4, 24), Am = _(7, 27), Mm = _(8, 28), Rm = _(9, 29), Sm = _(30, 39), me = _(31, 39), Ge = _(32, 39), he = _(33, 39), ot = _(34, 39), Im = _(35, 39), De = _(36, 39), km = _(37, 39), Tr = _(90, 39), Fm = _(90, 39), Dm = _(40, 49), Om = _(41, 49), _m = _(42, 49), Nm = _(43, 49), Lm = _(44, 49), $m = _(45, 49), qm = _(46, 49), Vm = _(47, 49);\nvar Co = S(__webpack_require__(/*! fs */ \"fs\"));\nfunction Vn() {\n    let e1 = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e1 && Co.default.existsSync(e1)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar Cr = \"libquery_engine\";\nfunction jn(e1, t1) {\n    let r1 = t1 === \"url\";\n    return e1.includes(\"windows\") ? r1 ? \"query_engine.dll.node\" : `query_engine-${e1}.dll.node` : e1.includes(\"darwin\") ? r1 ? `${Cr}.dylib.node` : `${Cr}-${e1}.dylib.node` : r1 ? `${Cr}.so.node` : `${Cr}-${e1}.so.node`;\n}\nvar $o = S(__webpack_require__(/*! child_process */ \"child_process\")), Gn = S(__webpack_require__(/*! fs/promises */ \"fs/promises\")), Sr = S(__webpack_require__(/*! os */ \"os\"));\nvar Ar = Symbol(\"@ts-pattern/matcher\"), Ao = \"@ts-pattern/anonymous-select-key\", Mo = function(e1) {\n    return !!(e1 && typeof e1 == \"object\");\n}, Bn = function(e1) {\n    return e1 && !!e1[Ar];\n}, gu = function e1(t1, r1, n1) {\n    if (Mo(t1)) {\n        if (Bn(t1)) {\n            var i1 = t1[Ar]().match(r1), o1 = i1.matched, s1 = i1.selections;\n            return o1 && s1 && Object.keys(s1).forEach(function(l1) {\n                return n1(l1, s1[l1]);\n            }), o1;\n        }\n        if (!Mo(r1)) return !1;\n        if (Array.isArray(t1)) return !!Array.isArray(r1) && t1.length === r1.length && t1.every(function(l1, u1) {\n            return e1(l1, r1[u1], n1);\n        });\n        if (t1 instanceof Map) return r1 instanceof Map && Array.from(t1.keys()).every(function(l1) {\n            return e1(t1.get(l1), r1.get(l1), n1);\n        });\n        if (t1 instanceof Set) {\n            if (!(r1 instanceof Set)) return !1;\n            if (t1.size === 0) return r1.size === 0;\n            if (t1.size === 1) {\n                var a1 = Array.from(t1.values())[0];\n                return Bn(a1) ? Array.from(r1.values()).every(function(l1) {\n                    return e1(a1, l1, n1);\n                }) : r1.has(a1);\n            }\n            return Array.from(t1.values()).every(function(l1) {\n                return r1.has(l1);\n            });\n        }\n        return Object.keys(t1).every(function(l1) {\n            var u1, c1 = t1[l1];\n            return (l1 in r1 || Bn(u1 = c1) && u1[Ar]().matcherType === \"optional\") && e1(c1, r1[l1], n1);\n        });\n    }\n    return Object.is(r1, t1);\n};\nfunction Je(e1) {\n    var t1;\n    return (t1 = {})[Ar] = function() {\n        return {\n            match: function(r1) {\n                return {\n                    matched: !!e1(r1)\n                };\n            }\n        };\n    }, t1;\n}\nvar Gm = Je(function(e1) {\n    return !0;\n});\nvar Jm = Je(function(e1) {\n    return typeof e1 == \"string\";\n}), Hm = Je(function(e1) {\n    return typeof e1 == \"number\";\n}), Wm = Je(function(e1) {\n    return typeof e1 == \"boolean\";\n}), zm = Je(function(e1) {\n    return typeof e1 == \"bigint\";\n}), Ym = Je(function(e1) {\n    return typeof e1 == \"symbol\";\n}), Zm = Je(function(e1) {\n    return e1 == null;\n});\nfunction st(e1) {\n    return new yu(e1, []);\n}\nvar yu = function() {\n    function e1(r1, n1) {\n        this.value = void 0, this.cases = void 0, this.value = r1, this.cases = n1;\n    }\n    var t1 = e1.prototype;\n    return t1.with = function() {\n        var r1 = [].slice.call(arguments), n1 = r1[r1.length - 1], i1 = [\n            r1[0]\n        ], o1 = [];\n        return r1.length === 3 && typeof r1[1] == \"function\" ? (i1.push(r1[0]), o1.push(r1[1])) : r1.length > 2 && i1.push.apply(i1, r1.slice(1, r1.length - 1)), new e1(this.value, this.cases.concat([\n            {\n                match: function(s1) {\n                    var a1 = {}, l1 = !!(i1.some(function(u1) {\n                        return gu(u1, s1, function(c1, p1) {\n                            a1[c1] = p1;\n                        });\n                    }) && o1.every(function(u1) {\n                        return u1(s1);\n                    }));\n                    return {\n                        matched: l1,\n                        value: l1 && Object.keys(a1).length ? Ao in a1 ? a1[Ao] : a1 : s1\n                    };\n                },\n                handler: n1\n            }\n        ]));\n    }, t1.when = function(r1, n1) {\n        return new e1(this.value, this.cases.concat([\n            {\n                match: function(i1) {\n                    return {\n                        matched: !!r1(i1),\n                        value: i1\n                    };\n                },\n                handler: n1\n            }\n        ]));\n    }, t1.otherwise = function(r1) {\n        return new e1(this.value, this.cases.concat([\n            {\n                match: function(n1) {\n                    return {\n                        matched: !0,\n                        value: n1\n                    };\n                },\n                handler: r1\n            }\n        ])).run();\n    }, t1.exhaustive = function() {\n        return this.run();\n    }, t1.run = function() {\n        for(var r1 = this.value, n1 = void 0, i1 = 0; i1 < this.cases.length; i1++){\n            var o1 = this.cases[i1], s1 = o1.match(this.value);\n            if (s1.matched) {\n                r1 = s1.value, n1 = o1.handler;\n                break;\n            }\n        }\n        if (!n1) {\n            var a1;\n            try {\n                a1 = JSON.stringify(this.value);\n            } catch  {\n                a1 = this.value;\n            }\n            throw new Error(\"Pattern matching error: no pattern matches value \" + a1);\n        }\n        return n1(r1, this.value);\n    }, e1;\n}();\nvar qo = __webpack_require__(/*! util */ \"util\");\nvar _o = S(Oo());\nfunction Dt(e1) {\n    return (0, _o.default)(e1, e1, {\n        fallback: te\n    });\n}\nvar bu = {\n    warn: he(\"prisma:warn\")\n}, Eu = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Ot(e1, ...t1) {\n    Eu.warn() && console.warn(`${bu.warn} ${e1}`, ...t1);\n}\nvar wu = (0, qo.promisify)($o.default.exec), ie = O(\"prisma:get-platform\"), Pu = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Vo() {\n    let e1 = Sr.default.platform(), t1 = process.arch;\n    if (e1 === \"freebsd\") {\n        let s1 = await Ir(\"freebsd-version\");\n        if (s1 && s1.trim().length > 0) {\n            let l1 = /^(\\d+)\\.?/.exec(s1);\n            if (l1) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l1[1]}`,\n                arch: t1\n            };\n        }\n    }\n    if (e1 !== \"linux\") return {\n        platform: e1,\n        arch: t1\n    };\n    let r1 = await Tu(), n1 = await Fu(), i1 = Au({\n        arch: t1,\n        archFromUname: n1,\n        familyDistro: r1.familyDistro\n    }), { libssl: o1 } = await Mu(i1);\n    return {\n        platform: \"linux\",\n        libssl: o1,\n        arch: t1,\n        archFromUname: n1,\n        ...r1\n    };\n}\nfunction vu(e1) {\n    let t1 = /^ID=\"?([^\"\\n]*)\"?$/im, r1 = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n1 = t1.exec(e1), i1 = n1 && n1[1] && n1[1].toLowerCase() || \"\", o1 = r1.exec(e1), s1 = o1 && o1[1] && o1[1].toLowerCase() || \"\", a1 = st({\n        id: i1,\n        idLike: s1\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"musl\",\n            familyDistro: l1,\n            originalDistro: l1\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l1,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"debian\") || l1.includes(\"ubuntu\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>i1 === \"arch\" || l1.includes(\"arch\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"centos\") || l1.includes(\"fedora\") || l1.includes(\"rhel\") || l1.includes(\"suse\"), ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).otherwise(({ id: l1 })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l1\n        }));\n    return ie(`Found distro info:\n${JSON.stringify(a1, null, 2)}`), a1;\n}\nasync function Tu() {\n    let e1 = \"/etc/os-release\";\n    try {\n        let t1 = await Gn.default.readFile(e1, {\n            encoding: \"utf-8\"\n        });\n        return vu(t1);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction Cu(e1) {\n    let t1 = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e1);\n    if (t1) {\n        let r1 = `${t1[1]}.x`;\n        return jo(r1);\n    }\n}\nfunction No(e1) {\n    let t1 = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e1);\n    if (t1) {\n        let r1 = `${t1[1]}${t1[2] ?? \".0\"}.x`;\n        return jo(r1);\n    }\n}\nfunction jo(e1) {\n    let t1 = (()=>{\n        if (Uo(e1)) return e1;\n        let r1 = e1.split(\".\");\n        return r1[1] = \"0\", r1.join(\".\");\n    })();\n    if (Pu.includes(t1)) return t1;\n}\nfunction Au(e1) {\n    return st(e1).with({\n        familyDistro: \"musl\"\n    }, ()=>(ie('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: t1 })=>(ie('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${t1}-linux-gnu`,\n            `/lib/${t1}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ie('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: t1, arch: r1, archFromUname: n1 })=>(ie(`Don't know any platform-specific paths for \"${t1}\" on ${r1} (${n1})`), []));\n}\nasync function Mu(e1) {\n    let t1 = 'grep -v \"libssl.so.0\"', r1 = await Lo(e1);\n    if (r1) {\n        ie(`Found libssl.so file using platform-specific paths: ${r1}`);\n        let o1 = No(r1);\n        if (ie(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ie('Falling back to \"ldconfig\" and other generic paths');\n    let n1 = await Ir(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${t1}`);\n    if (n1 || (n1 = await Lo([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\"\n    ])), n1) {\n        ie(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n1}`);\n        let o1 = No(n1);\n        if (ie(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i1 = await Ir(\"openssl version -v\");\n    if (i1) {\n        ie(`Found openssl binary with version: ${i1}`);\n        let o1 = Cu(i1);\n        if (ie(`The parsed openssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ie(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Lo(e1) {\n    for (let t1 of e1){\n        let r1 = await Ru(t1);\n        if (r1) return r1;\n    }\n}\nasync function Ru(e1) {\n    try {\n        return (await Gn.default.readdir(e1)).find((r1)=>r1.startsWith(\"libssl.so.\") && !r1.startsWith(\"libssl.so.0\"));\n    } catch (t1) {\n        if (t1.code === \"ENOENT\") return;\n        throw t1;\n    }\n}\nasync function ut() {\n    let { binaryTarget: e1 } = await Bo();\n    return e1;\n}\nfunction Su(e1) {\n    return e1.binaryTarget !== void 0;\n}\nasync function Jn() {\n    let { memoized: e1, ...t1 } = await Bo();\n    return t1;\n}\nvar Rr = {};\nasync function Bo() {\n    if (Su(Rr)) return Promise.resolve({\n        ...Rr,\n        memoized: !0\n    });\n    let e1 = await Vo(), t1 = Iu(e1);\n    return Rr = {\n        ...e1,\n        binaryTarget: t1\n    }, {\n        ...Rr,\n        memoized: !1\n    };\n}\nfunction Iu(e1) {\n    let { platform: t1, arch: r1, archFromUname: n1, libssl: i1, targetDistro: o1, familyDistro: s1, originalDistro: a1 } = e1;\n    t1 === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(r1) && Ot(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures. If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n1}\".`);\n    let l1 = \"1.1.x\";\n    if (t1 === \"linux\" && i1 === void 0) {\n        let c1 = st({\n            familyDistro: s1\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Ot(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l1}\".\n${c1}`);\n    }\n    let u1 = \"debian\";\n    if (t1 === \"linux\" && o1 === void 0 && Ot(`Prisma doesn't know which engines to download for the Linux distro \"${a1}\". Falling back to Prisma engines built \"${u1}\".\nPlease report your experience by creating an issue at ${Dt(\"https://github.com/prisma/prisma/issues\")} so we can add your distro to the list of known supported distros.`), t1 === \"darwin\" && r1 === \"arm64\") return \"darwin-arm64\";\n    if (t1 === \"darwin\") return \"darwin\";\n    if (t1 === \"win32\") return \"windows\";\n    if (t1 === \"freebsd\") return o1;\n    if (t1 === \"openbsd\") return \"openbsd\";\n    if (t1 === \"netbsd\") return \"netbsd\";\n    if (t1 === \"linux\" && o1 === \"nixos\") return \"linux-nixos\";\n    if (t1 === \"linux\" && r1 === \"arm64\") return `${o1 === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i1 || l1}`;\n    if (t1 === \"linux\" && r1 === \"arm\") return `linux-arm-openssl-${i1 || l1}`;\n    if (t1 === \"linux\" && o1 === \"musl\") {\n        let c1 = \"linux-musl\";\n        return !i1 || Uo(i1) ? c1 : `${c1}-openssl-${i1}`;\n    }\n    return t1 === \"linux\" && o1 && i1 ? `${o1}-openssl-${i1}` : (t1 !== \"linux\" && Ot(`Prisma detected unknown OS \"${t1}\" and may not work as expected. Defaulting to \"linux\".`), i1 ? `${u1}-openssl-${i1}` : o1 ? `${o1}-openssl-${l1}` : `${u1}-openssl-${l1}`);\n}\nasync function ku(e1) {\n    try {\n        return await e1();\n    } catch  {\n        return;\n    }\n}\nfunction Ir(e1) {\n    return ku(async ()=>{\n        let t1 = await wu(e1);\n        return ie(`Command \"${e1}\" successfully returned \"${t1.stdout}\"`), t1.stdout;\n    });\n}\nasync function Fu() {\n    return typeof Sr.default.machine == \"function\" ? Sr.default.machine() : (await Ir(\"uname -m\"))?.trim();\n}\nfunction Uo(e1) {\n    return e1.startsWith(\"1.\");\n}\nvar Hn = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Yn = S(Go()), Dr = S(__webpack_require__(/*! fs */ \"fs\"));\nvar ct = S(__webpack_require__(/*! path */ \"path\"));\nfunction Jo(e1) {\n    let t1 = e1.ignoreProcessEnv ? {} : process.env, r1 = (n1)=>n1.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o1, s1) {\n            let a1 = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s1);\n            if (!a1) return o1;\n            let l1 = a1[1], u1, c1;\n            if (l1 === \"\\\\\") c1 = a1[0], u1 = c1.replace(\"\\\\$\", \"$\");\n            else {\n                let p1 = a1[2];\n                c1 = a1[0].substring(l1.length), u1 = Object.hasOwnProperty.call(t1, p1) ? t1[p1] : e1.parsed[p1] || \"\", u1 = r1(u1);\n            }\n            return o1.replace(c1, u1);\n        }, n1) ?? n1;\n    for(let n1 in e1.parsed){\n        let i1 = Object.hasOwnProperty.call(t1, n1) ? t1[n1] : e1.parsed[n1];\n        e1.parsed[n1] = r1(i1);\n    }\n    for(let n1 in e1.parsed)t1[n1] = e1.parsed[n1];\n    return e1;\n}\nvar zn = O(\"prisma:tryLoadEnv\");\nfunction _t({ rootEnvPath: e1, schemaEnvPath: t1 }, r1 = {\n    conflictCheck: \"none\"\n}) {\n    let n1 = Ho(e1);\n    r1.conflictCheck !== \"none\" && Bu(n1, t1, r1.conflictCheck);\n    let i1 = null;\n    return Wo(n1?.path, t1) || (i1 = Ho(t1)), !n1 && !i1 && zn(\"No Environment variables loaded\"), i1?.dotenvResult.error ? console.error(me(ne(\"Schema Env Error: \")) + i1.dotenvResult.error) : {\n        message: [\n            n1?.message,\n            i1?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n1?.dotenvResult?.parsed,\n            ...i1?.dotenvResult?.parsed\n        }\n    };\n}\nfunction Bu(e1, t1, r1) {\n    let n1 = e1?.dotenvResult.parsed, i1 = !Wo(e1?.path, t1);\n    if (n1 && t1 && i1 && Dr.default.existsSync(t1)) {\n        let o1 = Yn.default.parse(Dr.default.readFileSync(t1)), s1 = [];\n        for(let a1 in o1)n1[a1] === o1[a1] && s1.push(a1);\n        if (s1.length > 0) {\n            let a1 = ct.default.relative(process.cwd(), e1.path), l1 = ct.default.relative(process.cwd(), t1);\n            if (r1 === \"error\") {\n                let u1 = `There is a conflict between env var${s1.length > 1 ? \"s\" : \"\"} in ${te(a1)} and ${te(l1)}\nConflicting env vars:\n${s1.map((c1)=>`  ${ne(c1)}`).join(`\n`)}\n\nWe suggest to move the contents of ${te(l1)} to ${te(a1)} to consolidate your env vars.\n`;\n                throw new Error(u1);\n            } else if (r1 === \"warn\") {\n                let u1 = `Conflict for env var${s1.length > 1 ? \"s\" : \"\"} ${s1.map((c1)=>ne(c1)).join(\", \")} in ${te(a1)} and ${te(l1)}\nEnv vars from ${te(l1)} overwrite the ones from ${te(a1)}\n      `;\n                console.warn(`${he(\"warn(prisma)\")} ${u1}`);\n            }\n        }\n    }\n}\nfunction Ho(e1) {\n    return Uu(e1) ? (zn(`Environment variables loaded from ${e1}`), {\n        dotenvResult: Jo(Yn.default.config({\n            path: e1,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        })),\n        message: Fe(`Environment variables loaded from ${ct.default.relative(process.cwd(), e1)}`),\n        path: e1\n    }) : (zn(`Environment variables not found at ${e1}`), null);\n}\nfunction Wo(e1, t1) {\n    return e1 && t1 && ct.default.resolve(e1) === ct.default.resolve(t1);\n}\nfunction Uu(e1) {\n    return !!(e1 && Dr.default.existsSync(e1));\n}\nvar zo = \"library\";\nfunction Zn(e1) {\n    let t1 = Ku();\n    return t1 || (e1?.config.engineType === \"library\" ? \"library\" : e1?.config.engineType === \"binary\" ? \"binary\" : zo);\n}\nfunction Ku() {\n    let e1 = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e1 === \"library\" ? \"library\" : e1 === \"binary\" ? \"binary\" : void 0;\n}\nvar Ju = S(Xn());\nvar N = S(__webpack_require__(/*! path */ \"path\")), Hu = S(Xn()), Of = O(\"prisma:engines\");\nfunction rs() {\n    return N.default.join(__dirname, \"../\");\n}\nvar _f = \"libquery-engine\";\nN.default.join(__dirname, \"../query-engine-darwin\");\nN.default.join(__dirname, \"../query-engine-darwin-arm64\");\nN.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nN.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nN.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nN.default.join(__dirname, \"../query-engine-linux-static-x64\");\nN.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nN.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nN.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nN.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nN.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nN.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nN.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nN.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nN.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nN.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar ei = S(__webpack_require__(/*! fs */ \"fs\")), ns = O(\"chmodPlusX\");\nfunction ti(e1) {\n    if (process.platform === \"win32\") return;\n    let t1 = ei.default.statSync(e1), r1 = t1.mode | 64 | 8 | 1;\n    if (t1.mode === r1) {\n        ns(`Execution permissions of ${e1} are fine`);\n        return;\n    }\n    let n1 = r1.toString(8).slice(-3);\n    ns(`Have to call chmodPlusX on ${e1}`), ei.default.chmodSync(e1, n1);\n}\nfunction ri(e1) {\n    let t1 = e1.e, r1 = (a1)=>`Prisma cannot find the required \\`${a1}\\` system library in your system`, n1 = t1.message.includes(\"cannot open shared object file\"), i1 = `Please refer to the documentation about Prisma's system requirements: ${Dt(\"https://pris.ly/d/system-requirements\")}`, o1 = `Unable to require(\\`${Fe(e1.id)}\\`).`, s1 = st({\n        message: t1.message,\n        code: t1.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a1 })=>n1 && a1.includes(\"libz\"), ()=>`${r1(\"libz\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libgcc_s\"), ()=>`${r1(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libssl\"), ()=>{\n        let a1 = e1.platformInfo.libssl ? `openssl-${e1.platformInfo.libssl}` : \"openssl\";\n        return `${r1(\"libssl\")}. Please install ${a1} and try again.`;\n    }).when(({ message: a1 })=>a1.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i1}`).when(({ message: a1 })=>e1.platformInfo.platform === \"linux\" && a1.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e1.platformInfo.originalDistro} on (${e1.platformInfo.archFromUname}) which uses the \\`${e1.platformInfo.binaryTarget}\\` binaryTarget by default. ${i1}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i1}`);\n    return `${o1}\n${s1}\n\nDetails: ${t1.message}`;\n}\nvar Nt = S(__webpack_require__(/*! path */ \"path\"));\nfunction ni(e1) {\n    return Nt.default.sep === Nt.default.posix.sep ? e1 : e1.split(Nt.default.sep).join(Nt.default.posix.sep);\n}\nvar os = S(ii());\nfunction si(e1) {\n    return String(new oi(e1));\n}\nvar oi = class {\n    constructor(t1){\n        this.config = t1;\n    }\n    toString() {\n        let { config: t1 } = this, r1 = t1.provider.fromEnvVar ? `env(\"${t1.provider.fromEnvVar}\")` : t1.provider.value, n1 = JSON.parse(JSON.stringify({\n            provider: r1,\n            binaryTargets: Wu(t1.binaryTargets)\n        }));\n        return `generator ${t1.name} {\n${(0, os.default)(zu(n1), 2)}\n}`;\n    }\n};\nfunction Wu(e1) {\n    let t1;\n    if (e1.length > 0) {\n        let r1 = e1.find((n1)=>n1.fromEnvVar !== null);\n        r1 ? t1 = `env(\"${r1.fromEnvVar}\")` : t1 = e1.map((n1)=>n1.native ? \"native\" : n1.value);\n    } else t1 = void 0;\n    return t1;\n}\nfunction zu(e1) {\n    let t1 = Object.keys(e1).reduce((r1, n1)=>Math.max(r1, n1.length), 0);\n    return Object.entries(e1).map(([r1, n1])=>`${r1.padEnd(t1)} = ${Yu(n1)}`).join(`\n`);\n}\nfunction Yu(e1) {\n    return JSON.parse(JSON.stringify(e1, (t1, r1)=>Array.isArray(r1) ? `[${r1.map((n1)=>JSON.stringify(n1)).join(\", \")}]` : JSON.stringify(r1)));\n}\nvar $t = {};\nSt($t, {\n    error: ()=>ec,\n    info: ()=>Xu,\n    log: ()=>Zu,\n    query: ()=>tc,\n    should: ()=>ss,\n    tags: ()=>Lt,\n    warn: ()=>ai\n});\nvar Lt = {\n    error: me(\"prisma:error\"),\n    warn: he(\"prisma:warn\"),\n    info: De(\"prisma:info\"),\n    query: ot(\"prisma:query\")\n}, ss = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Zu(...e1) {\n    console.log(...e1);\n}\nfunction ai(e1, ...t1) {\n    ss.warn() && console.warn(`${Lt.warn} ${e1}`, ...t1);\n}\nfunction Xu(e1, ...t1) {\n    console.info(`${Lt.info} ${e1}`, ...t1);\n}\nfunction ec(e1, ...t1) {\n    console.error(`${Lt.error} ${e1}`, ...t1);\n}\nfunction tc(e1, ...t1) {\n    console.log(`${Lt.query} ${e1}`, ...t1);\n}\nfunction _r(e1, t1) {\n    if (!e1) throw new Error(`${t1}. This should never happen. If you see this error, please, open an issue at https://github.com/prisma/prisma/issues/new?assignees=&labels=kind%2Fbug&projects=&template=bug_report.yml`);\n}\nfunction He(e1, t1) {\n    throw new Error(t1);\n}\nfunction ui(e1, t1) {\n    return Object.prototype.hasOwnProperty.call(e1, t1);\n}\nvar ci = (e1, t1)=>e1.reduce((r1, n1)=>(r1[t1(n1)] = n1, r1), {});\nfunction pt(e1, t1) {\n    let r1 = {};\n    for (let n1 of Object.keys(e1))r1[n1] = t1(e1[n1], n1);\n    return r1;\n}\nfunction pi(e1, t1) {\n    if (e1.length === 0) return;\n    let r1 = e1[0];\n    for(let n1 = 1; n1 < e1.length; n1++)t1(r1, e1[n1]) < 0 && (r1 = e1[n1]);\n    return r1;\n}\nfunction E(e1, t1) {\n    Object.defineProperty(e1, \"name\", {\n        value: t1,\n        configurable: !0\n    });\n}\nvar ps = new Set, qt = (e1, t1, ...r1)=>{\n    ps.has(e1) || (ps.add(e1), ai(t1, ...r1));\n};\nvar U = class extends Error {\n    constructor(r1, { code: n1, clientVersion: i1, meta: o1, batchRequestIdx: s1 }){\n        super(r1);\n        this.name = \"PrismaClientKnownRequestError\", this.code = n1, this.clientVersion = i1, this.meta = o1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: s1,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nE(U, \"PrismaClientKnownRequestError\");\nvar Me = class extends U {\n    constructor(t1, r1){\n        super(t1, {\n            code: \"P2025\",\n            clientVersion: r1\n        }), this.name = \"NotFoundError\";\n    }\n};\nE(Me, \"NotFoundError\");\nvar F = class e extends Error {\n    constructor(r1, n1, i1){\n        super(r1);\n        this.name = \"PrismaClientInitializationError\", this.clientVersion = n1, this.errorCode = i1, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nE(F, \"PrismaClientInitializationError\");\nvar ue = class extends Error {\n    constructor(r1, n1){\n        super(r1);\n        this.name = \"PrismaClientRustPanicError\", this.clientVersion = n1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nE(ue, \"PrismaClientRustPanicError\");\nvar K = class extends Error {\n    constructor(r1, { clientVersion: n1, batchRequestIdx: i1 }){\n        super(r1);\n        this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = n1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: i1,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nE(K, \"PrismaClientUnknownRequestError\");\nvar X = class extends Error {\n    constructor(r1, { clientVersion: n1 }){\n        super(r1);\n        this.name = \"PrismaClientValidationError\";\n        this.clientVersion = n1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nE(X, \"PrismaClientValidationError\");\nvar dt = class {\n    constructor(t1){\n        this._engine = t1;\n    }\n    prometheus(t1) {\n        return this._engine.metrics({\n            format: \"prometheus\",\n            ...t1\n        });\n    }\n    json(t1) {\n        return this._engine.metrics({\n            format: \"json\",\n            ...t1\n        });\n    }\n};\nfunction Vt(e1) {\n    let t1;\n    return {\n        get () {\n            return t1 || (t1 = {\n                value: e1()\n            }), t1.value;\n        }\n    };\n}\nfunction ms(e1, t1) {\n    let r1 = Vt(()=>nc(t1));\n    Object.defineProperty(e1, \"dmmf\", {\n        get: ()=>r1.get()\n    });\n}\nfunction nc(e1) {\n    return {\n        datamodel: {\n            models: di(e1.models),\n            enums: di(e1.enums),\n            types: di(e1.types)\n        }\n    };\n}\nfunction di(e1) {\n    return Object.entries(e1).map(([t1, r1])=>({\n            name: t1,\n            ...r1\n        }));\n}\nvar ic = [\n    \"JsonNullValueInput\",\n    \"NullableJsonNullValueInput\",\n    \"JsonNullValueFilter\"\n], Lr = Symbol(), mi = new WeakMap, xe = class {\n    constructor(t1){\n        t1 === Lr ? mi.set(this, `Prisma.${this._getName()}`) : mi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return mi.get(this);\n    }\n}, jt = class extends xe {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, Bt = class extends jt {\n};\nfi(Bt, \"DbNull\");\nvar Ut = class extends jt {\n};\nfi(Ut, \"JsonNull\");\nvar Kt = class extends jt {\n};\nfi(Kt, \"AnyNull\");\nvar $r = {\n    classes: {\n        DbNull: Bt,\n        JsonNull: Ut,\n        AnyNull: Kt\n    },\n    instances: {\n        DbNull: new Bt(Lr),\n        JsonNull: new Ut(Lr),\n        AnyNull: new Kt(Lr)\n    }\n};\nfunction fi(e1, t1) {\n    Object.defineProperty(e1, \"name\", {\n        value: t1,\n        configurable: !0\n    });\n}\nvar lc = S(Ln(), 1);\nfunction qr(e1) {\n    return {\n        ok: !1,\n        error: e1,\n        map () {\n            return qr(e1);\n        },\n        flatMap () {\n            return qr(e1);\n        }\n    };\n}\nvar oc = class {\n    constructor(){\n        eo(this, \"registeredErrors\", []);\n    }\n    consumeError(e1) {\n        return this.registeredErrors[e1];\n    }\n    registerNewError(e1) {\n        let t1 = 0;\n        for(; this.registeredErrors[t1] !== void 0;)t1++;\n        return this.registeredErrors[t1] = {\n            error: e1\n        }, t1;\n    }\n}, fs = (e1)=>{\n    let t1 = new oc, r1 = Oe(t1, e1.startTransaction.bind(e1));\n    return {\n        errorRegistry: t1,\n        queryRaw: Oe(t1, e1.queryRaw.bind(e1)),\n        executeRaw: Oe(t1, e1.executeRaw.bind(e1)),\n        flavour: e1.flavour,\n        startTransaction: async (...n1)=>(await r1(...n1)).map((o1)=>sc(t1, o1)),\n        close: Oe(t1, e1.close.bind(e1))\n    };\n}, sc = (e1, t1)=>({\n        flavour: t1.flavour,\n        options: t1.options,\n        queryRaw: Oe(e1, t1.queryRaw.bind(t1)),\n        executeRaw: Oe(e1, t1.executeRaw.bind(t1)),\n        commit: Oe(e1, t1.commit.bind(t1)),\n        rollback: Oe(e1, t1.rollback.bind(t1)),\n        dispose: ac(e1, t1.dispose.bind(t1))\n    });\nfunction Oe(e1, t1) {\n    return async (...r1)=>{\n        try {\n            return await t1(...r1);\n        } catch (n1) {\n            let i1 = e1.registerNewError(n1);\n            return qr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nfunction ac(e1, t1) {\n    return (...r1)=>{\n        try {\n            return t1(...r1);\n        } catch (n1) {\n            let i1 = e1.registerNewError(n1);\n            return qr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nvar kl = __webpack_require__(/*! async_hooks */ \"async_hooks\"), Fl = __webpack_require__(/*! events */ \"events\"), Dl = S(__webpack_require__(/*! fs */ \"fs\")), yr = S(__webpack_require__(/*! path */ \"path\"));\nvar oe = class e {\n    constructor(t1, r1){\n        if (t1.length - 1 !== r1.length) throw t1.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${t1.length} strings to have ${t1.length - 1} values`);\n        let n1 = r1.reduce((s1, a1)=>s1 + (a1 instanceof e ? a1.values.length : 1), 0);\n        this.values = new Array(n1), this.strings = new Array(n1 + 1), this.strings[0] = t1[0];\n        let i1 = 0, o1 = 0;\n        for(; i1 < r1.length;){\n            let s1 = r1[i1++], a1 = t1[i1];\n            if (s1 instanceof e) {\n                this.strings[o1] += s1.strings[0];\n                let l1 = 0;\n                for(; l1 < s1.values.length;)this.values[o1++] = s1.values[l1++], this.strings[o1] = s1.strings[l1];\n                this.strings[o1] += a1;\n            } else this.values[o1++] = s1, this.strings[o1] = a1;\n        }\n    }\n    get text() {\n        let t1 = 1, r1 = this.strings[0];\n        for(; t1 < this.strings.length;)r1 += `$${t1}${this.strings[t1++]}`;\n        return r1;\n    }\n    get sql() {\n        let t1 = 1, r1 = this.strings[0];\n        for(; t1 < this.strings.length;)r1 += `?${this.strings[t1++]}`;\n        return r1;\n    }\n    inspect() {\n        return {\n            text: this.text,\n            sql: this.sql,\n            values: this.values\n        };\n    }\n};\nfunction gs(e1, t1 = \",\", r1 = \"\", n1 = \"\") {\n    if (e1.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        r1,\n        ...Array(e1.length - 1).fill(t1),\n        n1\n    ], e1);\n}\nfunction gi(e1) {\n    return new oe([\n        e1\n    ], []);\n}\nvar ys = gi(\"\");\nfunction yi(e1, ...t1) {\n    return new oe(e1, t1);\n}\nfunction Qt(e1) {\n    return {\n        getKeys () {\n            return Object.keys(e1);\n        },\n        getPropertyValue (t1) {\n            return e1[t1];\n        }\n    };\n}\nfunction re(e1, t1) {\n    return {\n        getKeys () {\n            return [\n                e1\n            ];\n        },\n        getPropertyValue () {\n            return t1();\n        }\n    };\n}\nvar be = class {\n    constructor(){\n        this._map = new Map;\n    }\n    get(t1) {\n        return this._map.get(t1)?.value;\n    }\n    set(t1, r1) {\n        this._map.set(t1, {\n            value: r1\n        });\n    }\n    getOrCreate(t1, r1) {\n        let n1 = this._map.get(t1);\n        if (n1) return n1.value;\n        let i1 = r1();\n        return this.set(t1, i1), i1;\n    }\n};\nfunction We(e1) {\n    let t1 = new be;\n    return {\n        getKeys () {\n            return e1.getKeys();\n        },\n        getPropertyValue (r1) {\n            return t1.getOrCreate(r1, ()=>e1.getPropertyValue(r1));\n        },\n        getPropertyDescriptor (r1) {\n            return e1.getPropertyDescriptor?.(r1);\n        }\n    };\n}\nvar bs = __webpack_require__(/*! util */ \"util\");\nvar Vr = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction jr(e1) {\n    let t1 = new Set(e1);\n    return {\n        getOwnPropertyDescriptor: ()=>Vr,\n        has: (r1, n1)=>t1.has(n1),\n        set: (r1, n1, i1)=>t1.add(n1) && Reflect.set(r1, n1, i1),\n        ownKeys: ()=>[\n                ...t1\n            ]\n    };\n}\nvar hs = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction Ee(e1, t1) {\n    let r1 = uc(t1), n1 = new Set, i1 = new Proxy(e1, {\n        get (o1, s1) {\n            if (n1.has(s1)) return o1[s1];\n            let a1 = r1.get(s1);\n            return a1 ? a1.getPropertyValue(s1) : o1[s1];\n        },\n        has (o1, s1) {\n            if (n1.has(s1)) return !0;\n            let a1 = r1.get(s1);\n            return a1 ? a1.has?.(s1) ?? !0 : Reflect.has(o1, s1);\n        },\n        ownKeys (o1) {\n            let s1 = xs(Reflect.ownKeys(o1), r1), a1 = xs(Array.from(r1.keys()), r1);\n            return [\n                ...new Set([\n                    ...s1,\n                    ...a1,\n                    ...n1\n                ])\n            ];\n        },\n        set (o1, s1, a1) {\n            return r1.get(s1)?.getPropertyDescriptor?.(s1)?.writable === !1 ? !1 : (n1.add(s1), Reflect.set(o1, s1, a1));\n        },\n        getOwnPropertyDescriptor (o1, s1) {\n            let a1 = Reflect.getOwnPropertyDescriptor(o1, s1);\n            if (a1 && !a1.configurable) return a1;\n            let l1 = r1.get(s1);\n            return l1 ? l1.getPropertyDescriptor ? {\n                ...Vr,\n                ...l1?.getPropertyDescriptor(s1)\n            } : Vr : a1;\n        },\n        defineProperty (o1, s1, a1) {\n            return n1.add(s1), Reflect.defineProperty(o1, s1, a1);\n        }\n    });\n    return i1[hs] = function(o1, s1, a1 = bs.inspect) {\n        let l1 = {\n            ...this\n        };\n        return delete l1[hs], a1(l1, s1);\n    }, i1;\n}\nfunction uc(e1) {\n    let t1 = new Map;\n    for (let r1 of e1){\n        let n1 = r1.getKeys();\n        for (let i1 of n1)t1.set(i1, r1);\n    }\n    return t1;\n}\nfunction xs(e1, t1) {\n    return e1.filter((r1)=>t1.get(r1)?.has?.(r1) ?? !0);\n}\nfunction Gt(e1) {\n    return {\n        getKeys () {\n            return e1;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nvar mt = class {\n    constructor(t1 = 0, r1){\n        this.context = r1;\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.currentIndent = t1;\n    }\n    write(t1) {\n        return typeof t1 == \"string\" ? this.currentLine += t1 : t1.write(this), this;\n    }\n    writeJoined(t1, r1) {\n        let n1 = r1.length - 1;\n        for(let i1 = 0; i1 < r1.length; i1++)this.write(r1[i1]), i1 !== n1 && this.write(t1);\n        return this;\n    }\n    writeLine(t1) {\n        return this.write(t1).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let t1 = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, t1?.(), this;\n    }\n    withIndent(t1) {\n        return this.indent(), t1(this), this.unindent(), this;\n    }\n    afterNextNewline(t1) {\n        return this.afterNextNewLineCallback = t1, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(t1) {\n        return this.marginSymbol = t1, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let t1 = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + t1.slice(1) : t1;\n    }\n};\nfunction ft(e1) {\n    return e1 instanceof Date || Object.prototype.toString.call(e1) === \"[object Date]\";\n}\nfunction Br(e1) {\n    return e1.toString() !== \"Invalid Date\";\n}\nvar gt = 9e15, $e = 1e9, hi = \"0123456789abcdef\", Kr = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", Qr = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", xi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -gt,\n    maxE: gt,\n    crypto: !1\n}, vs, Re, w = !0, Jr = \"[DecimalError] \", Le = Jr + \"Invalid argument: \", Ts = Jr + \"Precision limit exceeded\", Cs = Jr + \"crypto unavailable\", As = \"[object Decimal]\", ee = Math.floor, j = Math.pow, cc = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, pc = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, dc = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Ms = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, ge = 1e7, b = 7, mc = 9007199254740991, fc = Kr.length - 1, bi = Qr.length - 1, m = {\n    toStringTag: As\n};\nm.absoluteValue = m.abs = function() {\n    var e1 = new this.constructor(this);\n    return e1.s < 0 && (e1.s = 1), h(e1);\n};\nm.ceil = function() {\n    return h(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    if (e1 = new i1(e1), t1 = new i1(t1), !e1.s || !t1.s) return new i1(NaN);\n    if (e1.gt(t1)) throw Error(Le + t1);\n    return r1 = n1.cmp(e1), r1 < 0 ? e1 : n1.cmp(t1) > 0 ? t1 : new i1(n1);\n};\nm.comparedTo = m.cmp = function(e1) {\n    var t1, r1, n1, i1, o1 = this, s1 = o1.d, a1 = (e1 = new o1.constructor(e1)).d, l1 = o1.s, u1 = e1.s;\n    if (!s1 || !a1) return !l1 || !u1 ? NaN : l1 !== u1 ? l1 : s1 === a1 ? 0 : !s1 ^ l1 < 0 ? 1 : -1;\n    if (!s1[0] || !a1[0]) return s1[0] ? l1 : a1[0] ? -u1 : 0;\n    if (l1 !== u1) return l1;\n    if (o1.e !== e1.e) return o1.e > e1.e ^ l1 < 0 ? 1 : -1;\n    for(n1 = s1.length, i1 = a1.length, t1 = 0, r1 = n1 < i1 ? n1 : i1; t1 < r1; ++t1)if (s1[t1] !== a1[t1]) return s1[t1] > a1[t1] ^ l1 < 0 ? 1 : -1;\n    return n1 === i1 ? 0 : n1 > i1 ^ l1 < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.d ? r1.d[0] ? (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(r1.e, r1.sd()) + b, n1.rounding = 1, r1 = gc(n1, Fs(n1, r1)), n1.precision = e1, n1.rounding = t1, h(Re == 2 || Re == 3 ? r1.neg() : r1, e1, t1, !0)) : new n1(1) : new n1(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e1, t1, r1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor;\n    if (!c1.isFinite() || c1.isZero()) return new p1(c1);\n    for(w = !1, o1 = c1.s * j(c1.s * c1, 1 / 3), !o1 || Math.abs(o1) == 1 / 0 ? (r1 = W(c1.d), e1 = c1.e, (o1 = (e1 - r1.length + 1) % 3) && (r1 += o1 == 1 || o1 == -2 ? \"0\" : \"00\"), o1 = j(r1, 1 / 3), e1 = ee((e1 + 1) / 3) - (e1 % 3 == (e1 < 0 ? -1 : 2)), o1 == 1 / 0 ? r1 = \"5e\" + e1 : (r1 = o1.toExponential(), r1 = r1.slice(0, r1.indexOf(\"e\") + 1) + e1), n1 = new p1(r1), n1.s = c1.s) : n1 = new p1(o1.toString()), s1 = (e1 = p1.precision) + 3;;)if (a1 = n1, l1 = a1.times(a1).times(a1), u1 = l1.plus(c1), n1 = D(u1.plus(c1).times(a1), u1.plus(l1), s1 + 2, 1), W(a1.d).slice(0, s1) === (r1 = W(n1.d)).slice(0, s1)) if (r1 = r1.slice(s1 - 3, s1 + 1), r1 == \"9999\" || !i1 && r1 == \"4999\") {\n        if (!i1 && (h(a1, e1 + 1, 0), a1.times(a1).times(a1).eq(c1))) {\n            n1 = a1;\n            break;\n        }\n        s1 += 4, i1 = 1;\n    } else {\n        (!+r1 || !+r1.slice(1) && r1.charAt(0) == \"5\") && (h(n1, e1 + 1, 1), t1 = !n1.times(n1).times(n1).eq(c1));\n        break;\n    }\n    return w = !0, h(n1, e1, p1.rounding, t1);\n};\nm.decimalPlaces = m.dp = function() {\n    var e1, t1 = this.d, r1 = NaN;\n    if (t1) {\n        if (e1 = t1.length - 1, r1 = (e1 - ee(this.e / b)) * b, e1 = t1[e1], e1) for(; e1 % 10 == 0; e1 /= 10)r1--;\n        r1 < 0 && (r1 = 0);\n    }\n    return r1;\n};\nm.dividedBy = m.div = function(e1) {\n    return D(this, new this.constructor(e1));\n};\nm.dividedToIntegerBy = m.divToInt = function(e1) {\n    var t1 = this, r1 = t1.constructor;\n    return h(D(t1, new r1(e1), 0, 1, 1), r1.precision, r1.rounding);\n};\nm.equals = m.eq = function(e1) {\n    return this.cmp(e1) === 0;\n};\nm.floor = function() {\n    return h(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e1) {\n    return this.cmp(e1) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e1) {\n    var t1 = this.cmp(e1);\n    return t1 == 1 || t1 === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e1, t1, r1, n1, i1, o1 = this, s1 = o1.constructor, a1 = new s1(1);\n    if (!o1.isFinite()) return new s1(o1.s ? 1 / 0 : NaN);\n    if (o1.isZero()) return a1;\n    r1 = s1.precision, n1 = s1.rounding, s1.precision = r1 + Math.max(o1.e, o1.sd()) + 4, s1.rounding = 1, i1 = o1.d.length, i1 < 32 ? (e1 = Math.ceil(i1 / 3), t1 = (1 / Wr(4, e1)).toString()) : (e1 = 16, t1 = \"2.3283064365386962890625e-10\"), o1 = yt(s1, 1, o1.times(t1), new s1(1), !0);\n    for(var l1, u1 = e1, c1 = new s1(8); u1--;)l1 = o1.times(o1), o1 = a1.minus(l1.times(c1.minus(l1.times(c1))));\n    return h(o1, s1.precision = r1, s1.rounding = n1, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    if (!i1.isFinite() || i1.isZero()) return new o1(i1);\n    if (t1 = o1.precision, r1 = o1.rounding, o1.precision = t1 + Math.max(i1.e, i1.sd()) + 4, o1.rounding = 1, n1 = i1.d.length, n1 < 3) i1 = yt(o1, 2, i1, i1, !0);\n    else {\n        e1 = 1.4 * Math.sqrt(n1), e1 = e1 > 16 ? 16 : e1 | 0, i1 = i1.times(1 / Wr(5, e1)), i1 = yt(o1, 2, i1, i1, !0);\n        for(var s1, a1 = new o1(5), l1 = new o1(16), u1 = new o1(20); e1--;)s1 = i1.times(i1), i1 = i1.times(a1.plus(s1.times(l1.times(s1).plus(u1))));\n    }\n    return o1.precision = t1, o1.rounding = r1, h(i1, t1, r1, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 7, n1.rounding = 1, D(r1.sinh(), r1.cosh(), n1.precision = e1, n1.rounding = t1)) : new n1(r1.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e1, t1 = this, r1 = t1.constructor, n1 = t1.abs().cmp(1), i1 = r1.precision, o1 = r1.rounding;\n    return n1 !== -1 ? n1 === 0 ? t1.isNeg() ? fe(r1, i1, o1) : new r1(0) : new r1(NaN) : t1.isZero() ? fe(r1, i1 + 4, o1).times(.5) : (r1.precision = i1 + 6, r1.rounding = 1, t1 = t1.asin(), e1 = fe(r1, i1 + 4, o1).times(.5), r1.precision = i1, r1.rounding = o1, e1.minus(t1));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.lte(1) ? new n1(r1.eq(1) ? 0 : NaN) : r1.isFinite() ? (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(Math.abs(r1.e), r1.sd()) + 4, n1.rounding = 1, w = !1, r1 = r1.times(r1).minus(1).sqrt().plus(r1), w = !0, n1.precision = e1, n1.rounding = t1, r1.ln()) : new n1(r1);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return !r1.isFinite() || r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 2 * Math.max(Math.abs(r1.e), r1.sd()) + 6, n1.rounding = 1, w = !1, r1 = r1.times(r1).plus(1).sqrt().plus(r1), w = !0, n1.precision = e1, n1.rounding = t1, r1.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isFinite() ? i1.e >= 0 ? new o1(i1.abs().eq(1) ? i1.s / 0 : i1.isZero() ? i1 : NaN) : (e1 = o1.precision, t1 = o1.rounding, n1 = i1.sd(), Math.max(n1, e1) < 2 * -i1.e - 1 ? h(new o1(i1), e1, t1, !0) : (o1.precision = r1 = n1 - i1.e, i1 = D(i1.plus(1), new o1(1).minus(i1), r1 + e1, 1), o1.precision = e1 + 4, o1.rounding = 1, i1 = i1.ln(), o1.precision = e1, o1.rounding = t1, i1.times(.5))) : new o1(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isZero() ? new o1(i1) : (t1 = i1.abs().cmp(1), r1 = o1.precision, n1 = o1.rounding, t1 !== -1 ? t1 === 0 ? (e1 = fe(o1, r1 + 4, n1).times(.5), e1.s = i1.s, e1) : new o1(NaN) : (o1.precision = r1 + 6, o1.rounding = 1, i1 = i1.div(new o1(1).minus(i1.times(i1)).sqrt().plus(1)).atan(), o1.precision = r1, o1.rounding = n1, i1.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e1, t1, r1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding;\n    if (u1.isFinite()) {\n        if (u1.isZero()) return new c1(u1);\n        if (u1.abs().eq(1) && p1 + 4 <= bi) return s1 = fe(c1, p1 + 4, d1).times(.25), s1.s = u1.s, s1;\n    } else {\n        if (!u1.s) return new c1(NaN);\n        if (p1 + 4 <= bi) return s1 = fe(c1, p1 + 4, d1).times(.5), s1.s = u1.s, s1;\n    }\n    for(c1.precision = a1 = p1 + 10, c1.rounding = 1, r1 = Math.min(28, a1 / b + 2 | 0), e1 = r1; e1; --e1)u1 = u1.div(u1.times(u1).plus(1).sqrt().plus(1));\n    for(w = !1, t1 = Math.ceil(a1 / b), n1 = 1, l1 = u1.times(u1), s1 = new c1(u1), i1 = u1; e1 !== -1;)if (i1 = i1.times(l1), o1 = s1.minus(i1.div(n1 += 2)), i1 = i1.times(l1), s1 = o1.plus(i1.div(n1 += 2)), s1.d[t1] !== void 0) for(e1 = t1; s1.d[e1] === o1.d[e1] && e1--;);\n    return r1 && (s1 = s1.times(2 << r1 - 1)), w = !0, h(s1, c1.precision = p1, c1.rounding = d1, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && ee(this.e / b) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e1) {\n    return this.cmp(e1) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e1) {\n    return this.cmp(e1) < 1;\n};\nm.logarithm = m.log = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding, f1 = 5;\n    if (e1 == null) e1 = new c1(10), t1 = !0;\n    else {\n        if (e1 = new c1(e1), r1 = e1.d, e1.s < 0 || !r1 || !r1[0] || e1.eq(1)) return new c1(NaN);\n        t1 = e1.eq(10);\n    }\n    if (r1 = u1.d, u1.s < 0 || !r1 || !r1[0] || u1.eq(1)) return new c1(r1 && !r1[0] ? -1 / 0 : u1.s != 1 ? NaN : r1 ? 0 : 1 / 0);\n    if (t1) if (r1.length > 1) o1 = !0;\n    else {\n        for(i1 = r1[0]; i1 % 10 === 0;)i1 /= 10;\n        o1 = i1 !== 1;\n    }\n    if (w = !1, a1 = p1 + f1, s1 = Ne(u1, a1), n1 = t1 ? Gr(c1, a1 + 10) : Ne(e1, a1), l1 = D(s1, n1, a1, 1), Jt(l1.d, i1 = p1, d1)) do if (a1 += 10, s1 = Ne(u1, a1), n1 = t1 ? Gr(c1, a1 + 10) : Ne(e1, a1), l1 = D(s1, n1, a1, 1), !o1) {\n        +W(l1.d).slice(i1 + 1, i1 + 15) + 1 == 1e14 && (l1 = h(l1, p1 + 1, 0));\n        break;\n    }\n    while (Jt(l1.d, i1 += 10, d1));\n    return w = !0, h(l1, p1, d1);\n};\nm.minus = m.sub = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, y1 = f1.constructor;\n    if (e1 = new y1(e1), !f1.d || !e1.d) return !f1.s || !e1.s ? e1 = new y1(NaN) : f1.d ? e1.s = -e1.s : e1 = new y1(e1.d || f1.s !== e1.s ? f1 : NaN), e1;\n    if (f1.s != e1.s) return e1.s = -e1.s, f1.plus(e1);\n    if (u1 = f1.d, d1 = e1.d, a1 = y1.precision, l1 = y1.rounding, !u1[0] || !d1[0]) {\n        if (d1[0]) e1.s = -e1.s;\n        else if (u1[0]) e1 = new y1(f1);\n        else return new y1(l1 === 3 ? -0 : 0);\n        return w ? h(e1, a1, l1) : e1;\n    }\n    if (r1 = ee(e1.e / b), c1 = ee(f1.e / b), u1 = u1.slice(), o1 = c1 - r1, o1) {\n        for(p1 = o1 < 0, p1 ? (t1 = u1, o1 = -o1, s1 = d1.length) : (t1 = d1, r1 = c1, s1 = u1.length), n1 = Math.max(Math.ceil(a1 / b), s1) + 2, o1 > n1 && (o1 = n1, t1.length = 1), t1.reverse(), n1 = o1; n1--;)t1.push(0);\n        t1.reverse();\n    } else {\n        for(n1 = u1.length, s1 = d1.length, p1 = n1 < s1, p1 && (s1 = n1), n1 = 0; n1 < s1; n1++)if (u1[n1] != d1[n1]) {\n            p1 = u1[n1] < d1[n1];\n            break;\n        }\n        o1 = 0;\n    }\n    for(p1 && (t1 = u1, u1 = d1, d1 = t1, e1.s = -e1.s), s1 = u1.length, n1 = d1.length - s1; n1 > 0; --n1)u1[s1++] = 0;\n    for(n1 = d1.length; n1 > o1;){\n        if (u1[--n1] < d1[n1]) {\n            for(i1 = n1; i1 && u1[--i1] === 0;)u1[i1] = ge - 1;\n            --u1[i1], u1[n1] += ge;\n        }\n        u1[n1] -= d1[n1];\n    }\n    for(; u1[--s1] === 0;)u1.pop();\n    for(; u1[0] === 0; u1.shift())--r1;\n    return u1[0] ? (e1.d = u1, e1.e = Hr(u1, r1), w ? h(e1, a1, l1) : e1) : new y1(l1 === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e1) {\n    var t1, r1 = this, n1 = r1.constructor;\n    return e1 = new n1(e1), !r1.d || !e1.s || e1.d && !e1.d[0] ? new n1(NaN) : !e1.d || r1.d && !r1.d[0] ? h(new n1(r1), n1.precision, n1.rounding) : (w = !1, n1.modulo == 9 ? (t1 = D(r1, e1.abs(), 0, 3, 1), t1.s *= e1.s) : t1 = D(r1, e1, 0, n1.modulo, 1), t1 = t1.times(e1), w = !0, r1.minus(t1));\n};\nm.naturalExponential = m.exp = function() {\n    return Ei(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Ne(this);\n};\nm.negated = m.neg = function() {\n    var e1 = new this.constructor(this);\n    return e1.s = -e1.s, h(e1);\n};\nm.plus = m.add = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1 = this, d1 = p1.constructor;\n    if (e1 = new d1(e1), !p1.d || !e1.d) return !p1.s || !e1.s ? e1 = new d1(NaN) : p1.d || (e1 = new d1(e1.d || p1.s === e1.s ? p1 : NaN)), e1;\n    if (p1.s != e1.s) return e1.s = -e1.s, p1.minus(e1);\n    if (u1 = p1.d, c1 = e1.d, a1 = d1.precision, l1 = d1.rounding, !u1[0] || !c1[0]) return c1[0] || (e1 = new d1(p1)), w ? h(e1, a1, l1) : e1;\n    if (o1 = ee(p1.e / b), n1 = ee(e1.e / b), u1 = u1.slice(), i1 = o1 - n1, i1) {\n        for(i1 < 0 ? (r1 = u1, i1 = -i1, s1 = c1.length) : (r1 = c1, n1 = o1, s1 = u1.length), o1 = Math.ceil(a1 / b), s1 = o1 > s1 ? o1 + 1 : s1 + 1, i1 > s1 && (i1 = s1, r1.length = 1), r1.reverse(); i1--;)r1.push(0);\n        r1.reverse();\n    }\n    for(s1 = u1.length, i1 = c1.length, s1 - i1 < 0 && (i1 = s1, r1 = c1, c1 = u1, u1 = r1), t1 = 0; i1;)t1 = (u1[--i1] = u1[i1] + c1[i1] + t1) / ge | 0, u1[i1] %= ge;\n    for(t1 && (u1.unshift(t1), ++n1), s1 = u1.length; u1[--s1] == 0;)u1.pop();\n    return e1.d = u1, e1.e = Hr(u1, n1), w ? h(e1, a1, l1) : e1;\n};\nm.precision = m.sd = function(e1) {\n    var t1, r1 = this;\n    if (e1 !== void 0 && e1 !== !!e1 && e1 !== 1 && e1 !== 0) throw Error(Le + e1);\n    return r1.d ? (t1 = Rs(r1.d), e1 && r1.e + 1 > t1 && (t1 = r1.e + 1)) : t1 = NaN, t1;\n};\nm.round = function() {\n    var e1 = this, t1 = e1.constructor;\n    return h(new t1(e1), e1.e + 1, t1.rounding);\n};\nm.sine = m.sin = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(r1.e, r1.sd()) + b, n1.rounding = 1, r1 = hc(n1, Fs(n1, r1)), n1.precision = e1, n1.rounding = t1, h(Re > 2 ? r1.neg() : r1, e1, t1, !0)) : new n1(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e1, t1, r1, n1, i1, o1, s1 = this, a1 = s1.d, l1 = s1.e, u1 = s1.s, c1 = s1.constructor;\n    if (u1 !== 1 || !a1 || !a1[0]) return new c1(!u1 || u1 < 0 && (!a1 || a1[0]) ? NaN : a1 ? s1 : 1 / 0);\n    for(w = !1, u1 = Math.sqrt(+s1), u1 == 0 || u1 == 1 / 0 ? (t1 = W(a1), (t1.length + l1) % 2 == 0 && (t1 += \"0\"), u1 = Math.sqrt(t1), l1 = ee((l1 + 1) / 2) - (l1 < 0 || l1 % 2), u1 == 1 / 0 ? t1 = \"5e\" + l1 : (t1 = u1.toExponential(), t1 = t1.slice(0, t1.indexOf(\"e\") + 1) + l1), n1 = new c1(t1)) : n1 = new c1(u1.toString()), r1 = (l1 = c1.precision) + 3;;)if (o1 = n1, n1 = o1.plus(D(s1, o1, r1 + 2, 1)).times(.5), W(o1.d).slice(0, r1) === (t1 = W(n1.d)).slice(0, r1)) if (t1 = t1.slice(r1 - 3, r1 + 1), t1 == \"9999\" || !i1 && t1 == \"4999\") {\n        if (!i1 && (h(o1, l1 + 1, 0), o1.times(o1).eq(s1))) {\n            n1 = o1;\n            break;\n        }\n        r1 += 4, i1 = 1;\n    } else {\n        (!+t1 || !+t1.slice(1) && t1.charAt(0) == \"5\") && (h(n1, l1 + 1, 1), e1 = !n1.times(n1).eq(s1));\n        break;\n    }\n    return w = !0, h(n1, l1, c1.rounding, e1);\n};\nm.tangent = m.tan = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 10, n1.rounding = 1, r1 = r1.sin(), r1.s = 1, r1 = D(r1, new n1(1).minus(r1.times(r1)).sqrt(), e1 + 10, 0), n1.precision = e1, n1.rounding = t1, h(Re == 2 || Re == 4 ? r1.neg() : r1, e1, t1, !0)) : new n1(NaN);\n};\nm.times = m.mul = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor, d1 = c1.d, f1 = (e1 = new p1(e1)).d;\n    if (e1.s *= c1.s, !d1 || !d1[0] || !f1 || !f1[0]) return new p1(!e1.s || d1 && !d1[0] && !f1 || f1 && !f1[0] && !d1 ? NaN : !d1 || !f1 ? e1.s / 0 : e1.s * 0);\n    for(r1 = ee(c1.e / b) + ee(e1.e / b), l1 = d1.length, u1 = f1.length, l1 < u1 && (o1 = d1, d1 = f1, f1 = o1, s1 = l1, l1 = u1, u1 = s1), o1 = [], s1 = l1 + u1, n1 = s1; n1--;)o1.push(0);\n    for(n1 = u1; --n1 >= 0;){\n        for(t1 = 0, i1 = l1 + n1; i1 > n1;)a1 = o1[i1] + f1[n1] * d1[i1 - n1 - 1] + t1, o1[i1--] = a1 % ge | 0, t1 = a1 / ge | 0;\n        o1[i1] = (o1[i1] + t1) % ge | 0;\n    }\n    for(; !o1[--s1];)o1.pop();\n    return t1 ? ++r1 : o1.shift(), e1.d = o1, e1.e = Hr(o1, r1), w ? h(e1, p1.precision, p1.rounding) : e1;\n};\nm.toBinary = function(e1, t1) {\n    return Pi(this, 2, e1, t1);\n};\nm.toDecimalPlaces = m.toDP = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    return r1 = new n1(r1), e1 === void 0 ? r1 : (se(e1, 0, $e), t1 === void 0 ? t1 = n1.rounding : se(t1, 0, 8), h(r1, e1 + r1.e + 1, t1));\n};\nm.toExponential = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? r1 = we(n1, !0) : (se(e1, 0, $e), t1 === void 0 ? t1 = i1.rounding : se(t1, 0, 8), n1 = h(new i1(n1), e1 + 1, t1), r1 = we(n1, !0, e1 + 1)), n1.isNeg() && !n1.isZero() ? \"-\" + r1 : r1;\n};\nm.toFixed = function(e1, t1) {\n    var r1, n1, i1 = this, o1 = i1.constructor;\n    return e1 === void 0 ? r1 = we(i1) : (se(e1, 0, $e), t1 === void 0 ? t1 = o1.rounding : se(t1, 0, 8), n1 = h(new o1(i1), e1 + i1.e + 1, t1), r1 = we(n1, !1, e1 + n1.e + 1)), i1.isNeg() && !i1.isZero() ? \"-\" + r1 : r1;\n};\nm.toFraction = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, y1 = f1.d, g1 = f1.constructor;\n    if (!y1) return new g1(f1);\n    if (u1 = r1 = new g1(1), n1 = l1 = new g1(0), t1 = new g1(n1), o1 = t1.e = Rs(y1) - f1.e - 1, s1 = o1 % b, t1.d[0] = j(10, s1 < 0 ? b + s1 : s1), e1 == null) e1 = o1 > 0 ? t1 : u1;\n    else {\n        if (a1 = new g1(e1), !a1.isInt() || a1.lt(u1)) throw Error(Le + a1);\n        e1 = a1.gt(t1) ? o1 > 0 ? t1 : u1 : a1;\n    }\n    for(w = !1, a1 = new g1(W(y1)), c1 = g1.precision, g1.precision = o1 = y1.length * b * 2; p1 = D(a1, t1, 0, 1, 1), i1 = r1.plus(p1.times(n1)), i1.cmp(e1) != 1;)r1 = n1, n1 = i1, i1 = u1, u1 = l1.plus(p1.times(i1)), l1 = i1, i1 = t1, t1 = a1.minus(p1.times(i1)), a1 = i1;\n    return i1 = D(e1.minus(r1), n1, 0, 1, 1), l1 = l1.plus(i1.times(u1)), r1 = r1.plus(i1.times(n1)), l1.s = u1.s = f1.s, d1 = D(u1, n1, o1, 1).minus(f1).abs().cmp(D(l1, r1, o1, 1).minus(f1).abs()) < 1 ? [\n        u1,\n        n1\n    ] : [\n        l1,\n        r1\n    ], g1.precision = c1, w = !0, d1;\n};\nm.toHexadecimal = m.toHex = function(e1, t1) {\n    return Pi(this, 16, e1, t1);\n};\nm.toNearest = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    if (r1 = new n1(r1), e1 == null) {\n        if (!r1.d) return r1;\n        e1 = new n1(1), t1 = n1.rounding;\n    } else {\n        if (e1 = new n1(e1), t1 === void 0 ? t1 = n1.rounding : se(t1, 0, 8), !r1.d) return e1.s ? r1 : e1;\n        if (!e1.d) return e1.s && (e1.s = r1.s), e1;\n    }\n    return e1.d[0] ? (w = !1, r1 = D(r1, e1, 0, t1, 1).times(e1), w = !0, h(r1)) : (e1.s = r1.s, r1 = e1), r1;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e1, t1) {\n    return Pi(this, 8, e1, t1);\n};\nm.toPower = m.pow = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1 = this, l1 = a1.constructor, u1 = +(e1 = new l1(e1));\n    if (!a1.d || !e1.d || !a1.d[0] || !e1.d[0]) return new l1(j(+a1, u1));\n    if (a1 = new l1(a1), a1.eq(1)) return a1;\n    if (n1 = l1.precision, o1 = l1.rounding, e1.eq(1)) return h(a1, n1, o1);\n    if (t1 = ee(e1.e / b), t1 >= e1.d.length - 1 && (r1 = u1 < 0 ? -u1 : u1) <= mc) return i1 = Ss(l1, a1, r1, n1), e1.s < 0 ? new l1(1).div(i1) : h(i1, n1, o1);\n    if (s1 = a1.s, s1 < 0) {\n        if (t1 < e1.d.length - 1) return new l1(NaN);\n        if (e1.d[t1] & 1 || (s1 = 1), a1.e == 0 && a1.d[0] == 1 && a1.d.length == 1) return a1.s = s1, a1;\n    }\n    return r1 = j(+a1, u1), t1 = r1 == 0 || !isFinite(r1) ? ee(u1 * (Math.log(\"0.\" + W(a1.d)) / Math.LN10 + a1.e + 1)) : new l1(r1 + \"\").e, t1 > l1.maxE + 1 || t1 < l1.minE - 1 ? new l1(t1 > 0 ? s1 / 0 : 0) : (w = !1, l1.rounding = a1.s = 1, r1 = Math.min(12, (t1 + \"\").length), i1 = Ei(e1.times(Ne(a1, n1 + r1)), n1), i1.d && (i1 = h(i1, n1 + 5, 1), Jt(i1.d, n1, o1) && (t1 = n1 + 10, i1 = h(Ei(e1.times(Ne(a1, t1 + r1)), t1), t1 + 5, 1), +W(i1.d).slice(n1 + 1, n1 + 15) + 1 == 1e14 && (i1 = h(i1, n1 + 1, 0)))), i1.s = s1, w = !0, l1.rounding = o1, h(i1, n1, o1));\n};\nm.toPrecision = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? r1 = we(n1, n1.e <= i1.toExpNeg || n1.e >= i1.toExpPos) : (se(e1, 1, $e), t1 === void 0 ? t1 = i1.rounding : se(t1, 0, 8), n1 = h(new i1(n1), e1, t1), r1 = we(n1, e1 <= n1.e || n1.e <= i1.toExpNeg, e1)), n1.isNeg() && !n1.isZero() ? \"-\" + r1 : r1;\n};\nm.toSignificantDigits = m.toSD = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    return e1 === void 0 ? (e1 = n1.precision, t1 = n1.rounding) : (se(e1, 1, $e), t1 === void 0 ? t1 = n1.rounding : se(t1, 0, 8)), h(new n1(r1), e1, t1);\n};\nm.toString = function() {\n    var e1 = this, t1 = e1.constructor, r1 = we(e1, e1.e <= t1.toExpNeg || e1.e >= t1.toExpPos);\n    return e1.isNeg() && !e1.isZero() ? \"-\" + r1 : r1;\n};\nm.truncated = m.trunc = function() {\n    return h(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e1 = this, t1 = e1.constructor, r1 = we(e1, e1.e <= t1.toExpNeg || e1.e >= t1.toExpPos);\n    return e1.isNeg() ? \"-\" + r1 : r1;\n};\nfunction W(e1) {\n    var t1, r1, n1, i1 = e1.length - 1, o1 = \"\", s1 = e1[0];\n    if (i1 > 0) {\n        for(o1 += s1, t1 = 1; t1 < i1; t1++)n1 = e1[t1] + \"\", r1 = b - n1.length, r1 && (o1 += _e(r1)), o1 += n1;\n        s1 = e1[t1], n1 = s1 + \"\", r1 = b - n1.length, r1 && (o1 += _e(r1));\n    } else if (s1 === 0) return \"0\";\n    for(; s1 % 10 === 0;)s1 /= 10;\n    return o1 + s1;\n}\nfunction se(e1, t1, r1) {\n    if (e1 !== ~~e1 || e1 < t1 || e1 > r1) throw Error(Le + e1);\n}\nfunction Jt(e1, t1, r1, n1) {\n    var i1, o1, s1, a1;\n    for(o1 = e1[0]; o1 >= 10; o1 /= 10)--t1;\n    return --t1 < 0 ? (t1 += b, i1 = 0) : (i1 = Math.ceil((t1 + 1) / b), t1 %= b), o1 = j(10, b - t1), a1 = e1[i1] % o1 | 0, n1 == null ? t1 < 3 ? (t1 == 0 ? a1 = a1 / 100 | 0 : t1 == 1 && (a1 = a1 / 10 | 0), s1 = r1 < 4 && a1 == 99999 || r1 > 3 && a1 == 49999 || a1 == 5e4 || a1 == 0) : s1 = (r1 < 4 && a1 + 1 == o1 || r1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 100 | 0) == j(10, t1 - 2) - 1 || (a1 == o1 / 2 || a1 == 0) && (e1[i1 + 1] / o1 / 100 | 0) == 0 : t1 < 4 ? (t1 == 0 ? a1 = a1 / 1e3 | 0 : t1 == 1 ? a1 = a1 / 100 | 0 : t1 == 2 && (a1 = a1 / 10 | 0), s1 = (n1 || r1 < 4) && a1 == 9999 || !n1 && r1 > 3 && a1 == 4999) : s1 = ((n1 || r1 < 4) && a1 + 1 == o1 || !n1 && r1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 1e3 | 0) == j(10, t1 - 3) - 1, s1;\n}\nfunction Ur(e1, t1, r1) {\n    for(var n1, i1 = [\n        0\n    ], o1, s1 = 0, a1 = e1.length; s1 < a1;){\n        for(o1 = i1.length; o1--;)i1[o1] *= t1;\n        for(i1[0] += hi.indexOf(e1.charAt(s1++)), n1 = 0; n1 < i1.length; n1++)i1[n1] > r1 - 1 && (i1[n1 + 1] === void 0 && (i1[n1 + 1] = 0), i1[n1 + 1] += i1[n1] / r1 | 0, i1[n1] %= r1);\n    }\n    return i1.reverse();\n}\nfunction gc(e1, t1) {\n    var r1, n1, i1;\n    if (t1.isZero()) return t1;\n    n1 = t1.d.length, n1 < 32 ? (r1 = Math.ceil(n1 / 3), i1 = (1 / Wr(4, r1)).toString()) : (r1 = 16, i1 = \"2.3283064365386962890625e-10\"), e1.precision += r1, t1 = yt(e1, 1, t1.times(i1), new e1(1));\n    for(var o1 = r1; o1--;){\n        var s1 = t1.times(t1);\n        t1 = s1.times(s1).minus(s1).times(8).plus(1);\n    }\n    return e1.precision -= r1, t1;\n}\nvar D = function() {\n    function e1(n1, i1, o1) {\n        var s1, a1 = 0, l1 = n1.length;\n        for(n1 = n1.slice(); l1--;)s1 = n1[l1] * i1 + a1, n1[l1] = s1 % o1 | 0, a1 = s1 / o1 | 0;\n        return a1 && n1.unshift(a1), n1;\n    }\n    function t1(n1, i1, o1, s1) {\n        var a1, l1;\n        if (o1 != s1) l1 = o1 > s1 ? 1 : -1;\n        else for(a1 = l1 = 0; a1 < o1; a1++)if (n1[a1] != i1[a1]) {\n            l1 = n1[a1] > i1[a1] ? 1 : -1;\n            break;\n        }\n        return l1;\n    }\n    function r1(n1, i1, o1, s1) {\n        for(var a1 = 0; o1--;)n1[o1] -= a1, a1 = n1[o1] < i1[o1] ? 1 : 0, n1[o1] = a1 * s1 + n1[o1] - i1[o1];\n        for(; !n1[0] && n1.length > 1;)n1.shift();\n    }\n    return function(n1, i1, o1, s1, a1, l1) {\n        var u1, c1, p1, d1, f1, y1, g1, P1, T1, C1, x1, M1, ce1, J1, Ke1, $1, z1, Ae1, Y1, tt1, hr1 = n1.constructor, An1 = n1.s == i1.s ? 1 : -1, Z1 = n1.d, k1 = i1.d;\n        if (!Z1 || !Z1[0] || !k1 || !k1[0]) return new hr1(!n1.s || !i1.s || (Z1 ? k1 && Z1[0] == k1[0] : !k1) ? NaN : Z1 && Z1[0] == 0 || !k1 ? An1 * 0 : An1 / 0);\n        for(l1 ? (f1 = 1, c1 = n1.e - i1.e) : (l1 = ge, f1 = b, c1 = ee(n1.e / f1) - ee(i1.e / f1)), Y1 = k1.length, z1 = Z1.length, T1 = new hr1(An1), C1 = T1.d = [], p1 = 0; k1[p1] == (Z1[p1] || 0); p1++);\n        if (k1[p1] > (Z1[p1] || 0) && c1--, o1 == null ? (J1 = o1 = hr1.precision, s1 = hr1.rounding) : a1 ? J1 = o1 + (n1.e - i1.e) + 1 : J1 = o1, J1 < 0) C1.push(1), y1 = !0;\n        else {\n            if (J1 = J1 / f1 + 2 | 0, p1 = 0, Y1 == 1) {\n                for(d1 = 0, k1 = k1[0], J1++; (p1 < z1 || d1) && J1--; p1++)Ke1 = d1 * l1 + (Z1[p1] || 0), C1[p1] = Ke1 / k1 | 0, d1 = Ke1 % k1 | 0;\n                y1 = d1 || p1 < z1;\n            } else {\n                for(d1 = l1 / (k1[0] + 1) | 0, d1 > 1 && (k1 = e1(k1, d1, l1), Z1 = e1(Z1, d1, l1), Y1 = k1.length, z1 = Z1.length), $1 = Y1, x1 = Z1.slice(0, Y1), M1 = x1.length; M1 < Y1;)x1[M1++] = 0;\n                tt1 = k1.slice(), tt1.unshift(0), Ae1 = k1[0], k1[1] >= l1 / 2 && ++Ae1;\n                do d1 = 0, u1 = t1(k1, x1, Y1, M1), u1 < 0 ? (ce1 = x1[0], Y1 != M1 && (ce1 = ce1 * l1 + (x1[1] || 0)), d1 = ce1 / Ae1 | 0, d1 > 1 ? (d1 >= l1 && (d1 = l1 - 1), g1 = e1(k1, d1, l1), P1 = g1.length, M1 = x1.length, u1 = t1(g1, x1, P1, M1), u1 == 1 && (d1--, r1(g1, Y1 < P1 ? tt1 : k1, P1, l1))) : (d1 == 0 && (u1 = d1 = 1), g1 = k1.slice()), P1 = g1.length, P1 < M1 && g1.unshift(0), r1(x1, g1, M1, l1), u1 == -1 && (M1 = x1.length, u1 = t1(k1, x1, Y1, M1), u1 < 1 && (d1++, r1(x1, Y1 < M1 ? tt1 : k1, M1, l1))), M1 = x1.length) : u1 === 0 && (d1++, x1 = [\n                    0\n                ]), C1[p1++] = d1, u1 && x1[0] ? x1[M1++] = Z1[$1] || 0 : (x1 = [\n                    Z1[$1]\n                ], M1 = 1);\n                while (($1++ < z1 || x1[0] !== void 0) && J1--);\n                y1 = x1[0] !== void 0;\n            }\n            C1[0] || C1.shift();\n        }\n        if (f1 == 1) T1.e = c1, vs = y1;\n        else {\n            for(p1 = 1, d1 = C1[0]; d1 >= 10; d1 /= 10)p1++;\n            T1.e = p1 + c1 * f1 - 1, h(T1, a1 ? o1 + T1.e + 1 : o1, s1, y1);\n        }\n        return T1;\n    };\n}();\nfunction h(e1, t1, r1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor;\n    e: if (t1 != null) {\n        if (p1 = e1.d, !p1) return e1;\n        for(i1 = 1, a1 = p1[0]; a1 >= 10; a1 /= 10)i1++;\n        if (o1 = t1 - i1, o1 < 0) o1 += b, s1 = t1, c1 = p1[d1 = 0], l1 = c1 / j(10, i1 - s1 - 1) % 10 | 0;\n        else if (d1 = Math.ceil((o1 + 1) / b), a1 = p1.length, d1 >= a1) if (n1) {\n            for(; a1++ <= d1;)p1.push(0);\n            c1 = l1 = 0, i1 = 1, o1 %= b, s1 = o1 - b + 1;\n        } else break e;\n        else {\n            for(c1 = a1 = p1[d1], i1 = 1; a1 >= 10; a1 /= 10)i1++;\n            o1 %= b, s1 = o1 - b + i1, l1 = s1 < 0 ? 0 : c1 / j(10, i1 - s1 - 1) % 10 | 0;\n        }\n        if (n1 = n1 || t1 < 0 || p1[d1 + 1] !== void 0 || (s1 < 0 ? c1 : c1 % j(10, i1 - s1 - 1)), u1 = r1 < 4 ? (l1 || n1) && (r1 == 0 || r1 == (e1.s < 0 ? 3 : 2)) : l1 > 5 || l1 == 5 && (r1 == 4 || n1 || r1 == 6 && (o1 > 0 ? s1 > 0 ? c1 / j(10, i1 - s1) : 0 : p1[d1 - 1]) % 10 & 1 || r1 == (e1.s < 0 ? 8 : 7)), t1 < 1 || !p1[0]) return p1.length = 0, u1 ? (t1 -= e1.e + 1, p1[0] = j(10, (b - t1 % b) % b), e1.e = -t1 || 0) : p1[0] = e1.e = 0, e1;\n        if (o1 == 0 ? (p1.length = d1, a1 = 1, d1--) : (p1.length = d1 + 1, a1 = j(10, b - o1), p1[d1] = s1 > 0 ? (c1 / j(10, i1 - s1) % j(10, s1) | 0) * a1 : 0), u1) for(;;)if (d1 == 0) {\n            for(o1 = 1, s1 = p1[0]; s1 >= 10; s1 /= 10)o1++;\n            for(s1 = p1[0] += a1, a1 = 1; s1 >= 10; s1 /= 10)a1++;\n            o1 != a1 && (e1.e++, p1[0] == ge && (p1[0] = 1));\n            break;\n        } else {\n            if (p1[d1] += a1, p1[d1] != ge) break;\n            p1[d1--] = 0, a1 = 1;\n        }\n        for(o1 = p1.length; p1[--o1] === 0;)p1.pop();\n    }\n    return w && (e1.e > f1.maxE ? (e1.d = null, e1.e = NaN) : e1.e < f1.minE && (e1.e = 0, e1.d = [\n        0\n    ])), e1;\n}\nfunction we(e1, t1, r1) {\n    if (!e1.isFinite()) return ks(e1);\n    var n1, i1 = e1.e, o1 = W(e1.d), s1 = o1.length;\n    return t1 ? (r1 && (n1 = r1 - s1) > 0 ? o1 = o1.charAt(0) + \".\" + o1.slice(1) + _e(n1) : s1 > 1 && (o1 = o1.charAt(0) + \".\" + o1.slice(1)), o1 = o1 + (e1.e < 0 ? \"e\" : \"e+\") + e1.e) : i1 < 0 ? (o1 = \"0.\" + _e(-i1 - 1) + o1, r1 && (n1 = r1 - s1) > 0 && (o1 += _e(n1))) : i1 >= s1 ? (o1 += _e(i1 + 1 - s1), r1 && (n1 = r1 - i1 - 1) > 0 && (o1 = o1 + \".\" + _e(n1))) : ((n1 = i1 + 1) < s1 && (o1 = o1.slice(0, n1) + \".\" + o1.slice(n1)), r1 && (n1 = r1 - s1) > 0 && (i1 + 1 === s1 && (o1 += \".\"), o1 += _e(n1))), o1;\n}\nfunction Hr(e1, t1) {\n    var r1 = e1[0];\n    for(t1 *= b; r1 >= 10; r1 /= 10)t1++;\n    return t1;\n}\nfunction Gr(e1, t1, r1) {\n    if (t1 > fc) throw w = !0, r1 && (e1.precision = r1), Error(Ts);\n    return h(new e1(Kr), t1, 1, !0);\n}\nfunction fe(e1, t1, r1) {\n    if (t1 > bi) throw Error(Ts);\n    return h(new e1(Qr), t1, r1, !0);\n}\nfunction Rs(e1) {\n    var t1 = e1.length - 1, r1 = t1 * b + 1;\n    if (t1 = e1[t1], t1) {\n        for(; t1 % 10 == 0; t1 /= 10)r1--;\n        for(t1 = e1[0]; t1 >= 10; t1 /= 10)r1++;\n    }\n    return r1;\n}\nfunction _e(e1) {\n    for(var t1 = \"\"; e1--;)t1 += \"0\";\n    return t1;\n}\nfunction Ss(e1, t1, r1, n1) {\n    var i1, o1 = new e1(1), s1 = Math.ceil(n1 / b + 4);\n    for(w = !1;;){\n        if (r1 % 2 && (o1 = o1.times(t1), ws(o1.d, s1) && (i1 = !0)), r1 = ee(r1 / 2), r1 === 0) {\n            r1 = o1.d.length - 1, i1 && o1.d[r1] === 0 && ++o1.d[r1];\n            break;\n        }\n        t1 = t1.times(t1), ws(t1.d, s1);\n    }\n    return w = !0, o1;\n}\nfunction Es(e1) {\n    return e1.d[e1.d.length - 1] & 1;\n}\nfunction Is(e1, t1, r1) {\n    for(var n1, i1 = new e1(t1[0]), o1 = 0; ++o1 < t1.length;)if (n1 = new e1(t1[o1]), n1.s) i1[r1](n1) && (i1 = n1);\n    else {\n        i1 = n1;\n        break;\n    }\n    return i1;\n}\nfunction Ei(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1 = 0, c1 = 0, p1 = 0, d1 = e1.constructor, f1 = d1.rounding, y1 = d1.precision;\n    if (!e1.d || !e1.d[0] || e1.e > 17) return new d1(e1.d ? e1.d[0] ? e1.s < 0 ? 0 : 1 / 0 : 1 : e1.s ? e1.s < 0 ? 0 : e1 : 0 / 0);\n    for(t1 == null ? (w = !1, l1 = y1) : l1 = t1, a1 = new d1(.03125); e1.e > -2;)e1 = e1.times(a1), p1 += 5;\n    for(n1 = Math.log(j(2, p1)) / Math.LN10 * 2 + 5 | 0, l1 += n1, r1 = o1 = s1 = new d1(1), d1.precision = l1;;){\n        if (o1 = h(o1.times(e1), l1, 1), r1 = r1.times(++c1), a1 = s1.plus(D(o1, r1, l1, 1)), W(a1.d).slice(0, l1) === W(s1.d).slice(0, l1)) {\n            for(i1 = p1; i1--;)s1 = h(s1.times(s1), l1, 1);\n            if (t1 == null) if (u1 < 3 && Jt(s1.d, l1 - n1, f1, u1)) d1.precision = l1 += 10, r1 = o1 = a1 = new d1(1), c1 = 0, u1++;\n            else return h(s1, d1.precision = y1, f1, w = !0);\n            else return d1.precision = y1, s1;\n        }\n        s1 = a1;\n    }\n}\nfunction Ne(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = 1, y1 = 10, g1 = e1, P1 = g1.d, T1 = g1.constructor, C1 = T1.rounding, x1 = T1.precision;\n    if (g1.s < 0 || !P1 || !P1[0] || !g1.e && P1[0] == 1 && P1.length == 1) return new T1(P1 && !P1[0] ? -1 / 0 : g1.s != 1 ? NaN : P1 ? 0 : g1);\n    if (t1 == null ? (w = !1, c1 = x1) : c1 = t1, T1.precision = c1 += y1, r1 = W(P1), n1 = r1.charAt(0), Math.abs(o1 = g1.e) < 15e14) {\n        for(; n1 < 7 && n1 != 1 || n1 == 1 && r1.charAt(1) > 3;)g1 = g1.times(e1), r1 = W(g1.d), n1 = r1.charAt(0), f1++;\n        o1 = g1.e, n1 > 1 ? (g1 = new T1(\"0.\" + r1), o1++) : g1 = new T1(n1 + \".\" + r1.slice(1));\n    } else return u1 = Gr(T1, c1 + 2, x1).times(o1 + \"\"), g1 = Ne(new T1(n1 + \".\" + r1.slice(1)), c1 - y1).plus(u1), T1.precision = x1, t1 == null ? h(g1, x1, C1, w = !0) : g1;\n    for(p1 = g1, l1 = s1 = g1 = D(g1.minus(1), g1.plus(1), c1, 1), d1 = h(g1.times(g1), c1, 1), i1 = 3;;){\n        if (s1 = h(s1.times(d1), c1, 1), u1 = l1.plus(D(s1, new T1(i1), c1, 1)), W(u1.d).slice(0, c1) === W(l1.d).slice(0, c1)) if (l1 = l1.times(2), o1 !== 0 && (l1 = l1.plus(Gr(T1, c1 + 2, x1).times(o1 + \"\"))), l1 = D(l1, new T1(f1), c1, 1), t1 == null) if (Jt(l1.d, c1 - y1, C1, a1)) T1.precision = c1 += y1, u1 = s1 = g1 = D(p1.minus(1), p1.plus(1), c1, 1), d1 = h(g1.times(g1), c1, 1), i1 = a1 = 1;\n        else return h(l1, T1.precision = x1, C1, w = !0);\n        else return T1.precision = x1, l1;\n        l1 = u1, i1 += 2;\n    }\n}\nfunction ks(e1) {\n    return String(e1.s * e1.s / 0);\n}\nfunction wi(e1, t1) {\n    var r1, n1, i1;\n    for((r1 = t1.indexOf(\".\")) > -1 && (t1 = t1.replace(\".\", \"\")), (n1 = t1.search(/e/i)) > 0 ? (r1 < 0 && (r1 = n1), r1 += +t1.slice(n1 + 1), t1 = t1.substring(0, n1)) : r1 < 0 && (r1 = t1.length), n1 = 0; t1.charCodeAt(n1) === 48; n1++);\n    for(i1 = t1.length; t1.charCodeAt(i1 - 1) === 48; --i1);\n    if (t1 = t1.slice(n1, i1), t1) {\n        if (i1 -= n1, e1.e = r1 = r1 - n1 - 1, e1.d = [], n1 = (r1 + 1) % b, r1 < 0 && (n1 += b), n1 < i1) {\n            for(n1 && e1.d.push(+t1.slice(0, n1)), i1 -= b; n1 < i1;)e1.d.push(+t1.slice(n1, n1 += b));\n            t1 = t1.slice(n1), n1 = b - t1.length;\n        } else n1 -= i1;\n        for(; n1--;)t1 += \"0\";\n        e1.d.push(+t1), w && (e1.e > e1.constructor.maxE ? (e1.d = null, e1.e = NaN) : e1.e < e1.constructor.minE && (e1.e = 0, e1.d = [\n            0\n        ]));\n    } else e1.e = 0, e1.d = [\n        0\n    ];\n    return e1;\n}\nfunction yc(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1, c1;\n    if (t1.indexOf(\"_\") > -1) {\n        if (t1 = t1.replace(/(\\d)_(?=\\d)/g, \"$1\"), Ms.test(t1)) return wi(e1, t1);\n    } else if (t1 === \"Infinity\" || t1 === \"NaN\") return +t1 || (e1.s = NaN), e1.e = NaN, e1.d = null, e1;\n    if (pc.test(t1)) r1 = 16, t1 = t1.toLowerCase();\n    else if (cc.test(t1)) r1 = 2;\n    else if (dc.test(t1)) r1 = 8;\n    else throw Error(Le + t1);\n    for(o1 = t1.search(/p/i), o1 > 0 ? (l1 = +t1.slice(o1 + 1), t1 = t1.substring(2, o1)) : t1 = t1.slice(2), o1 = t1.indexOf(\".\"), s1 = o1 >= 0, n1 = e1.constructor, s1 && (t1 = t1.replace(\".\", \"\"), a1 = t1.length, o1 = a1 - o1, i1 = Ss(n1, new n1(r1), o1, o1 * 2)), u1 = Ur(t1, r1, ge), c1 = u1.length - 1, o1 = c1; u1[o1] === 0; --o1)u1.pop();\n    return o1 < 0 ? new n1(e1.s * 0) : (e1.e = Hr(u1, c1), e1.d = u1, w = !1, s1 && (e1 = D(e1, i1, a1 * 4)), l1 && (e1 = e1.times(Math.abs(l1) < 54 ? j(2, l1) : ze.pow(2, l1))), w = !0, e1);\n}\nfunction hc(e1, t1) {\n    var r1, n1 = t1.d.length;\n    if (n1 < 3) return t1.isZero() ? t1 : yt(e1, 2, t1, t1);\n    r1 = 1.4 * Math.sqrt(n1), r1 = r1 > 16 ? 16 : r1 | 0, t1 = t1.times(1 / Wr(5, r1)), t1 = yt(e1, 2, t1, t1);\n    for(var i1, o1 = new e1(5), s1 = new e1(16), a1 = new e1(20); r1--;)i1 = t1.times(t1), t1 = t1.times(o1.plus(i1.times(s1.times(i1).minus(a1))));\n    return t1;\n}\nfunction yt(e1, t1, r1, n1, i1) {\n    var o1, s1, a1, l1, u1 = 1, c1 = e1.precision, p1 = Math.ceil(c1 / b);\n    for(w = !1, l1 = r1.times(r1), a1 = new e1(n1);;){\n        if (s1 = D(a1.times(l1), new e1(t1++ * t1++), c1, 1), a1 = i1 ? n1.plus(s1) : n1.minus(s1), n1 = D(s1.times(l1), new e1(t1++ * t1++), c1, 1), s1 = a1.plus(n1), s1.d[p1] !== void 0) {\n            for(o1 = p1; s1.d[o1] === a1.d[o1] && o1--;);\n            if (o1 == -1) break;\n        }\n        o1 = a1, a1 = n1, n1 = s1, s1 = o1, u1++;\n    }\n    return w = !0, s1.d.length = p1 + 1, s1;\n}\nfunction Wr(e1, t1) {\n    for(var r1 = e1; --t1;)r1 *= e1;\n    return r1;\n}\nfunction Fs(e1, t1) {\n    var r1, n1 = t1.s < 0, i1 = fe(e1, e1.precision, 1), o1 = i1.times(.5);\n    if (t1 = t1.abs(), t1.lte(o1)) return Re = n1 ? 4 : 1, t1;\n    if (r1 = t1.divToInt(i1), r1.isZero()) Re = n1 ? 3 : 2;\n    else {\n        if (t1 = t1.minus(r1.times(i1)), t1.lte(o1)) return Re = Es(r1) ? n1 ? 2 : 3 : n1 ? 4 : 1, t1;\n        Re = Es(r1) ? n1 ? 1 : 4 : n1 ? 3 : 2;\n    }\n    return t1.minus(i1).abs();\n}\nfunction Pi(e1, t1, r1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor, y1 = r1 !== void 0;\n    if (y1 ? (se(r1, 1, $e), n1 === void 0 ? n1 = f1.rounding : se(n1, 0, 8)) : (r1 = f1.precision, n1 = f1.rounding), !e1.isFinite()) c1 = ks(e1);\n    else {\n        for(c1 = we(e1), s1 = c1.indexOf(\".\"), y1 ? (i1 = 2, t1 == 16 ? r1 = r1 * 4 - 3 : t1 == 8 && (r1 = r1 * 3 - 2)) : i1 = t1, s1 >= 0 && (c1 = c1.replace(\".\", \"\"), d1 = new f1(1), d1.e = c1.length - s1, d1.d = Ur(we(d1), 10, i1), d1.e = d1.d.length), p1 = Ur(c1, 10, i1), o1 = l1 = p1.length; p1[--l1] == 0;)p1.pop();\n        if (!p1[0]) c1 = y1 ? \"0p+0\" : \"0\";\n        else {\n            if (s1 < 0 ? o1-- : (e1 = new f1(e1), e1.d = p1, e1.e = o1, e1 = D(e1, d1, r1, n1, 0, i1), p1 = e1.d, o1 = e1.e, u1 = vs), s1 = p1[r1], a1 = i1 / 2, u1 = u1 || p1[r1 + 1] !== void 0, u1 = n1 < 4 ? (s1 !== void 0 || u1) && (n1 === 0 || n1 === (e1.s < 0 ? 3 : 2)) : s1 > a1 || s1 === a1 && (n1 === 4 || u1 || n1 === 6 && p1[r1 - 1] & 1 || n1 === (e1.s < 0 ? 8 : 7)), p1.length = r1, u1) for(; ++p1[--r1] > i1 - 1;)p1[r1] = 0, r1 || (++o1, p1.unshift(1));\n            for(l1 = p1.length; !p1[l1 - 1]; --l1);\n            for(s1 = 0, c1 = \"\"; s1 < l1; s1++)c1 += hi.charAt(p1[s1]);\n            if (y1) {\n                if (l1 > 1) if (t1 == 16 || t1 == 8) {\n                    for(s1 = t1 == 16 ? 4 : 3, --l1; l1 % s1; l1++)c1 += \"0\";\n                    for(p1 = Ur(c1, i1, t1), l1 = p1.length; !p1[l1 - 1]; --l1);\n                    for(s1 = 1, c1 = \"1.\"; s1 < l1; s1++)c1 += hi.charAt(p1[s1]);\n                } else c1 = c1.charAt(0) + \".\" + c1.slice(1);\n                c1 = c1 + (o1 < 0 ? \"p\" : \"p+\") + o1;\n            } else if (o1 < 0) {\n                for(; ++o1;)c1 = \"0\" + c1;\n                c1 = \"0.\" + c1;\n            } else if (++o1 > l1) for(o1 -= l1; o1--;)c1 += \"0\";\n            else o1 < l1 && (c1 = c1.slice(0, o1) + \".\" + c1.slice(o1));\n        }\n        c1 = (t1 == 16 ? \"0x\" : t1 == 2 ? \"0b\" : t1 == 8 ? \"0o\" : \"\") + c1;\n    }\n    return e1.s < 0 ? \"-\" + c1 : c1;\n}\nfunction ws(e1, t1) {\n    if (e1.length > t1) return e1.length = t1, !0;\n}\nfunction xc(e1) {\n    return new this(e1).abs();\n}\nfunction bc(e1) {\n    return new this(e1).acos();\n}\nfunction Ec(e1) {\n    return new this(e1).acosh();\n}\nfunction wc(e1, t1) {\n    return new this(e1).plus(t1);\n}\nfunction Pc(e1) {\n    return new this(e1).asin();\n}\nfunction vc(e1) {\n    return new this(e1).asinh();\n}\nfunction Tc(e1) {\n    return new this(e1).atan();\n}\nfunction Cc(e1) {\n    return new this(e1).atanh();\n}\nfunction Ac(e1, t1) {\n    e1 = new this(e1), t1 = new this(t1);\n    var r1, n1 = this.precision, i1 = this.rounding, o1 = n1 + 4;\n    return !e1.s || !t1.s ? r1 = new this(NaN) : !e1.d && !t1.d ? (r1 = fe(this, o1, 1).times(t1.s > 0 ? .25 : .75), r1.s = e1.s) : !t1.d || e1.isZero() ? (r1 = t1.s < 0 ? fe(this, n1, i1) : new this(0), r1.s = e1.s) : !e1.d || t1.isZero() ? (r1 = fe(this, o1, 1).times(.5), r1.s = e1.s) : t1.s < 0 ? (this.precision = o1, this.rounding = 1, r1 = this.atan(D(e1, t1, o1, 1)), t1 = fe(this, o1, 1), this.precision = n1, this.rounding = i1, r1 = e1.s < 0 ? r1.minus(t1) : r1.plus(t1)) : r1 = this.atan(D(e1, t1, o1, 1)), r1;\n}\nfunction Mc(e1) {\n    return new this(e1).cbrt();\n}\nfunction Rc(e1) {\n    return h(e1 = new this(e1), e1.e + 1, 2);\n}\nfunction Sc(e1, t1, r1) {\n    return new this(e1).clamp(t1, r1);\n}\nfunction Ic(e1) {\n    if (!e1 || typeof e1 != \"object\") throw Error(Jr + \"Object expected\");\n    var t1, r1, n1, i1 = e1.defaults === !0, o1 = [\n        \"precision\",\n        1,\n        $e,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -gt,\n        0,\n        \"toExpPos\",\n        0,\n        gt,\n        \"maxE\",\n        0,\n        gt,\n        \"minE\",\n        -gt,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(t1 = 0; t1 < o1.length; t1 += 3)if (r1 = o1[t1], i1 && (this[r1] = xi[r1]), (n1 = e1[r1]) !== void 0) if (ee(n1) === n1 && n1 >= o1[t1 + 1] && n1 <= o1[t1 + 2]) this[r1] = n1;\n    else throw Error(Le + r1 + \": \" + n1);\n    if (r1 = \"crypto\", i1 && (this[r1] = xi[r1]), (n1 = e1[r1]) !== void 0) if (n1 === !0 || n1 === !1 || n1 === 0 || n1 === 1) if (n1) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r1] = !0;\n    else throw Error(Cs);\n    else this[r1] = !1;\n    else throw Error(Le + r1 + \": \" + n1);\n    return this;\n}\nfunction kc(e1) {\n    return new this(e1).cos();\n}\nfunction Fc(e1) {\n    return new this(e1).cosh();\n}\nfunction Ds(e1) {\n    var t1, r1, n1;\n    function i1(o1) {\n        var s1, a1, l1, u1 = this;\n        if (!(u1 instanceof i1)) return new i1(o1);\n        if (u1.constructor = i1, Ps(o1)) {\n            u1.s = o1.s, w ? !o1.d || o1.e > i1.maxE ? (u1.e = NaN, u1.d = null) : o1.e < i1.minE ? (u1.e = 0, u1.d = [\n                0\n            ]) : (u1.e = o1.e, u1.d = o1.d.slice()) : (u1.e = o1.e, u1.d = o1.d ? o1.d.slice() : o1.d);\n            return;\n        }\n        if (l1 = typeof o1, l1 === \"number\") {\n            if (o1 === 0) {\n                u1.s = 1 / o1 < 0 ? -1 : 1, u1.e = 0, u1.d = [\n                    0\n                ];\n                return;\n            }\n            if (o1 < 0 ? (o1 = -o1, u1.s = -1) : u1.s = 1, o1 === ~~o1 && o1 < 1e7) {\n                for(s1 = 0, a1 = o1; a1 >= 10; a1 /= 10)s1++;\n                w ? s1 > i1.maxE ? (u1.e = NaN, u1.d = null) : s1 < i1.minE ? (u1.e = 0, u1.d = [\n                    0\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]);\n                return;\n            } else if (o1 * 0 !== 0) {\n                o1 || (u1.s = NaN), u1.e = NaN, u1.d = null;\n                return;\n            }\n            return wi(u1, o1.toString());\n        } else if (l1 !== \"string\") throw Error(Le + o1);\n        return (a1 = o1.charCodeAt(0)) === 45 ? (o1 = o1.slice(1), u1.s = -1) : (a1 === 43 && (o1 = o1.slice(1)), u1.s = 1), Ms.test(o1) ? wi(u1, o1) : yc(u1, o1);\n    }\n    if (i1.prototype = m, i1.ROUND_UP = 0, i1.ROUND_DOWN = 1, i1.ROUND_CEIL = 2, i1.ROUND_FLOOR = 3, i1.ROUND_HALF_UP = 4, i1.ROUND_HALF_DOWN = 5, i1.ROUND_HALF_EVEN = 6, i1.ROUND_HALF_CEIL = 7, i1.ROUND_HALF_FLOOR = 8, i1.EUCLID = 9, i1.config = i1.set = Ic, i1.clone = Ds, i1.isDecimal = Ps, i1.abs = xc, i1.acos = bc, i1.acosh = Ec, i1.add = wc, i1.asin = Pc, i1.asinh = vc, i1.atan = Tc, i1.atanh = Cc, i1.atan2 = Ac, i1.cbrt = Mc, i1.ceil = Rc, i1.clamp = Sc, i1.cos = kc, i1.cosh = Fc, i1.div = Dc, i1.exp = Oc, i1.floor = _c, i1.hypot = Nc, i1.ln = Lc, i1.log = $c, i1.log10 = Vc, i1.log2 = qc, i1.max = jc, i1.min = Bc, i1.mod = Uc, i1.mul = Kc, i1.pow = Qc, i1.random = Gc, i1.round = Jc, i1.sign = Hc, i1.sin = Wc, i1.sinh = zc, i1.sqrt = Yc, i1.sub = Zc, i1.sum = Xc, i1.tan = ep, i1.tanh = tp, i1.trunc = rp, e1 === void 0 && (e1 = {}), e1 && e1.defaults !== !0) for(n1 = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], t1 = 0; t1 < n1.length;)e1.hasOwnProperty(r1 = n1[t1++]) || (e1[r1] = this[r1]);\n    return i1.config(e1), i1;\n}\nfunction Dc(e1, t1) {\n    return new this(e1).div(t1);\n}\nfunction Oc(e1) {\n    return new this(e1).exp();\n}\nfunction _c(e1) {\n    return h(e1 = new this(e1), e1.e + 1, 3);\n}\nfunction Nc() {\n    var e1, t1, r1 = new this(0);\n    for(w = !1, e1 = 0; e1 < arguments.length;)if (t1 = new this(arguments[e1++]), t1.d) r1.d && (r1 = r1.plus(t1.times(t1)));\n    else {\n        if (t1.s) return w = !0, new this(1 / 0);\n        r1 = t1;\n    }\n    return w = !0, r1.sqrt();\n}\nfunction Ps(e1) {\n    return e1 instanceof ze || e1 && e1.toStringTag === As || !1;\n}\nfunction Lc(e1) {\n    return new this(e1).ln();\n}\nfunction $c(e1, t1) {\n    return new this(e1).log(t1);\n}\nfunction qc(e1) {\n    return new this(e1).log(2);\n}\nfunction Vc(e1) {\n    return new this(e1).log(10);\n}\nfunction jc() {\n    return Is(this, arguments, \"lt\");\n}\nfunction Bc() {\n    return Is(this, arguments, \"gt\");\n}\nfunction Uc(e1, t1) {\n    return new this(e1).mod(t1);\n}\nfunction Kc(e1, t1) {\n    return new this(e1).mul(t1);\n}\nfunction Qc(e1, t1) {\n    return new this(e1).pow(t1);\n}\nfunction Gc(e1) {\n    var t1, r1, n1, i1, o1 = 0, s1 = new this(1), a1 = [];\n    if (e1 === void 0 ? e1 = this.precision : se(e1, 1, $e), n1 = Math.ceil(e1 / b), this.crypto) if (crypto.getRandomValues) for(t1 = crypto.getRandomValues(new Uint32Array(n1)); o1 < n1;)i1 = t1[o1], i1 >= 429e7 ? t1[o1] = crypto.getRandomValues(new Uint32Array(1))[0] : a1[o1++] = i1 % 1e7;\n    else if (crypto.randomBytes) {\n        for(t1 = crypto.randomBytes(n1 *= 4); o1 < n1;)i1 = t1[o1] + (t1[o1 + 1] << 8) + (t1[o1 + 2] << 16) + ((t1[o1 + 3] & 127) << 24), i1 >= 214e7 ? crypto.randomBytes(4).copy(t1, o1) : (a1.push(i1 % 1e7), o1 += 4);\n        o1 = n1 / 4;\n    } else throw Error(Cs);\n    else for(; o1 < n1;)a1[o1++] = Math.random() * 1e7 | 0;\n    for(n1 = a1[--o1], e1 %= b, n1 && e1 && (i1 = j(10, b - e1), a1[o1] = (n1 / i1 | 0) * i1); a1[o1] === 0; o1--)a1.pop();\n    if (o1 < 0) r1 = 0, a1 = [\n        0\n    ];\n    else {\n        for(r1 = -1; a1[0] === 0; r1 -= b)a1.shift();\n        for(n1 = 1, i1 = a1[0]; i1 >= 10; i1 /= 10)n1++;\n        n1 < b && (r1 -= b - n1);\n    }\n    return s1.e = r1, s1.d = a1, s1;\n}\nfunction Jc(e1) {\n    return h(e1 = new this(e1), e1.e + 1, this.rounding);\n}\nfunction Hc(e1) {\n    return e1 = new this(e1), e1.d ? e1.d[0] ? e1.s : 0 * e1.s : e1.s || NaN;\n}\nfunction Wc(e1) {\n    return new this(e1).sin();\n}\nfunction zc(e1) {\n    return new this(e1).sinh();\n}\nfunction Yc(e1) {\n    return new this(e1).sqrt();\n}\nfunction Zc(e1, t1) {\n    return new this(e1).sub(t1);\n}\nfunction Xc() {\n    var e1 = 0, t1 = arguments, r1 = new this(t1[e1]);\n    for(w = !1; r1.s && ++e1 < t1.length;)r1 = r1.plus(t1[e1]);\n    return w = !0, h(r1, this.precision, this.rounding);\n}\nfunction ep(e1) {\n    return new this(e1).tan();\n}\nfunction tp(e1) {\n    return new this(e1).tanh();\n}\nfunction rp(e1) {\n    return h(e1 = new this(e1), e1.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar ze = m.constructor = Ds(xi);\nKr = new ze(Kr);\nQr = new ze(Qr);\nvar Pe = ze;\nfunction ht(e1) {\n    return ze.isDecimal(e1) ? !0 : e1 !== null && typeof e1 == \"object\" && typeof e1.s == \"number\" && typeof e1.e == \"number\" && typeof e1.toFixed == \"function\" && Array.isArray(e1.d);\n}\nvar Ht = class {\n    constructor(t1, r1, n1, i1, o1){\n        this.modelName = t1, this.name = r1, this.typeName = n1, this.isList = i1, this.isEnum = o1;\n    }\n    _toGraphQLInputType() {\n        let t1 = this.isList ? \"List\" : \"\", r1 = this.isEnum ? \"Enum\" : \"\";\n        return `${t1}${r1}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction xt(e1) {\n    return e1 instanceof Ht;\n}\nvar zr = class {\n    constructor(t1){\n        this.value = t1;\n    }\n    write(t1) {\n        t1.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar Yr = (e1)=>e1, Zr = {\n    bold: Yr,\n    red: Yr,\n    green: Yr,\n    dim: Yr,\n    enabled: !1\n}, Os = {\n    bold: ne,\n    red: me,\n    green: Ge,\n    dim: Fe,\n    enabled: !0\n}, bt = {\n    write (e1) {\n        e1.writeLine(\",\");\n    }\n};\nvar ve = class {\n    constructor(t1){\n        this.contents = t1;\n        this.isUnderlined = !1;\n        this.color = (t1)=>t1;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(t1) {\n        return this.color = t1, this;\n    }\n    write(t1) {\n        let r1 = t1.getCurrentLineLength();\n        t1.write(this.color(this.contents)), this.isUnderlined && t1.afterNextNewline(()=>{\n            t1.write(\" \".repeat(r1)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar qe = class {\n    constructor(){\n        this.hasError = !1;\n    }\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n};\nvar Et = class extends qe {\n    constructor(){\n        super(...arguments);\n        this.items = [];\n    }\n    addItem(r1) {\n        return this.items.push(new zr(r1)), this;\n    }\n    getField(r1) {\n        return this.items[r1];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n1)=>n1.value.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithItems(r1);\n    }\n    writeEmpty(r1) {\n        let n1 = new ve(\"[]\");\n        this.hasError && n1.setColor(r1.context.colors.red).underline(), r1.write(n1);\n    }\n    writeWithItems(r1) {\n        let { colors: n1 } = r1.context;\n        r1.writeLine(\"[\").withIndent(()=>r1.writeJoined(bt, this.items).newLine()).write(\"]\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(n1.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar _s = \": \", Xr = class {\n    constructor(t1, r1){\n        this.name = t1;\n        this.value = r1;\n        this.hasError = !1;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + _s.length;\n    }\n    write(t1) {\n        let r1 = new ve(this.name);\n        this.hasError && r1.underline().setColor(t1.context.colors.red), t1.write(r1).write(_s).write(this.value);\n    }\n};\nvar Q = class e extends qe {\n    constructor(){\n        super(...arguments);\n        this.fields = {};\n        this.suggestions = [];\n    }\n    addField(r1) {\n        this.fields[r1.name] = r1;\n    }\n    addSuggestion(r1) {\n        this.suggestions.push(r1);\n    }\n    getField(r1) {\n        return this.fields[r1];\n    }\n    getDeepField(r1) {\n        let [n1, ...i1] = r1, o1 = this.getField(n1);\n        if (!o1) return;\n        let s1 = o1;\n        for (let a1 of i1){\n            let l1;\n            if (s1.value instanceof e ? l1 = s1.value.getField(a1) : s1.value instanceof Et && (l1 = s1.value.getField(Number(a1))), !l1) return;\n            s1 = l1;\n        }\n        return s1;\n    }\n    getDeepFieldValue(r1) {\n        return r1.length === 0 ? this : this.getDeepField(r1)?.value;\n    }\n    hasField(r1) {\n        return !!this.getField(r1);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r1) {\n        delete this.fields[r1];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r1) {\n        return this.getField(r1)?.value;\n    }\n    getDeepSubSelectionValue(r1) {\n        let n1 = this;\n        for (let i1 of r1){\n            if (!(n1 instanceof e)) return;\n            let o1 = n1.getSubSelectionValue(i1);\n            if (!o1) return;\n            n1 = o1;\n        }\n        return n1;\n    }\n    getDeepSelectionParent(r1) {\n        let n1 = this.getSelectionParent();\n        if (!n1) return;\n        let i1 = n1;\n        for (let o1 of r1){\n            let s1 = i1.value.getFieldValue(o1);\n            if (!s1 || !(s1 instanceof e)) return;\n            let a1 = s1.getSelectionParent();\n            if (!a1) return;\n            i1 = a1;\n        }\n        return i1;\n    }\n    getSelectionParent() {\n        let r1 = this.getField(\"select\");\n        if (r1?.value instanceof e) return {\n            kind: \"select\",\n            value: r1.value\n        };\n        let n1 = this.getField(\"include\");\n        if (n1?.value instanceof e) return {\n            kind: \"include\",\n            value: n1.value\n        };\n    }\n    getSubSelectionValue(r1) {\n        return this.getSelectionParent()?.value.fields[r1].value;\n    }\n    getPrintWidth() {\n        let r1 = Object.values(this.fields);\n        return r1.length == 0 ? 2 : Math.max(...r1.map((i1)=>i1.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        let n1 = Object.values(this.fields);\n        if (n1.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithContents(r1, n1);\n    }\n    writeEmpty(r1) {\n        let n1 = new ve(\"{}\");\n        this.hasError && n1.setColor(r1.context.colors.red).underline(), r1.write(n1);\n    }\n    writeWithContents(r1, n1) {\n        r1.writeLine(\"{\").withIndent(()=>{\n            r1.writeJoined(bt, [\n                ...n1,\n                ...this.suggestions\n            ]).newLine();\n        }), r1.write(\"}\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(r1.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar G = class extends qe {\n    constructor(r1){\n        super();\n        this.text = r1;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(r1) {\n        let n1 = new ve(this.text);\n        this.hasError && n1.underline().setColor(r1.context.colors.red), r1.write(n1);\n    }\n};\nvar vi = class {\n    constructor(t1){\n        this.errorMessages = [];\n        this.arguments = t1;\n    }\n    write(t1) {\n        t1.write(this.arguments);\n    }\n    addErrorMessage(t1) {\n        this.errorMessages.push(t1);\n    }\n    renderAllMessages(t1) {\n        return this.errorMessages.map((r1)=>r1(t1)).join(`\n`);\n    }\n};\nfunction en(e1) {\n    return new vi(Ns(e1));\n}\nfunction Ns(e1) {\n    let t1 = new Q;\n    for (let [r1, n1] of Object.entries(e1)){\n        let i1 = new Xr(r1, Ls(n1));\n        t1.addField(i1);\n    }\n    return t1;\n}\nfunction Ls(e1) {\n    if (typeof e1 == \"string\") return new G(JSON.stringify(e1));\n    if (typeof e1 == \"number\" || typeof e1 == \"boolean\") return new G(String(e1));\n    if (typeof e1 == \"bigint\") return new G(`${e1}n`);\n    if (e1 === null) return new G(\"null\");\n    if (e1 === void 0) return new G(\"undefined\");\n    if (ht(e1)) return new G(`new Prisma.Decimal(\"${e1.toFixed()}\")`);\n    if (e1 instanceof Uint8Array) return Buffer.isBuffer(e1) ? new G(`Buffer.alloc(${e1.byteLength})`) : new G(`new Uint8Array(${e1.byteLength})`);\n    if (e1 instanceof Date) {\n        let t1 = Br(e1) ? e1.toISOString() : \"Invalid Date\";\n        return new G(`new Date(\"${t1}\")`);\n    }\n    return e1 instanceof xe ? new G(`Prisma.${e1._getName()}`) : xt(e1) ? new G(`prisma.${lo(e1.modelName)}.$fields.${e1.name}`) : Array.isArray(e1) ? ip(e1) : typeof e1 == \"object\" ? Ns(e1) : new G(Object.prototype.toString.call(e1));\n}\nfunction ip(e1) {\n    let t1 = new Et;\n    for (let r1 of e1)t1.addItem(Ls(r1));\n    return t1;\n}\nfunction $s(e1) {\n    if (e1 === void 0) return \"\";\n    let t1 = en(e1);\n    return new mt(0, {\n        colors: Zr\n    }).write(t1).toString();\n}\nvar Wt = \"<unknown>\";\nfunction qs(e1) {\n    var t1 = e1.split(`\n`);\n    return t1.reduce(function(r1, n1) {\n        var i1 = ap(n1) || up(n1) || dp(n1) || yp(n1) || fp(n1);\n        return i1 && r1.push(i1), r1;\n    }, []);\n}\nvar op = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, sp = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction ap(e1) {\n    var t1 = op.exec(e1);\n    if (!t1) return null;\n    var r1 = t1[2] && t1[2].indexOf(\"native\") === 0, n1 = t1[2] && t1[2].indexOf(\"eval\") === 0, i1 = sp.exec(t1[2]);\n    return n1 && i1 != null && (t1[2] = i1[1], t1[3] = i1[2], t1[4] = i1[3]), {\n        file: r1 ? null : t1[2],\n        methodName: t1[1] || Wt,\n        arguments: r1 ? [\n            t1[2]\n        ] : [],\n        lineNumber: t1[3] ? +t1[3] : null,\n        column: t1[4] ? +t1[4] : null\n    };\n}\nvar lp = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction up(e1) {\n    var t1 = lp.exec(e1);\n    return t1 ? {\n        file: t1[2],\n        methodName: t1[1] || Wt,\n        arguments: [],\n        lineNumber: +t1[3],\n        column: t1[4] ? +t1[4] : null\n    } : null;\n}\nvar cp = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, pp = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction dp(e1) {\n    var t1 = cp.exec(e1);\n    if (!t1) return null;\n    var r1 = t1[3] && t1[3].indexOf(\" > eval\") > -1, n1 = pp.exec(t1[3]);\n    return r1 && n1 != null && (t1[3] = n1[1], t1[4] = n1[2], t1[5] = null), {\n        file: t1[3],\n        methodName: t1[1] || Wt,\n        arguments: t1[2] ? t1[2].split(\",\") : [],\n        lineNumber: t1[4] ? +t1[4] : null,\n        column: t1[5] ? +t1[5] : null\n    };\n}\nvar mp = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction fp(e1) {\n    var t1 = mp.exec(e1);\n    return t1 ? {\n        file: t1[3],\n        methodName: t1[1] || Wt,\n        arguments: [],\n        lineNumber: +t1[4],\n        column: t1[5] ? +t1[5] : null\n    } : null;\n}\nvar gp = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction yp(e1) {\n    var t1 = gp.exec(e1);\n    return t1 ? {\n        file: t1[2],\n        methodName: t1[1] || Wt,\n        arguments: [],\n        lineNumber: +t1[3],\n        column: t1[4] ? +t1[4] : null\n    } : null;\n}\nvar Ti = class {\n    getLocation() {\n        return null;\n    }\n}, Ci = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let t1 = this._error.stack;\n        if (!t1) return null;\n        let n1 = qs(t1).find((i1)=>{\n            if (!i1.file) return !1;\n            let o1 = ni(i1.file);\n            return o1 !== \"<anonymous>\" && !o1.includes(\"@prisma\") && !o1.includes(\"/packages/client/src/runtime/\") && !o1.endsWith(\"/runtime/binary.js\") && !o1.endsWith(\"/runtime/library.js\") && !o1.endsWith(\"/runtime/edge.js\") && !o1.endsWith(\"/runtime/edge-esm.js\") && !o1.startsWith(\"internal/\") && !i1.methodName.includes(\"new \") && !i1.methodName.includes(\"getCallSite\") && !i1.methodName.includes(\"Proxy.\") && i1.methodName.split(\".\").length < 4;\n        });\n        return !n1 || !n1.file ? null : {\n            fileName: n1.file,\n            lineNumber: n1.lineNumber,\n            columnNumber: n1.column\n        };\n    }\n};\nfunction Ve(e1) {\n    return e1 === \"minimal\" ? new Ti : new Ci;\n}\nvar Vs = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction wt(e1 = {}) {\n    let t1 = xp(e1);\n    return Object.entries(t1).reduce((n1, [i1, o1])=>(Vs[i1] !== void 0 ? n1.select[i1] = {\n            select: o1\n        } : n1[i1] = o1, n1), {\n        select: {}\n    });\n}\nfunction xp(e1 = {}) {\n    return typeof e1._count == \"boolean\" ? {\n        ...e1,\n        _count: {\n            _all: e1._count\n        }\n    } : e1;\n}\nfunction tn(e1 = {}) {\n    return (t1)=>(typeof e1._count == \"boolean\" && (t1._count = t1._count._all), t1);\n}\nfunction js(e1, t1) {\n    let r1 = tn(e1);\n    return t1({\n        action: \"aggregate\",\n        unpacker: r1,\n        argsMapper: wt\n    })(e1);\n}\nfunction bp(e1 = {}) {\n    let { select: t1, ...r1 } = e1;\n    return typeof t1 == \"object\" ? wt({\n        ...r1,\n        _count: t1\n    }) : wt({\n        ...r1,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Ep(e1 = {}) {\n    return typeof e1.select == \"object\" ? (t1)=>tn(e1)(t1)._count : (t1)=>tn(e1)(t1)._count._all;\n}\nfunction Bs(e1, t1) {\n    return t1({\n        action: \"count\",\n        unpacker: Ep(e1),\n        argsMapper: bp\n    })(e1);\n}\nfunction wp(e1 = {}) {\n    let t1 = wt(e1);\n    if (Array.isArray(t1.by)) for (let r1 of t1.by)typeof r1 == \"string\" && (t1.select[r1] = !0);\n    else typeof t1.by == \"string\" && (t1.select[t1.by] = !0);\n    return t1;\n}\nfunction Pp(e1 = {}) {\n    return (t1)=>(typeof e1?._count == \"boolean\" && t1.forEach((r1)=>{\n            r1._count = r1._count._all;\n        }), t1);\n}\nfunction Us(e1, t1) {\n    return t1({\n        action: \"groupBy\",\n        unpacker: Pp(e1),\n        argsMapper: wp\n    })(e1);\n}\nfunction Ks(e1, t1, r1) {\n    if (t1 === \"aggregate\") return (n1)=>js(n1, r1);\n    if (t1 === \"count\") return (n1)=>Bs(n1, r1);\n    if (t1 === \"groupBy\") return (n1)=>Us(n1, r1);\n}\nfunction Qs(e1, t1) {\n    let r1 = t1.fields.filter((i1)=>!i1.relationName), n1 = ci(r1, (i1)=>i1.name);\n    return new Proxy({}, {\n        get (i1, o1) {\n            if (o1 in i1 || typeof o1 == \"symbol\") return i1[o1];\n            let s1 = n1[o1];\n            if (s1) return new Ht(e1, o1, s1.type, s1.isList, s1.kind === \"enum\");\n        },\n        ...jr(Object.keys(n1))\n    });\n}\nvar Gs = (e1)=>Array.isArray(e1) ? e1 : e1.split(\".\"), Ai = (e1, t1)=>Gs(t1).reduce((r1, n1)=>r1 && r1[n1], e1), Js = (e1, t1, r1)=>Gs(t1).reduceRight((n1, i1, o1, s1)=>Object.assign({}, Ai(e1, s1.slice(0, o1)), {\n            [i1]: n1\n        }), r1);\nfunction vp(e1, t1) {\n    return e1 === void 0 || t1 === void 0 ? [] : [\n        ...t1,\n        \"select\",\n        e1\n    ];\n}\nfunction Tp(e1, t1, r1) {\n    return t1 === void 0 ? e1 ?? {} : Js(t1, r1, e1 || !0);\n}\nfunction Mi(e1, t1, r1, n1, i1, o1) {\n    let a1 = e1._runtimeDataModel.models[t1].fields.reduce((l1, u1)=>({\n            ...l1,\n            [u1.name]: u1\n        }), {});\n    return (l1)=>{\n        let u1 = Ve(e1._errorFormat), c1 = vp(n1, i1), p1 = Tp(l1, o1, c1), d1 = r1({\n            dataPath: c1,\n            callsite: u1\n        })(p1), f1 = Cp(e1, t1);\n        return new Proxy(d1, {\n            get (y1, g1) {\n                if (!f1.includes(g1)) return y1[g1];\n                let T1 = [\n                    a1[g1].type,\n                    r1,\n                    g1\n                ], C1 = [\n                    c1,\n                    p1\n                ];\n                return Mi(e1, ...T1, ...C1);\n            },\n            ...jr([\n                ...f1,\n                ...Object.getOwnPropertyNames(d1)\n            ])\n        });\n    };\n}\nfunction Cp(e1, t1) {\n    return e1._runtimeDataModel.models[t1].fields.filter((r1)=>r1.kind === \"object\").map((r1)=>r1.name);\n}\nvar Xs = S(ii());\nvar Zs = S(__webpack_require__(/*! fs */ \"fs\"));\nvar Hs = {\n    keyword: De,\n    entity: De,\n    value: (e1)=>ne(ot(e1)),\n    punctuation: ot,\n    directive: De,\n    function: De,\n    variable: (e1)=>ne(ot(e1)),\n    string: (e1)=>ne(Ge(e1)),\n    boolean: he,\n    number: De,\n    comment: Tr\n};\nvar Ap = (e1)=>e1, rn = {}, Mp = 0, v = {\n    manual: rn.Prism && rn.Prism.manual,\n    disableWorkerMessageHandler: rn.Prism && rn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e1) {\n            if (e1 instanceof ye) {\n                let t1 = e1;\n                return new ye(t1.type, v.util.encode(t1.content), t1.alias);\n            } else return Array.isArray(e1) ? e1.map(v.util.encode) : e1.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e1) {\n            return Object.prototype.toString.call(e1).slice(8, -1);\n        },\n        objId: function(e1) {\n            return e1.__id || Object.defineProperty(e1, \"__id\", {\n                value: ++Mp\n            }), e1.__id;\n        },\n        clone: function e1(t1, r1) {\n            let n1, i1, o1 = v.util.type(t1);\n            switch(r1 = r1 || {}, o1){\n                case \"Object\":\n                    if (i1 = v.util.objId(t1), r1[i1]) return r1[i1];\n                    n1 = {}, r1[i1] = n1;\n                    for(let s1 in t1)t1.hasOwnProperty(s1) && (n1[s1] = e1(t1[s1], r1));\n                    return n1;\n                case \"Array\":\n                    return i1 = v.util.objId(t1), r1[i1] ? r1[i1] : (n1 = [], r1[i1] = n1, t1.forEach(function(s1, a1) {\n                        n1[a1] = e1(s1, r1);\n                    }), n1);\n                default:\n                    return t1;\n            }\n        }\n    },\n    languages: {\n        extend: function(e1, t1) {\n            let r1 = v.util.clone(v.languages[e1]);\n            for(let n1 in t1)r1[n1] = t1[n1];\n            return r1;\n        },\n        insertBefore: function(e1, t1, r1, n1) {\n            n1 = n1 || v.languages;\n            let i1 = n1[e1], o1 = {};\n            for(let a1 in i1)if (i1.hasOwnProperty(a1)) {\n                if (a1 == t1) for(let l1 in r1)r1.hasOwnProperty(l1) && (o1[l1] = r1[l1]);\n                r1.hasOwnProperty(a1) || (o1[a1] = i1[a1]);\n            }\n            let s1 = n1[e1];\n            return n1[e1] = o1, v.languages.DFS(v.languages, function(a1, l1) {\n                l1 === s1 && a1 != e1 && (this[a1] = o1);\n            }), o1;\n        },\n        DFS: function e1(t1, r1, n1, i1) {\n            i1 = i1 || {};\n            let o1 = v.util.objId;\n            for(let s1 in t1)if (t1.hasOwnProperty(s1)) {\n                r1.call(t1, s1, t1[s1], n1 || s1);\n                let a1 = t1[s1], l1 = v.util.type(a1);\n                l1 === \"Object\" && !i1[o1(a1)] ? (i1[o1(a1)] = !0, e1(a1, r1, null, i1)) : l1 === \"Array\" && !i1[o1(a1)] && (i1[o1(a1)] = !0, e1(a1, r1, s1, i1));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e1, t1, r1) {\n        let n1 = {\n            code: e1,\n            grammar: t1,\n            language: r1\n        };\n        return v.hooks.run(\"before-tokenize\", n1), n1.tokens = v.tokenize(n1.code, n1.grammar), v.hooks.run(\"after-tokenize\", n1), ye.stringify(v.util.encode(n1.tokens), n1.language);\n    },\n    matchGrammar: function(e1, t1, r1, n1, i1, o1, s1) {\n        for(let g1 in r1){\n            if (!r1.hasOwnProperty(g1) || !r1[g1]) continue;\n            if (g1 == s1) return;\n            let P1 = r1[g1];\n            P1 = v.util.type(P1) === \"Array\" ? P1 : [\n                P1\n            ];\n            for(let T1 = 0; T1 < P1.length; ++T1){\n                let C1 = P1[T1], x1 = C1.inside, M1 = !!C1.lookbehind, ce1 = !!C1.greedy, J1 = 0, Ke1 = C1.alias;\n                if (ce1 && !C1.pattern.global) {\n                    let $1 = C1.pattern.toString().match(/[imuy]*$/)[0];\n                    C1.pattern = RegExp(C1.pattern.source, $1 + \"g\");\n                }\n                C1 = C1.pattern || C1;\n                for(let $1 = n1, z1 = i1; $1 < t1.length; z1 += t1[$1].length, ++$1){\n                    let Ae1 = t1[$1];\n                    if (t1.length > e1.length) return;\n                    if (Ae1 instanceof ye) continue;\n                    if (ce1 && $1 != t1.length - 1) {\n                        C1.lastIndex = z1;\n                        var p1 = C1.exec(e1);\n                        if (!p1) break;\n                        var c1 = p1.index + (M1 ? p1[1].length : 0), d1 = p1.index + p1[0].length, a1 = $1, l1 = z1;\n                        for(let k1 = t1.length; a1 < k1 && (l1 < d1 || !t1[a1].type && !t1[a1 - 1].greedy); ++a1)l1 += t1[a1].length, c1 >= l1 && (++$1, z1 = l1);\n                        if (t1[$1] instanceof ye) continue;\n                        u1 = a1 - $1, Ae1 = e1.slice(z1, l1), p1.index -= z1;\n                    } else {\n                        C1.lastIndex = 0;\n                        var p1 = C1.exec(Ae1), u1 = 1;\n                    }\n                    if (!p1) {\n                        if (o1) break;\n                        continue;\n                    }\n                    M1 && (J1 = p1[1] ? p1[1].length : 0);\n                    var c1 = p1.index + J1, p1 = p1[0].slice(J1), d1 = c1 + p1.length, f1 = Ae1.slice(0, c1), y1 = Ae1.slice(d1);\n                    let Y1 = [\n                        $1,\n                        u1\n                    ];\n                    f1 && (++$1, z1 += f1.length, Y1.push(f1));\n                    let tt1 = new ye(g1, x1 ? v.tokenize(p1, x1) : p1, Ke1, p1, ce1);\n                    if (Y1.push(tt1), y1 && Y1.push(y1), Array.prototype.splice.apply(t1, Y1), u1 != 1 && v.matchGrammar(e1, t1, r1, $1, z1, !0, g1), o1) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e1, t1) {\n        let r1 = [\n            e1\n        ], n1 = t1.rest;\n        if (n1) {\n            for(let i1 in n1)t1[i1] = n1[i1];\n            delete t1.rest;\n        }\n        return v.matchGrammar(e1, r1, t1, 0, 0, !1), r1;\n    },\n    hooks: {\n        all: {},\n        add: function(e1, t1) {\n            let r1 = v.hooks.all;\n            r1[e1] = r1[e1] || [], r1[e1].push(t1);\n        },\n        run: function(e1, t1) {\n            let r1 = v.hooks.all[e1];\n            if (!(!r1 || !r1.length)) for(var n1 = 0, i1; i1 = r1[n1++];)i1(t1);\n        }\n    },\n    Token: ye\n};\nv.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nv.languages.javascript = v.languages.extend(\"clike\", {\n    \"class-name\": [\n        v.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nv.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nv.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nv.languages.markup && v.languages.markup.tag.addInlined(\"script\", \"javascript\");\nv.languages.js = v.languages.javascript;\nv.languages.typescript = v.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nv.languages.ts = v.languages.typescript;\nfunction ye(e1, t1, r1, n1, i1) {\n    this.type = e1, this.content = t1, this.alias = r1, this.length = (n1 || \"\").length | 0, this.greedy = !!i1;\n}\nye.stringify = function(e1, t1) {\n    return typeof e1 == \"string\" ? e1 : Array.isArray(e1) ? e1.map(function(r1) {\n        return ye.stringify(r1, t1);\n    }).join(\"\") : Rp(e1.type)(e1.content);\n};\nfunction Rp(e1) {\n    return Hs[e1] || Ap;\n}\nfunction Ws(e1) {\n    return Sp(e1, v.languages.javascript);\n}\nfunction Sp(e1, t1) {\n    return v.tokenize(e1, t1).map((n1)=>ye.stringify(n1)).join(\"\");\n}\nvar zs = S(es());\nfunction Ys(e1) {\n    return (0, zs.default)(e1);\n}\nvar nn = class e {\n    static read(t1) {\n        let r1;\n        try {\n            r1 = Zs.default.readFileSync(t1, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(r1);\n    }\n    static fromContent(t1) {\n        let r1 = t1.split(/\\r?\\n/);\n        return new e(1, r1);\n    }\n    constructor(t1, r1){\n        this.firstLineNumber = t1, this.lines = r1;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(t1, r1) {\n        if (t1 < this.firstLineNumber || t1 > this.lines.length + this.firstLineNumber) return this;\n        let n1 = t1 - this.firstLineNumber, i1 = [\n            ...this.lines\n        ];\n        return i1[n1] = r1(i1[n1]), new e(this.firstLineNumber, i1);\n    }\n    mapLines(t1) {\n        return new e(this.firstLineNumber, this.lines.map((r1, n1)=>t1(r1, this.firstLineNumber + n1)));\n    }\n    lineAt(t1) {\n        return this.lines[t1 - this.firstLineNumber];\n    }\n    prependSymbolAt(t1, r1) {\n        return this.mapLines((n1, i1)=>i1 === t1 ? `${r1} ${n1}` : `  ${n1}`);\n    }\n    slice(t1, r1) {\n        let n1 = this.lines.slice(t1 - 1, r1).join(`\n`);\n        return new e(t1, Ys(n1).split(`\n`));\n    }\n    highlight() {\n        let t1 = Ws(this.toString());\n        return new e(this.firstLineNumber, t1.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar Ip = {\n    red: me,\n    gray: Tr,\n    dim: Fe,\n    bold: ne,\n    underline: te,\n    highlightSource: (e1)=>e1.highlight()\n}, kp = {\n    red: (e1)=>e1,\n    gray: (e1)=>e1,\n    dim: (e1)=>e1,\n    bold: (e1)=>e1,\n    underline: (e1)=>e1,\n    highlightSource: (e1)=>e1\n};\nfunction Fp({ callsite: e1, message: t1, originalMethod: r1, isPanic: n1, callArguments: i1 }, o1) {\n    let s1 = {\n        functionName: `prisma.${r1}()`,\n        message: t1,\n        isPanic: n1 ?? !1,\n        callArguments: i1\n    };\n    if (!e1 || \"undefined\" < \"u\" || \"development\" === \"production\") return s1;\n    let a1 = e1.getLocation();\n    if (!a1 || !a1.lineNumber || !a1.columnNumber) return s1;\n    let l1 = Math.max(1, a1.lineNumber - 3), u1 = nn.read(a1.fileName)?.slice(l1, a1.lineNumber), c1 = u1?.lineAt(a1.lineNumber);\n    if (u1 && c1) {\n        let p1 = Op(c1), d1 = Dp(c1);\n        if (!d1) return s1;\n        s1.functionName = `${d1.code})`, s1.location = a1, n1 || (u1 = u1.mapLineAt(a1.lineNumber, (y1)=>y1.slice(0, d1.openingBraceIndex))), u1 = o1.highlightSource(u1);\n        let f1 = String(u1.lastLineNumber).length;\n        if (s1.contextLines = u1.mapLines((y1, g1)=>o1.gray(String(g1).padStart(f1)) + \" \" + y1).mapLines((y1)=>o1.dim(y1)).prependSymbolAt(a1.lineNumber, o1.bold(o1.red(\"→\"))), i1) {\n            let y1 = p1 + f1 + 1;\n            y1 += 2, s1.callArguments = (0, Xs.default)(i1, y1).slice(y1);\n        }\n    }\n    return s1;\n}\nfunction Dp(e1) {\n    let t1 = Object.keys(pe.ModelAction).join(\"|\"), n1 = new RegExp(String.raw`\\.(${t1})\\(`).exec(e1);\n    if (n1) {\n        let i1 = n1.index + n1[0].length, o1 = e1.lastIndexOf(\" \", n1.index) + 1;\n        return {\n            code: e1.slice(o1, i1),\n            openingBraceIndex: i1\n        };\n    }\n    return null;\n}\nfunction Op(e1) {\n    let t1 = 0;\n    for(let r1 = 0; r1 < e1.length; r1++){\n        if (e1.charAt(r1) !== \" \") return t1;\n        t1++;\n    }\n    return t1;\n}\nfunction _p({ functionName: e1, location: t1, message: r1, isPanic: n1, contextLines: i1, callArguments: o1 }, s1) {\n    let a1 = [\n        \"\"\n    ], l1 = t1 ? \" in\" : \":\";\n    if (n1 ? (a1.push(s1.red(`Oops, an unknown error occurred! This is ${s1.bold(\"on us\")}, you did nothing wrong.`)), a1.push(s1.red(`It occurred in the ${s1.bold(`\\`${e1}\\``)} invocation${l1}`))) : a1.push(s1.red(`Invalid ${s1.bold(`\\`${e1}\\``)} invocation${l1}`)), t1 && a1.push(s1.underline(Np(t1))), i1) {\n        a1.push(\"\");\n        let u1 = [\n            i1.toString()\n        ];\n        o1 && (u1.push(o1), u1.push(s1.dim(\")\"))), a1.push(u1.join(\"\")), o1 && a1.push(\"\");\n    } else a1.push(\"\"), o1 && a1.push(o1), a1.push(\"\");\n    return a1.push(r1), a1.join(`\n`);\n}\nfunction Np(e1) {\n    let t1 = [\n        e1.fileName\n    ];\n    return e1.lineNumber && t1.push(String(e1.lineNumber)), e1.columnNumber && t1.push(String(e1.columnNumber)), t1.join(\":\");\n}\nfunction Pt(e1) {\n    let t1 = e1.showColors ? Ip : kp, r1 = Fp(e1, t1);\n    return _p(r1, t1);\n}\nfunction ea(e1, t1, r1, n1) {\n    return e1 === pe.ModelAction.findFirstOrThrow || e1 === pe.ModelAction.findUniqueOrThrow ? Lp(t1, r1, n1) : n1;\n}\nfunction Lp(e1, t1, r1) {\n    return async (n1)=>{\n        if (\"rejectOnNotFound\" in n1.args) {\n            let o1 = Pt({\n                originalMethod: n1.clientMethod,\n                callsite: n1.callsite,\n                message: \"'rejectOnNotFound' option is not supported\"\n            });\n            throw new X(o1, {\n                clientVersion: t1\n            });\n        }\n        return await r1(n1).catch((o1)=>{\n            throw o1 instanceof U && o1.code === \"P2025\" ? new Me(`No ${e1} found`, t1) : o1;\n        });\n    };\n}\nfunction Te(e1) {\n    return e1.replace(/^./, (t1)=>t1.toLowerCase());\n}\nvar $p = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], qp = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction Ri(e1, t1) {\n    let r1 = e1._extensions.getAllModelExtensions(t1) ?? {}, n1 = [\n        Vp(e1, t1),\n        Bp(e1, t1),\n        Qt(r1),\n        re(\"name\", ()=>t1),\n        re(\"$name\", ()=>t1),\n        re(\"$parent\", ()=>e1._appliedParent)\n    ];\n    return Ee({}, n1);\n}\nfunction Vp(e1, t1) {\n    let r1 = Te(t1), n1 = Object.keys(pe.ModelAction).concat(\"count\");\n    return {\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = i1, s1 = (l1)=>e1._request(l1);\n            s1 = ea(o1, t1, e1._clientVersion, s1);\n            let a1 = (l1)=>(u1)=>{\n                    let c1 = Ve(e1._errorFormat);\n                    return e1._createPrismaPromise((p1)=>{\n                        let d1 = {\n                            args: u1,\n                            dataPath: [],\n                            action: o1,\n                            model: t1,\n                            clientMethod: `${r1}.${i1}`,\n                            jsModelName: r1,\n                            transaction: p1,\n                            callsite: c1\n                        };\n                        return s1({\n                            ...d1,\n                            ...l1\n                        });\n                    });\n                };\n            return $p.includes(o1) ? Mi(e1, t1, a1) : jp(i1) ? Ks(e1, i1, a1) : a1({});\n        }\n    };\n}\nfunction jp(e1) {\n    return qp.includes(e1);\n}\nfunction Bp(e1, t1) {\n    return We(re(\"fields\", ()=>{\n        let r1 = e1._runtimeDataModel.models[t1];\n        return Qs(t1, r1);\n    }));\n}\nfunction ta(e1) {\n    return e1.replace(/^./, (t1)=>t1.toUpperCase());\n}\nvar Si = Symbol();\nfunction zt(e1) {\n    let t1 = [\n        Up(e1),\n        re(Si, ()=>e1),\n        re(\"$parent\", ()=>e1._appliedParent)\n    ], r1 = e1._extensions.getAllClientExtensions();\n    return r1 && t1.push(Qt(r1)), Ee(e1, t1);\n}\nfunction Up(e1) {\n    let t1 = Object.keys(e1._runtimeDataModel.models), r1 = t1.map(Te), n1 = [\n        ...new Set(t1.concat(r1))\n    ];\n    return We({\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = ta(i1);\n            if (e1._runtimeDataModel.models[o1] !== void 0) return Ri(e1, o1);\n            if (e1._runtimeDataModel.models[i1] !== void 0) return Ri(e1, i1);\n        },\n        getPropertyDescriptor (i1) {\n            if (!r1.includes(i1)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction on(e1) {\n    return e1[Si] ? e1[Si] : e1;\n}\nfunction ra(e1) {\n    if (typeof e1 == \"function\") return e1(this);\n    let t1 = on(this), r1 = Object.create(t1, {\n        _extensions: {\n            value: this._extensions.append(e1)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return zt(r1);\n}\nfunction na({ result: e1, modelName: t1, select: r1, extensions: n1 }) {\n    let i1 = n1.getAllComputedFields(t1);\n    if (!i1) return e1;\n    let o1 = [], s1 = [];\n    for (let a1 of Object.values(i1)){\n        if (r1) {\n            if (!r1[a1.name]) continue;\n            let l1 = a1.needs.filter((u1)=>!r1[u1]);\n            l1.length > 0 && s1.push(Gt(l1));\n        }\n        Kp(e1, a1.needs) && o1.push(Qp(a1, Ee(e1, o1)));\n    }\n    return o1.length > 0 || s1.length > 0 ? Ee(e1, [\n        ...o1,\n        ...s1\n    ]) : e1;\n}\nfunction Kp(e1, t1) {\n    return t1.every((r1)=>ui(e1, r1));\n}\nfunction Qp(e1, t1) {\n    return We(re(e1.name, ()=>e1.compute(t1)));\n}\nfunction sn({ visitor: e1, result: t1, args: r1, runtimeDataModel: n1, modelName: i1 }) {\n    if (Array.isArray(t1)) {\n        for(let s1 = 0; s1 < t1.length; s1++)t1[s1] = sn({\n            result: t1[s1],\n            args: r1,\n            modelName: i1,\n            runtimeDataModel: n1,\n            visitor: e1\n        });\n        return t1;\n    }\n    let o1 = e1(t1, i1, r1) ?? t1;\n    return r1.include && ia({\n        includeOrSelect: r1.include,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), r1.select && ia({\n        includeOrSelect: r1.select,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), o1;\n}\nfunction ia({ includeOrSelect: e1, result: t1, parentModelName: r1, runtimeDataModel: n1, visitor: i1 }) {\n    for (let [o1, s1] of Object.entries(e1)){\n        if (!s1 || t1[o1] == null) continue;\n        let l1 = n1.models[r1].fields.find((c1)=>c1.name === o1);\n        if (!l1 || l1.kind !== \"object\" || !l1.relationName) continue;\n        let u1 = typeof s1 == \"object\" ? s1 : {};\n        t1[o1] = sn({\n            visitor: i1,\n            result: t1[o1],\n            args: u1,\n            modelName: l1.type,\n            runtimeDataModel: n1\n        });\n    }\n}\nfunction oa({ result: e1, modelName: t1, args: r1, extensions: n1, runtimeDataModel: i1 }) {\n    return n1.isEmpty() || e1 == null || typeof e1 != \"object\" || !i1.models[t1] ? e1 : sn({\n        result: e1,\n        args: r1 ?? {},\n        modelName: t1,\n        runtimeDataModel: i1,\n        visitor: (s1, a1, l1)=>na({\n                result: s1,\n                modelName: Te(a1),\n                select: l1.select,\n                extensions: n1\n            })\n    });\n}\nfunction sa(e1) {\n    if (e1 instanceof oe) return Gp(e1);\n    if (Array.isArray(e1)) {\n        let r1 = [\n            e1[0]\n        ];\n        for(let n1 = 1; n1 < e1.length; n1++)r1[n1] = Yt(e1[n1]);\n        return r1;\n    }\n    let t1 = {};\n    for(let r1 in e1)t1[r1] = Yt(e1[r1]);\n    return t1;\n}\nfunction Gp(e1) {\n    return new oe(e1.strings, e1.values);\n}\nfunction Yt(e1) {\n    if (typeof e1 != \"object\" || e1 == null || e1 instanceof xe || xt(e1)) return e1;\n    if (ht(e1)) return new Pe(e1.toFixed());\n    if (ft(e1)) return new Date(+e1);\n    if (ArrayBuffer.isView(e1)) return e1.slice(0);\n    if (Array.isArray(e1)) {\n        let t1 = e1.length, r1;\n        for(r1 = Array(t1); t1--;)r1[t1] = Yt(e1[t1]);\n        return r1;\n    }\n    if (typeof e1 == \"object\") {\n        let t1 = {};\n        for(let r1 in e1)r1 === \"__proto__\" ? Object.defineProperty(t1, r1, {\n            value: Yt(e1[r1]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : t1[r1] = Yt(e1[r1]);\n        return t1;\n    }\n    He(e1, \"Unknown value\");\n}\nfunction la(e1, t1, r1, n1 = 0) {\n    return e1._createPrismaPromise((i1)=>{\n        let o1 = t1.customDataProxyFetch;\n        return \"transaction\" in t1 && i1 !== void 0 && (t1.transaction?.kind === \"batch\" && t1.transaction.lock.then(), t1.transaction = i1), n1 === r1.length ? e1._executeRequest(t1) : r1[n1]({\n            model: t1.model,\n            operation: t1.model ? t1.action : t1.clientMethod,\n            args: sa(t1.args ?? {}),\n            __internalParams: t1,\n            query: (s1, a1 = t1)=>{\n                let l1 = a1.customDataProxyFetch;\n                return a1.customDataProxyFetch = da(o1, l1), a1.args = s1, la(e1, a1, r1, n1 + 1);\n            }\n        });\n    });\n}\nfunction ua(e1, t1) {\n    let { jsModelName: r1, action: n1, clientMethod: i1 } = t1, o1 = r1 ? n1 : i1;\n    if (e1._extensions.isEmpty()) return e1._executeRequest(t1);\n    let s1 = e1._extensions.getAllQueryCallbacks(r1 ?? \"$none\", o1);\n    return la(e1, t1, s1);\n}\nfunction ca(e1) {\n    return (t1)=>{\n        let r1 = {\n            requests: t1\n        }, n1 = t1[0].extensions.getAllBatchQueryCallbacks();\n        return n1.length ? pa(r1, n1, 0, e1) : e1(r1);\n    };\n}\nfunction pa(e1, t1, r1, n1) {\n    if (r1 === t1.length) return n1(e1);\n    let i1 = e1.customDataProxyFetch, o1 = e1.requests[0].transaction;\n    return t1[r1]({\n        args: {\n            queries: e1.requests.map((s1)=>({\n                    model: s1.modelName,\n                    operation: s1.action,\n                    args: s1.args\n                })),\n            transaction: o1 ? {\n                isolationLevel: o1.kind === \"batch\" ? o1.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e1,\n        query (s1, a1 = e1) {\n            let l1 = a1.customDataProxyFetch;\n            return a1.customDataProxyFetch = da(i1, l1), pa(a1, t1, r1 + 1, n1);\n        }\n    });\n}\nvar aa = (e1)=>e1;\nfunction da(e1 = aa, t1 = aa) {\n    return (r1)=>e1(t1(r1));\n}\nfunction fa(e1, t1, r1) {\n    let n1 = Te(r1);\n    return !t1.result || !(t1.result.$allModels || t1.result[n1]) ? e1 : Jp({\n        ...e1,\n        ...ma(t1.name, e1, t1.result.$allModels),\n        ...ma(t1.name, e1, t1.result[n1])\n    });\n}\nfunction Jp(e1) {\n    let t1 = new be, r1 = (n1, i1)=>t1.getOrCreate(n1, ()=>i1.has(n1) ? [\n                n1\n            ] : (i1.add(n1), e1[n1] ? e1[n1].needs.flatMap((o1)=>r1(o1, i1)) : [\n                n1\n            ]));\n    return pt(e1, (n1)=>({\n            ...n1,\n            needs: r1(n1.name, new Set)\n        }));\n}\nfunction ma(e1, t1, r1) {\n    return r1 ? pt(r1, ({ needs: n1, compute: i1 }, o1)=>({\n            name: o1,\n            needs: n1 ? Object.keys(n1).filter((s1)=>n1[s1]) : [],\n            compute: Hp(t1, o1, i1)\n        })) : {};\n}\nfunction Hp(e1, t1, r1) {\n    let n1 = e1?.[t1]?.compute;\n    return n1 ? (i1)=>r1({\n            ...i1,\n            [t1]: n1(i1)\n        }) : r1;\n}\nfunction ga(e1, t1) {\n    if (!t1) return e1;\n    let r1 = {\n        ...e1\n    };\n    for (let n1 of Object.values(t1))if (e1[n1.name]) for (let i1 of n1.needs)r1[i1] = !0;\n    return r1;\n}\nvar an = class {\n    constructor(t1, r1){\n        this.extension = t1;\n        this.previous = r1;\n        this.computedFieldsCache = new be;\n        this.modelExtensionsCache = new be;\n        this.queryCallbacksCache = new be;\n        this.clientExtensions = Vt(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = Vt(()=>{\n            let t1 = this.previous?.getAllBatchQueryCallbacks() ?? [], r1 = this.extension.query?.$__internalBatch;\n            return r1 ? t1.concat(r1) : t1;\n        });\n    }\n    getAllComputedFields(t1) {\n        return this.computedFieldsCache.getOrCreate(t1, ()=>fa(this.previous?.getAllComputedFields(t1), this.extension, t1));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(t1) {\n        return this.modelExtensionsCache.getOrCreate(t1, ()=>{\n            let r1 = Te(t1);\n            return !this.extension.model || !(this.extension.model[r1] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t1) : {\n                ...this.previous?.getAllModelExtensions(t1),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[r1]\n            };\n        });\n    }\n    getAllQueryCallbacks(t1, r1) {\n        return this.queryCallbacksCache.getOrCreate(`${t1}:${r1}`, ()=>{\n            let n1 = this.previous?.getAllQueryCallbacks(t1, r1) ?? [], i1 = [], o1 = this.extension.query;\n            return !o1 || !(o1[t1] || o1.$allModels || o1[r1] || o1.$allOperations) ? n1 : (o1[t1] !== void 0 && (o1[t1][r1] !== void 0 && i1.push(o1[t1][r1]), o1[t1].$allOperations !== void 0 && i1.push(o1[t1].$allOperations)), t1 !== \"$none\" && o1.$allModels !== void 0 && (o1.$allModels[r1] !== void 0 && i1.push(o1.$allModels[r1]), o1.$allModels.$allOperations !== void 0 && i1.push(o1.$allModels.$allOperations)), o1[r1] !== void 0 && i1.push(o1[r1]), o1.$allOperations !== void 0 && i1.push(o1.$allOperations), n1.concat(i1));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, ln = class e {\n    constructor(t1){\n        this.head = t1;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(t1) {\n        return new e(new an(t1));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(t1) {\n        return new e(new an(t1, this.head));\n    }\n    getAllComputedFields(t1) {\n        return this.head?.getAllComputedFields(t1);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(t1) {\n        return this.head?.getAllModelExtensions(t1);\n    }\n    getAllQueryCallbacks(t1, r1) {\n        return this.head?.getAllQueryCallbacks(t1, r1) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar ya = O(\"prisma:client\"), ha = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction xa({ postinstall: e1, ciName: t1, clientVersion: r1 }) {\n    if (ya(\"checkPlatformCaching:postinstall\", e1), ya(\"checkPlatformCaching:ciName\", t1), e1 === !0 && t1 && t1 in ha) {\n        let n1 = `Prisma has detected that this project was built on ${t1}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${ha[t1]}-build`;\n        throw console.error(n1), new F(n1, r1);\n    }\n}\nfunction ba(e1, t1) {\n    return e1 ? e1.datasources ? e1.datasources : e1.datasourceUrl ? {\n        [t1[0]]: {\n            url: e1.datasourceUrl\n        }\n    } : {} : {};\n}\nfunction Zt({ error: e1, user_facing_error: t1 }, r1) {\n    return t1.error_code ? new U(t1.message, {\n        code: t1.error_code,\n        clientVersion: r1,\n        meta: t1.meta,\n        batchRequestIdx: t1.batch_request_idx\n    }) : new K(e1, {\n        clientVersion: r1,\n        batchRequestIdx: t1.batch_request_idx\n    });\n}\nvar vt = class {\n};\nvar Ta = S(__webpack_require__(/*! fs */ \"fs\")), Xt = S(__webpack_require__(/*! path */ \"path\"));\nfunction un(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `Add \"${t1}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Wp(e1)}`;\n}\nfunction Wp(e1) {\n    let { generator: t1, generatorBinaryTargets: r1, runtimeBinaryTarget: n1 } = e1, i1 = {\n        fromEnvVar: null,\n        value: n1\n    }, o1 = [\n        ...r1,\n        i1\n    ];\n    return si({\n        ...t1,\n        binaryTargets: o1\n    });\n}\nfunction je(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `Prisma Client could not locate the Query Engine for runtime \"${t1}\".`;\n}\nfunction Be(e1) {\n    let { searchedLocations: t1 } = e1;\n    return `The following locations have been searched:\n${[\n        ...new Set(t1)\n    ].map((i1)=>`  ${i1}`).join(`\n`)}`;\n}\nfunction Ea(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `${je(e1)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${t1}\".\n${un(e1)}\n\n${Be(e1)}`;\n}\nfunction cn(e1) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e1}`;\n}\nfunction wa(e1) {\n    let { queryEngineName: t1 } = e1;\n    return `${je(e1)}\n\nThis is likely caused by a bundler that has not copied \"${t1}\" next to the resulting bundle.\nEnsure that \"${t1}\" has been copied next to the bundle or in \"${e1.expectedLocation}\".\n\n${cn(\"engine-not-found-bundler-investigation\")}\n\n${Be(e1)}`;\n}\nfunction Pa(e1) {\n    let { runtimeBinaryTarget: t1, generatorBinaryTargets: r1 } = e1, n1 = r1.find((i1)=>i1.native);\n    return `${je(e1)}\n\nThis happened because Prisma Client was generated for \"${n1?.value ?? \"unknown\"}\", but the actual deployment required \"${t1}\".\n${un(e1)}\n\n${Be(e1)}`;\n}\nfunction va(e1) {\n    let { queryEngineName: t1 } = e1;\n    return `${je(e1)}\n\nThis is likely caused by tooling that has not copied \"${t1}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${t1}\" has been copied to \"${e1.expectedLocation}\".\n\n${cn(\"engine-not-found-tooling-investigation\")}\n\n${Be(e1)}`;\n}\nvar zp = O(\"prisma:client:engines:resolveEnginePath\"), Yp = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function Ca(e1, t1) {\n    let r1 = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e1] ?? t1.prismaPath;\n    if (r1 !== void 0) return r1;\n    let { enginePath: n1, searchedLocations: i1 } = await Zp(e1, t1);\n    if (zp(\"enginePath\", n1), n1 !== void 0 && e1 === \"binary\" && ti(n1), n1 !== void 0) return t1.prismaPath = n1;\n    let o1 = await ut(), s1 = t1.generator?.binaryTargets ?? [], a1 = s1.some((d1)=>d1.native), l1 = !s1.some((d1)=>d1.value === o1), u1 = __filename.match(Yp()) === null, c1 = {\n        searchedLocations: i1,\n        generatorBinaryTargets: s1,\n        generator: t1.generator,\n        runtimeBinaryTarget: o1,\n        queryEngineName: Aa(e1, o1),\n        expectedLocation: Xt.default.relative(process.cwd(), t1.dirname)\n    }, p1;\n    throw a1 && l1 ? p1 = Pa(c1) : l1 ? p1 = Ea(c1) : u1 ? p1 = wa(c1) : p1 = va(c1), new F(p1, t1.clientVersion);\n}\nasync function Zp(engineType, config) {\n    let binaryTarget = await ut(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        Xt.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        Xt.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(rs());\n    for (let e of searchLocations){\n        let t = Aa(engineType, binaryTarget), r = Xt.default.join(e, t);\n        if (searchedLocations.push(e), Ta.default.existsSync(r)) return {\n            enginePath: r,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction Aa(e1, t1) {\n    return e1 === \"library\" ? jn(t1, \"fs\") : `query-engine-${t1}${t1 === \"windows\" ? \".exe\" : \"\"}`;\n}\nfunction pn(e1, t1) {\n    return {\n        batch: e1,\n        transaction: t1?.kind === \"batch\" ? {\n            isolationLevel: t1.options.isolationLevel\n        } : void 0\n    };\n}\nvar Ii = S(li());\nfunction Ma(e1) {\n    return e1 ? e1.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t1)=>`${t1[0]}5`) : \"\";\n}\nfunction Ra(e1) {\n    return e1.split(`\n`).map((t1)=>t1.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar Sa = S(cs());\nfunction Ia({ title: e1, user: t1 = \"prisma\", repo: r1 = \"prisma\", template: n1 = \"bug_report.md\", body: i1 }) {\n    return (0, Sa.default)({\n        user: t1,\n        repo: r1,\n        template: n1,\n        title: e1,\n        body: i1\n    });\n}\nfunction ka({ version: e1, platform: t1, title: r1, description: n1, engineVersion: i1, database: o1, query: s1 }) {\n    let a1 = bo(6e3 - (s1?.length ?? 0)), l1 = Ra((0, Ii.default)(a1)), u1 = n1 ? `# Description\n\\`\\`\\`\n${n1}\n\\`\\`\\`` : \"\", c1 = (0, Ii.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${t1?.padEnd(19)}|\n| Prisma Client   | ${e1?.padEnd(19)}|\n| Query Engine    | ${i1?.padEnd(19)}|\n| Database        | ${o1?.padEnd(19)}|\n\n${u1}\n\n## Logs\n\\`\\`\\`\n${l1}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s1 ? Ma(s1) : \"\"}\n\\`\\`\\`\n`), p1 = Ia({\n        title: r1,\n        body: c1\n    });\n    return `${r1}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${te(p1)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction dn({ inlineDatasources: e1, overrideDatasources: t1, env: r1, clientVersion: n1 }) {\n    let i1, o1 = Object.keys(e1)[0], s1 = e1[o1]?.url, a1 = t1[o1]?.url;\n    if (o1 === void 0 ? i1 = void 0 : a1 ? i1 = a1 : s1?.value ? i1 = s1.value : s1?.fromEnvVar && (i1 = r1[s1.fromEnvVar]), s1?.fromEnvVar !== void 0 && i1 === void 0) throw new F(`error: Environment variable not found: ${s1.fromEnvVar}.`, n1);\n    if (i1 === void 0) throw new F(\"error: Missing URL environment variable, value, or override.\", n1);\n    return i1;\n}\nvar mn = class extends Error {\n    constructor(r1, n1){\n        super(r1);\n        this.clientVersion = n1.clientVersion, this.cause = n1.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar ae = class extends mn {\n    constructor(r1, n1){\n        super(r1, n1);\n        this.isRetryable = n1.isRetryable ?? !0;\n    }\n};\nfunction R(e1, t1) {\n    return {\n        ...e1,\n        isRetryable: t1\n    };\n}\nvar Tt = class extends ae {\n    constructor(r1){\n        super(\"This request must be retried\", R(r1, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nE(Tt, \"ForcedRetryError\");\nvar Ye = class extends ae {\n    constructor(r1, n1){\n        super(r1, R(n1, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P5002\";\n    }\n};\nE(Ye, \"InvalidDatasourceError\");\nvar Ze = class extends ae {\n    constructor(r1, n1){\n        super(r1, R(n1, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nE(Ze, \"NotImplementedYetError\");\nvar L = class extends ae {\n    constructor(r1, n1){\n        super(r1, n1);\n        this.response = n1.response;\n        let i1 = this.response.headers.get(\"prisma-request-id\");\n        if (i1) {\n            let o1 = `(The request id was: ${i1})`;\n            this.message = this.message + \" \" + o1;\n        }\n    }\n};\nvar Xe = class extends L {\n    constructor(r1){\n        super(\"Schema needs to be uploaded\", R(r1, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nE(Xe, \"SchemaMissingError\");\nvar ki = \"This request could not be understood by the server\", er = class extends L {\n    constructor(r1, n1, i1){\n        super(n1 || ki, R(r1, !1));\n        this.name = \"BadRequestError\";\n        this.code = \"P5000\";\n        i1 && (this.code = i1);\n    }\n};\nE(er, \"BadRequestError\");\nvar tr = class extends L {\n    constructor(r1, n1){\n        super(\"Engine not started: healthcheck timeout\", R(r1, !0));\n        this.name = \"HealthcheckTimeoutError\";\n        this.code = \"P5013\";\n        this.logs = n1;\n    }\n};\nE(tr, \"HealthcheckTimeoutError\");\nvar rr = class extends L {\n    constructor(r1, n1, i1){\n        super(n1, R(r1, !0));\n        this.name = \"EngineStartupError\";\n        this.code = \"P5014\";\n        this.logs = i1;\n    }\n};\nE(rr, \"EngineStartupError\");\nvar nr = class extends L {\n    constructor(r1){\n        super(\"Engine version is not supported\", R(r1, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nE(nr, \"EngineVersionNotSupportedError\");\nvar Fi = \"Request timed out\", ir = class extends L {\n    constructor(r1, n1 = Fi){\n        super(n1, R(r1, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nE(ir, \"GatewayTimeoutError\");\nvar Xp = \"Interactive transaction error\", or = class extends L {\n    constructor(r1, n1 = Xp){\n        super(n1, R(r1, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nE(or, \"InteractiveTransactionError\");\nvar ed = \"Request parameters are invalid\", sr = class extends L {\n    constructor(r1, n1 = ed){\n        super(n1, R(r1, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nE(sr, \"InvalidRequestError\");\nvar Di = \"Requested resource does not exist\", ar = class extends L {\n    constructor(r1, n1 = Di){\n        super(n1, R(r1, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nE(ar, \"NotFoundError\");\nvar Oi = \"Unknown server error\", Ct = class extends L {\n    constructor(r1, n1, i1){\n        super(n1 || Oi, R(r1, !0));\n        this.name = \"ServerError\";\n        this.code = \"P5006\";\n        this.logs = i1;\n    }\n};\nE(Ct, \"ServerError\");\nvar _i = \"Unauthorized, check your connection string\", lr = class extends L {\n    constructor(r1, n1 = _i){\n        super(n1, R(r1, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nE(lr, \"UnauthorizedError\");\nvar Ni = \"Usage exceeded, retry again later\", ur = class extends L {\n    constructor(r1, n1 = Ni){\n        super(n1, R(r1, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nE(ur, \"UsageExceededError\");\nasync function td(e1) {\n    let t1;\n    try {\n        t1 = await e1.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let r1 = JSON.parse(t1);\n        if (typeof r1 == \"string\") switch(r1){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: r1\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: r1\n                };\n        }\n        if (typeof r1 == \"object\" && r1 !== null) {\n            if (\"is_panic\" in r1 && \"message\" in r1 && \"error_code\" in r1) return {\n                type: \"QueryEngineError\",\n                body: r1\n            };\n            if (\"EngineNotStarted\" in r1 || \"InteractiveTransactionMisrouted\" in r1 || \"InvalidRequestError\" in r1) {\n                let n1 = Object.values(r1)[0].reason;\n                return typeof n1 == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n1) ? {\n                    type: \"UnknownJsonError\",\n                    body: r1\n                } : {\n                    type: \"DataProxyError\",\n                    body: r1\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: r1\n        };\n    } catch  {\n        return t1 === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: t1\n        };\n    }\n}\nasync function cr(e1, t1) {\n    if (e1.ok) return;\n    let r1 = {\n        clientVersion: t1,\n        response: e1\n    }, n1 = await td(e1);\n    if (n1.type === \"QueryEngineError\") throw new U(n1.body.message, {\n        code: n1.body.error_code,\n        clientVersion: t1\n    });\n    if (n1.type === \"DataProxyError\") {\n        if (n1.body === \"InternalDataProxyError\") throw new Ct(r1, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n1.body) {\n            if (n1.body.EngineNotStarted.reason === \"SchemaMissing\") return new Xe(r1);\n            if (n1.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new nr(r1);\n            if (\"EngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, logs: o1 } = n1.body.EngineNotStarted.reason.EngineStartupError;\n                throw new rr(r1, i1, o1);\n            }\n            if (\"KnownEngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, error_code: o1 } = n1.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new F(i1, t1, o1);\n            }\n            if (\"HealthcheckTimeout\" in n1.body.EngineNotStarted.reason) {\n                let { logs: i1 } = n1.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new tr(r1, i1);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n1.body) {\n            let i1 = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new or(r1, i1[n1.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n1.body) throw new sr(r1, n1.body.InvalidRequestError.reason);\n    }\n    if (e1.status === 401 || e1.status === 403) throw new lr(r1, At(_i, n1));\n    if (e1.status === 404) return new ar(r1, At(Di, n1));\n    if (e1.status === 429) throw new ur(r1, At(Ni, n1));\n    if (e1.status === 504) throw new ir(r1, At(Fi, n1));\n    if (e1.status >= 500) throw new Ct(r1, At(Oi, n1));\n    if (e1.status >= 400) throw new er(r1, At(ki, n1));\n}\nfunction At(e1, t1) {\n    return t1.type === \"EmptyError\" ? e1 : `${e1}: ${JSON.stringify(t1)}`;\n}\nfunction Fa(e1) {\n    let t1 = Math.pow(2, e1) * 50, r1 = Math.ceil(Math.random() * t1) - Math.ceil(t1 / 2), n1 = t1 + r1;\n    return new Promise((i1)=>setTimeout(()=>i1(n1), n1));\n}\nfunction Da(e1) {\n    if (!!e1.generator?.previewFeatures.some((r1)=>r1.toLowerCase().includes(\"metrics\"))) throw new F(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e1.clientVersion);\n}\nvar Oa = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"5.5.1-1.aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\",\n    \"@swc/core\": \"1.3.95\",\n    \"@swc/jest\": \"0.2.29\",\n    \"@types/jest\": \"29.5.5\",\n    \"@types/node\": \"18.18.3\",\n    execa: \"5.1.1\",\n    jest: \"29.7.0\",\n    typescript: \"5.2.2\"\n};\nvar pr = class extends ae {\n    constructor(r1, n1){\n        super(`Cannot fetch data from service:\n${r1}`, R(n1, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nE(pr, \"RequestError\");\nasync function et(e1, t1, r1 = (n1)=>n1) {\n    let n1 = t1.clientVersion;\n    try {\n        return typeof fetch == \"function\" ? await r1(fetch)(e1, t1) : await r1(Li)(e1, t1);\n    } catch (i1) {\n        console.log(e1);\n        let o1 = i1.message ?? \"Unknown error\";\n        throw new pr(o1, {\n            clientVersion: n1\n        });\n    }\n}\nfunction nd(e1) {\n    return {\n        ...e1.headers,\n        \"Content-Type\": \"application/json\"\n    };\n}\nfunction id(e1) {\n    return {\n        method: e1.method,\n        headers: nd(e1)\n    };\n}\nfunction od(e1, t1) {\n    return {\n        text: ()=>Promise.resolve(Buffer.concat(e1).toString()),\n        json: ()=>Promise.resolve().then(()=>JSON.parse(Buffer.concat(e1).toString())),\n        ok: t1.statusCode >= 200 && t1.statusCode <= 299,\n        status: t1.statusCode,\n        url: t1.url,\n        headers: new $i(t1.headers)\n    };\n}\nasync function Li(e1, t1 = {}) {\n    let r1 = sd(\"https\"), n1 = id(t1), i1 = [], { origin: o1 } = new URL(e1);\n    return new Promise((s1, a1)=>{\n        let l1 = r1.request(e1, n1, (u1)=>{\n            let { statusCode: c1, headers: { location: p1 } } = u1;\n            c1 >= 301 && c1 <= 399 && p1 && (p1.startsWith(\"http\") === !1 ? s1(Li(`${o1}${p1}`, t1)) : s1(Li(p1, t1))), u1.on(\"data\", (d1)=>i1.push(d1)), u1.on(\"end\", ()=>s1(od(i1, u1))), u1.on(\"error\", a1);\n        });\n        l1.on(\"error\", a1), l1.end(t1.body ?? \"\");\n    });\n}\nvar sd = undefined, $i = class {\n    constructor(t1 = {}){\n        this.headers = new Map;\n        for (let [r1, n1] of Object.entries(t1))if (typeof n1 == \"string\") this.headers.set(r1, n1);\n        else if (Array.isArray(n1)) for (let i1 of n1)this.headers.set(r1, i1);\n    }\n    append(t1, r1) {\n        this.headers.set(t1, r1);\n    }\n    delete(t1) {\n        this.headers.delete(t1);\n    }\n    get(t1) {\n        return this.headers.get(t1) ?? null;\n    }\n    has(t1) {\n        return this.headers.has(t1);\n    }\n    set(t1, r1) {\n        this.headers.set(t1, r1);\n    }\n    forEach(t1, r1) {\n        for (let [n1, i1] of this.headers)t1.call(r1, i1, n1, this);\n    }\n};\nvar ad = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, _a = O(\"prisma:client:dataproxyEngine\");\nasync function ld(e1, t1) {\n    let r1 = Oa[\"@prisma/engines-version\"], n1 = t1.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e1.includes(\"accelerate\") && n1 !== \"0.0.0\" && n1 !== \"in-memory\") return n1;\n    let [i1, o1] = n1?.split(\"-\") ?? [];\n    if (o1 === void 0 && ad.test(i1)) return i1;\n    if (o1 !== void 0 || n1 === \"0.0.0\" || n1 === \"in-memory\") {\n        if (e1.startsWith(\"localhost\") || e1.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s1] = r1.split(\"-\") ?? [], [a1, l1, u1] = s1.split(\".\"), c1 = ud(`<=${a1}.${l1}.${u1}`), p1 = await et(c1, {\n            clientVersion: n1\n        });\n        if (!p1.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p1.status} ${p1.statusText}, response body: ${await p1.text() || \"<empty body>\"}`);\n        let d1 = await p1.text();\n        _a(\"length of body fetched from unpkg.com\", d1.length);\n        let f1;\n        try {\n            f1 = JSON.parse(d1);\n        } catch (y1) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d1), y1;\n        }\n        return f1.version;\n    }\n    throw new Ze(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n1\n    });\n}\nasync function Na(e1, t1) {\n    let r1 = await ld(e1, t1);\n    return _a(\"version\", r1), r1;\n}\nfunction ud(e1) {\n    return encodeURI(`https://unpkg.com/prisma@${e1}/package.json`);\n}\nvar La = 3, qi = O(\"prisma:client:dataproxyEngine\"), Vi = class {\n    constructor({ apiKey: t1, tracingHelper: r1, logLevel: n1, logQueries: i1, engineHash: o1 }){\n        this.apiKey = t1, this.tracingHelper = r1, this.logLevel = n1, this.logQueries = i1, this.engineHash = o1;\n    }\n    build({ traceparent: t1, interactiveTransaction: r1 } = {}) {\n        let n1 = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n1.traceparent = t1 ?? this.tracingHelper.getTraceParent()), r1 && (n1[\"X-transaction-id\"] = r1.id);\n        let i1 = this.buildCaptureSettings();\n        return i1.length > 0 && (n1[\"X-capture-telemetry\"] = i1.join(\", \")), n1;\n    }\n    buildCaptureSettings() {\n        let t1 = [];\n        return this.tracingHelper.isEnabled() && t1.push(\"tracing\"), this.logLevel && t1.push(this.logLevel), this.logQueries && t1.push(\"query\"), t1;\n    }\n}, dr = class extends vt {\n    constructor(r1){\n        super();\n        Da(r1), this.config = r1, this.env = {\n            ...this.config.env,\n            ...process.env\n        }, this.inlineSchema = r1.inlineSchema, this.inlineDatasources = r1.inlineDatasources, this.inlineSchemaHash = r1.inlineSchemaHash, this.clientVersion = r1.clientVersion, this.engineHash = r1.engineVersion, this.logEmitter = r1.logEmitter, this.tracingHelper = this.config.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [r1, n1] = this.extractHostAndApiKey();\n            this.host = r1, this.headerBuilder = new Vi({\n                apiKey: n1,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await Na(r1, this.config), qi(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r1) {\n        r1?.logs?.length && r1.logs.forEach((n1)=>{\n            switch(n1.level){\n                case \"debug\":\n                case \"error\":\n                case \"trace\":\n                case \"warn\":\n                case \"info\":\n                    break;\n                case \"query\":\n                    {\n                        let i1 = typeof n1.attributes.query == \"string\" ? n1.attributes.query : \"\";\n                        if (!this.tracingHelper.isEnabled()) {\n                            let [o1] = i1.split(\"/* traceparent\");\n                            i1 = o1;\n                        }\n                        this.logEmitter.emit(\"query\", {\n                            query: i1,\n                            timestamp: n1.timestamp,\n                            duration: n1.attributes.duration_ms,\n                            params: n1.attributes.params,\n                            target: n1.attributes.target\n                        });\n                    }\n            }\n        }), r1?.traces?.length && this.tracingHelper.createEngineSpan({\n            span: !0,\n            spans: r1.traces\n        });\n    }\n    on(r1, n1) {\n        if (r1 === \"beforeExit\") throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n        this.logEmitter.on(r1, n1);\n    }\n    async url(r1) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r1}`;\n    }\n    async uploadSchema() {\n        let r1 = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r1, async ()=>{\n            let n1 = await et(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            n1.ok || qi(\"schema response status\", n1.status);\n            let i1 = await cr(n1, this.clientVersion);\n            if (i1) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${i1.message}`\n            }), i1;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`\n            });\n        });\n    }\n    request(r1, { traceparent: n1, interactiveTransaction: i1, customDataProxyFetch: o1 }) {\n        return this.requestInternal({\n            body: r1,\n            traceparent: n1,\n            interactiveTransaction: i1,\n            customDataProxyFetch: o1\n        });\n    }\n    async requestBatch(r1, { traceparent: n1, transaction: i1, customDataProxyFetch: o1 }) {\n        let s1 = i1?.kind === \"itx\" ? i1.options : void 0, a1 = pn(r1, i1), { batchResult: l1, elapsed: u1 } = await this.requestInternal({\n            body: a1,\n            customDataProxyFetch: o1,\n            interactiveTransaction: s1,\n            traceparent: n1\n        });\n        return l1.map((c1)=>\"errors\" in c1 && c1.errors.length > 0 ? Zt(c1.errors[0], this.clientVersion) : {\n                data: c1,\n                elapsed: u1\n            });\n    }\n    requestInternal({ body: r1, traceparent: n1, customDataProxyFetch: i1, interactiveTransaction: o1 }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: s1 })=>{\n                let a1 = o1 ? `${o1.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                s1(a1);\n                let l1 = await et(a1, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: n1,\n                        interactiveTransaction: o1\n                    }),\n                    body: JSON.stringify(r1),\n                    clientVersion: this.clientVersion\n                }, i1);\n                l1.ok || qi(\"graphql response status\", l1.status), await this.handleError(await cr(l1, this.clientVersion));\n                let u1 = await l1.json(), c1 = u1.extensions;\n                if (c1 && this.propagateResponseExtensions(c1), u1.errors) throw u1.errors.length === 1 ? Zt(u1.errors[0], this.config.clientVersion) : new K(u1.errors, {\n                    clientVersion: this.config.clientVersion\n                });\n                return u1;\n            }\n        });\n    }\n    async transaction(r1, n1, i1) {\n        let o1 = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${o1[r1]} transaction`,\n            callback: async ({ logHttpCall: s1 })=>{\n                if (r1 === \"start\") {\n                    let a1 = JSON.stringify({\n                        max_wait: i1?.maxWait ?? 2e3,\n                        timeout: i1?.timeout ?? 5e3,\n                        isolation_level: i1?.isolationLevel\n                    }), l1 = await this.url(\"transaction/start\");\n                    s1(l1);\n                    let u1 = await et(l1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: n1.traceparent\n                        }),\n                        body: a1,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await cr(u1, this.clientVersion));\n                    let c1 = await u1.json(), p1 = c1.extensions;\n                    p1 && this.propagateResponseExtensions(p1);\n                    let d1 = c1.id, f1 = c1[\"data-proxy\"].endpoint;\n                    return {\n                        id: d1,\n                        payload: {\n                            endpoint: f1\n                        }\n                    };\n                } else {\n                    let a1 = `${i1.payload.endpoint}/${r1}`;\n                    s1(a1);\n                    let l1 = await et(a1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: n1.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await cr(l1, this.clientVersion));\n                    let c1 = (await l1.json()).extensions;\n                    c1 && this.propagateResponseExtensions(c1);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let r1 = {\n            clientVersion: this.clientVersion\n        }, n1 = Object.keys(this.inlineDatasources)[0], i1 = dn({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), o1;\n        try {\n            o1 = new URL(i1);\n        } catch  {\n            throw new Ye(`Error validating datasource \\`${n1}\\`: the URL must start with the protocol \\`prisma://\\``, r1);\n        }\n        let { protocol: s1, host: a1, searchParams: l1 } = o1;\n        if (s1 !== \"prisma:\") throw new Ye(`Error validating datasource \\`${n1}\\`: the URL must start with the protocol \\`prisma://\\``, r1);\n        let u1 = l1.get(\"api_key\");\n        if (u1 === null || u1.length < 1) throw new Ye(`Error validating datasource \\`${n1}\\`: the URL must contain a valid API key`, r1);\n        return [\n            a1,\n            u1\n        ];\n    }\n    metrics() {\n        throw new Ze(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r1) {\n        for(let n1 = 0;; n1++){\n            let i1 = (o1)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${o1} (n=${n1})`\n                });\n            };\n            try {\n                return await r1.callback({\n                    logHttpCall: i1\n                });\n            } catch (o1) {\n                if (!(o1 instanceof ae) || !o1.isRetryable) throw o1;\n                if (n1 >= La) throw o1 instanceof Tt ? o1.cause : o1;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${n1 + 1}/${La} failed for ${r1.actionGerund}: ${o1.message ?? \"(unknown)\"}`\n                });\n                let s1 = await Fa(n1);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${s1}ms`\n                });\n            }\n        }\n    }\n    async handleError(r1) {\n        if (r1 instanceof Xe) throw await this.uploadSchema(), new Tt({\n            clientVersion: this.clientVersion,\n            cause: r1\n        });\n        if (r1) throw r1;\n    }\n};\nvar Ba = S(__webpack_require__(/*! fs */ \"fs\"));\nfunction $a(e1) {\n    if (e1?.kind === \"itx\") return e1.options.id;\n}\nvar Bi = S(__webpack_require__(/*! os */ \"os\")), qa = S(__webpack_require__(/*! path */ \"path\"));\nvar ji = Symbol(\"PrismaLibraryEngineCache\");\nfunction cd() {\n    let e1 = globalThis;\n    return e1[ji] === void 0 && (e1[ji] = {}), e1[ji];\n}\nfunction pd(e1) {\n    let t1 = cd();\n    if (t1[e1] !== void 0) return t1[e1];\n    let r1 = qa.default.toNamespacedPath(e1), n1 = {\n        exports: {}\n    }, i1 = 0;\n    return process.platform !== \"win32\" && (i1 = Bi.default.constants.dlopen.RTLD_LAZY | Bi.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n1, r1, i1), t1[e1] = n1.exports, n1.exports;\n}\nvar fn = class {\n    constructor(t1){\n        this.config = t1;\n    }\n    async loadLibrary() {\n        let t1 = await Jn(), r1 = await Ca(\"library\", this.config);\n        try {\n            return this.config.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>pd(r1));\n        } catch (n1) {\n            let i1 = ri({\n                e: n1,\n                platformInfo: t1,\n                id: r1\n            });\n            throw new F(i1, this.config.clientVersion);\n        }\n    }\n};\nvar dd = \"P2036\", Ce = O(\"prisma:client:libraryEngine\");\nfunction md(e1) {\n    return e1.item_type === \"query\" && \"query\" in e1;\n}\nfunction fd(e1) {\n    return \"level\" in e1 ? e1.level === \"error\" && e1.message === \"PANIC\" : !1;\n}\nvar Va = [\n    ...Hn,\n    \"native\"\n], ja = 0, mr = class extends vt {\n    constructor(r1, n1 = new fn(r1)){\n        super();\n        try {\n            this.datamodel = Ba.default.readFileSync(r1.datamodelPath, \"utf-8\");\n        } catch (s1) {\n            throw s1.stack.match(/\\/\\.next|\\/next@|\\/next\\//) ? new F(`Your schema.prisma could not be found, and we detected that you are using Next.js.\nFind out why and learn how to fix this: https://pris.ly/d/schema-not-found-nextjs`, r1.clientVersion) : r1.isBundled === !0 ? new F(\"Prisma Client could not find its `schema.prisma`. This is likely caused by a bundling step, which leads to `schema.prisma` not being copied near the resulting bundle. We would appreciate if you could take the time to share some information with us.\\nPlease help us by answering a few questions: https://pris.ly/bundler-investigation-error\", r1.clientVersion) : s1;\n        }\n        this.config = r1, this.libraryStarted = !1, this.logQueries = r1.logQueries ?? !1, this.logLevel = r1.logLevel ?? \"error\", this.libraryLoader = n1, this.logEmitter = r1.logEmitter, r1.enableDebugLogs && (this.logLevel = \"debug\");\n        let i1 = Object.keys(r1.overrideDatasources)[0], o1 = r1.overrideDatasources[i1]?.url;\n        i1 !== void 0 && o1 !== void 0 && (this.datasourceOverrides = {\n            [i1]: o1\n        }), this.libraryInstantiationPromise = this.instantiateLibrary(), this.checkForTooManyEngines();\n    }\n    checkForTooManyEngines() {\n        ja === 10 && console.warn(`${he(\"warn(prisma-client)\")} This is the 10th instance of Prisma Client being started. Make sure this is intentional.`);\n    }\n    async transaction(r1, n1, i1) {\n        await this.start();\n        let o1 = JSON.stringify(n1), s1;\n        if (r1 === \"start\") {\n            let l1 = JSON.stringify({\n                max_wait: i1?.maxWait ?? 2e3,\n                timeout: i1?.timeout ?? 5e3,\n                isolation_level: i1?.isolationLevel\n            });\n            s1 = await this.engine?.startTransaction(l1, o1);\n        } else r1 === \"commit\" ? s1 = await this.engine?.commitTransaction(i1.id, o1) : r1 === \"rollback\" && (s1 = await this.engine?.rollbackTransaction(i1.id, o1));\n        let a1 = this.parseEngineResponse(s1);\n        if (a1.error_code) throw new U(a1.message, {\n            code: a1.error_code,\n            clientVersion: this.config.clientVersion,\n            meta: a1.meta\n        });\n        return a1;\n    }\n    async instantiateLibrary() {\n        if (Ce(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        Vn(), this.platform = await this.getPlatform(), await this.loadEngine(), this.version();\n    }\n    async getPlatform() {\n        if (this.platform) return this.platform;\n        let r1 = await ut();\n        if (!Va.includes(r1)) throw new F(`Unknown ${me(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${me(ne(r1))}. Possible binaryTargets: ${Ge(Va.join(\", \"))} or a path to the query engine library.\nYou may have to run ${Ge(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n        return r1;\n    }\n    parseEngineResponse(r1) {\n        if (!r1) throw new K(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r1);\n        } catch  {\n            throw new K(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r1 = new WeakRef(this), { adapter: n1 } = this.config;\n                n1 && Ce(\"Using driver adapter: %O\", n1), this.engine = new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\"\n                }, (i1)=>{\n                    r1.deref()?.logger(i1);\n                }, n1), ja++;\n            } catch (r1) {\n                let n1 = r1, i1 = this.parseInitError(n1.message);\n                throw typeof i1 == \"string\" ? n1 : new F(i1.message, this.config.clientVersion, i1.error_code);\n            }\n        }\n    }\n    logger(r1) {\n        let n1 = this.parseEngineResponse(r1);\n        if (n1) {\n            if (\"span\" in n1) {\n                this.config.tracingHelper.createEngineSpan(n1);\n                return;\n            }\n            n1.level = n1?.level.toLowerCase() ?? \"unknown\", md(n1) ? this.logEmitter.emit(\"query\", {\n                timestamp: new Date,\n                query: n1.query,\n                params: n1.params,\n                duration: Number(n1.duration_ms),\n                target: n1.module_path\n            }) : fd(n1) ? this.loggerRustPanic = new ue(this.getErrorMessageWithLink(`${n1.message}: ${n1.reason} in ${n1.file}:${n1.line}:${n1.column}`), this.config.clientVersion) : this.logEmitter.emit(n1.level, {\n                timestamp: new Date,\n                message: n1.message,\n                target: n1.module_path\n            });\n        }\n    }\n    getErrorMessageWithLink(r1) {\n        return ka({\n            platform: this.platform,\n            title: r1,\n            version: this.config.clientVersion,\n            engineVersion: this.versionInfo?.commit,\n            database: this.config.activeProvider,\n            query: this.lastQuery\n        });\n    }\n    parseInitError(r1) {\n        try {\n            return JSON.parse(r1);\n        } catch  {}\n        return r1;\n    }\n    parseRequestError(r1) {\n        try {\n            return JSON.parse(r1);\n        } catch  {}\n        return r1;\n    }\n    on(r1, n1) {\n        if (r1 === \"beforeExit\") throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n        this.logEmitter.on(r1, n1);\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r1 = async ()=>{\n            Ce(\"library starting\");\n            try {\n                let n1 = {\n                    traceparent: this.config.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(n1)), this.libraryStarted = !0, Ce(\"library started\");\n            } catch (n1) {\n                let i1 = this.parseInitError(n1.message);\n                throw typeof i1 == \"string\" ? n1 : new F(i1.message, this.config.clientVersion, i1.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan(\"connect\", r1), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ce(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let r1 = async ()=>{\n            await new Promise((i1)=>setTimeout(i1, 5)), Ce(\"library stopping\");\n            let n1 = {\n                traceparent: this.config.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(n1)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, Ce(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan(\"disconnect\", r1), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r1) {\n        return this.library?.debugPanic(r1);\n    }\n    async request(r1, { traceparent: n1, interactiveTransaction: i1 }) {\n        Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let o1 = JSON.stringify({\n            traceparent: n1\n        }), s1 = JSON.stringify(r1);\n        try {\n            await this.start(), this.executingQueryPromise = this.engine?.query(s1, o1, i1?.id), this.lastQuery = s1;\n            let a1 = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a1.errors) throw a1.errors.length === 1 ? this.buildQueryError(a1.errors[0]) : new K(JSON.stringify(a1.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a1,\n                elapsed: 0\n            };\n        } catch (a1) {\n            if (a1 instanceof F) throw a1;\n            if (a1.code === \"GenericFailure\" && a1.message?.startsWith(\"PANIC:\")) throw new ue(this.getErrorMessageWithLink(a1.message), this.config.clientVersion);\n            let l1 = this.parseRequestError(a1.message);\n            throw typeof l1 == \"string\" ? a1 : new K(`${l1.message}\n${l1.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r1, { transaction: n1, traceparent: i1 }) {\n        Ce(\"requestBatch\");\n        let o1 = pn(r1, n1);\n        await this.start(), this.lastQuery = JSON.stringify(o1), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: i1\n        }), $a(n1));\n        let s1 = await this.executingQueryPromise, a1 = this.parseEngineResponse(s1);\n        if (a1.errors) throw a1.errors.length === 1 ? this.buildQueryError(a1.errors[0]) : new K(JSON.stringify(a1.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l1, errors: u1 } = a1;\n        if (Array.isArray(l1)) return l1.map((c1)=>c1.errors && c1.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c1.errors[0]) : {\n                data: c1,\n                elapsed: 0\n            });\n        throw u1 && u1.length === 1 ? new Error(u1[0].error) : new Error(JSON.stringify(a1));\n    }\n    buildQueryError(r1) {\n        if (r1.user_facing_error.is_panic) return new ue(this.getErrorMessageWithLink(r1.user_facing_error.message), this.config.clientVersion);\n        if (r1.user_facing_error.error_code === dd && this.config.adapter) {\n            let n1 = r1.user_facing_error.meta?.id;\n            _r(typeof n1 == \"number\", \"Malformed external JS error received from the engine\");\n            let i1 = this.config.adapter.errorRegistry.consumeError(n1);\n            return _r(i1, \"External error with reported id was not registered\"), i1.error;\n        }\n        return Zt(r1, this.config.clientVersion);\n    }\n    async metrics(r1) {\n        await this.start();\n        let n1 = await this.engine.metrics(JSON.stringify(r1));\n        return r1.format === \"prometheus\" ? n1 : this.parseEngineResponse(n1);\n    }\n};\nfunction Ua(e1, t1) {\n    let r1;\n    try {\n        r1 = dn({\n            inlineDatasources: t1.inlineDatasources,\n            overrideDatasources: t1.overrideDatasources,\n            env: {\n                ...t1.env,\n                ...process.env\n            },\n            clientVersion: t1.clientVersion\n        });\n    } catch  {}\n    e1.noEngine !== !0 && r1?.startsWith(\"prisma://\") && qt(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let n1 = Zn(t1.generator);\n    if (r1?.startsWith(\"prisma://\") || e1.noEngine) return new dr(t1);\n    if (n1 === \"library\") return new mr(t1);\n    throw \"binary\", new X(\"Invalid client engine type, please use `library` or `binary`\", {\n        clientVersion: t1.clientVersion\n    });\n}\nfunction gn({ generator: e1 }) {\n    return e1?.previewFeatures ?? [];\n}\nvar Wa = S(Ui());\nfunction Ja(e1, t1) {\n    let r1 = Ha(e1), n1 = gd(r1), i1 = hd(n1);\n    i1 ? yn(i1, t1) : t1.addErrorMessage(()=>\"Unknown error\");\n}\nfunction Ha(e1) {\n    return e1.errors.flatMap((t1)=>t1.kind === \"Union\" ? Ha(t1) : [\n            t1\n        ]);\n}\nfunction gd(e1) {\n    let t1 = new Map, r1 = [];\n    for (let n1 of e1){\n        if (n1.kind !== \"InvalidArgumentType\") {\n            r1.push(n1);\n            continue;\n        }\n        let i1 = `${n1.selectionPath.join(\".\")}:${n1.argumentPath.join(\".\")}`, o1 = t1.get(i1);\n        o1 ? t1.set(i1, {\n            ...n1,\n            argument: {\n                ...n1.argument,\n                typeNames: yd(o1.argument.typeNames, n1.argument.typeNames)\n            }\n        }) : t1.set(i1, n1);\n    }\n    return r1.push(...t1.values()), r1;\n}\nfunction yd(e1, t1) {\n    return [\n        ...new Set(e1.concat(t1))\n    ];\n}\nfunction hd(e1) {\n    return pi(e1, (t1, r1)=>{\n        let n1 = Qa(t1), i1 = Qa(r1);\n        return n1 !== i1 ? n1 - i1 : Ga(t1) - Ga(r1);\n    });\n}\nfunction Qa(e1) {\n    let t1 = 0;\n    return Array.isArray(e1.selectionPath) && (t1 += e1.selectionPath.length), Array.isArray(e1.argumentPath) && (t1 += e1.argumentPath.length), t1;\n}\nfunction Ga(e1) {\n    switch(e1.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar Se = class {\n    constructor(t1, r1){\n        this.name = t1;\n        this.value = r1;\n        this.isRequired = !1;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(t1) {\n        let { colors: { green: r1 } } = t1.context;\n        t1.addMarginSymbol(r1(this.isRequired ? \"+\" : \"?\")), t1.write(r1(this.name)), this.isRequired || t1.write(r1(\"?\")), t1.write(r1(\": \")), typeof this.value == \"string\" ? t1.write(r1(this.value)) : t1.write(this.value);\n    }\n};\nvar hn = class {\n    constructor(){\n        this.fields = [];\n    }\n    addField(t1, r1) {\n        return this.fields.push({\n            write (n1) {\n                let { green: i1, dim: o1 } = n1.context.colors;\n                n1.write(i1(o1(`${t1}: ${r1}`))).addMarginSymbol(i1(o1(\"+\")));\n            }\n        }), this;\n    }\n    write(t1) {\n        let { colors: { green: r1 } } = t1.context;\n        t1.writeLine(r1(\"{\")).withIndent(()=>{\n            t1.writeJoined(bt, this.fields).newLine();\n        }).write(r1(\"}\")).addMarginSymbol(r1(\"+\"));\n    }\n};\nfunction yn(e1, t1) {\n    switch(e1.kind){\n        case \"IncludeAndSelect\":\n            xd(e1, t1);\n            break;\n        case \"IncludeOnScalar\":\n            bd(e1, t1);\n            break;\n        case \"EmptySelection\":\n            Ed(e1, t1);\n            break;\n        case \"UnknownSelectionField\":\n            wd(e1, t1);\n            break;\n        case \"UnknownArgument\":\n            Pd(e1, t1);\n            break;\n        case \"UnknownInputField\":\n            vd(e1, t1);\n            break;\n        case \"RequiredArgumentMissing\":\n            Td(e1, t1);\n            break;\n        case \"InvalidArgumentType\":\n            Cd(e1, t1);\n            break;\n        case \"InvalidArgumentValue\":\n            Ad(e1, t1);\n            break;\n        case \"ValueTooLarge\":\n            Md(e1, t1);\n            break;\n        case \"SomeFieldsMissing\":\n            Rd(e1, t1);\n            break;\n        case \"TooManyFieldsGiven\":\n            Sd(e1, t1);\n            break;\n        case \"Union\":\n            Ja(e1, t1);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e1.kind);\n    }\n}\nfunction xd(e1, t1) {\n    let r1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    r1 && r1 instanceof Q && (r1.getField(\"include\")?.markAsError(), r1.getField(\"select\")?.markAsError()), t1.addErrorMessage((n1)=>`Please ${n1.bold(\"either\")} use ${n1.green(\"`include`\")} or ${n1.green(\"`select`\")}, but ${n1.red(\"not both\")} at the same time.`);\n}\nfunction bd(e1, t1) {\n    let [r1, n1] = xn(e1.selectionPath), i1 = e1.outputType, o1 = t1.arguments.getDeepSelectionParent(r1)?.value;\n    if (o1 && (o1.getField(n1)?.markAsError(), i1)) for (let s1 of i1.fields)s1.isRelation && o1.addSuggestion(new Se(s1.name, \"true\"));\n    t1.addErrorMessage((s1)=>{\n        let a1 = `Invalid scalar field ${s1.red(`\\`${n1}\\``)} for ${s1.bold(\"include\")} statement`;\n        return i1 ? a1 += ` on model ${s1.bold(i1.name)}. ${fr(s1)}` : a1 += \".\", a1 += `\nNote that ${s1.bold(\"include\")} statements only accept relation fields.`, a1;\n    });\n}\nfunction Ed(e1, t1) {\n    let r1 = e1.outputType, n1 = t1.arguments.getDeepSelectionParent(e1.selectionPath)?.value, i1 = n1?.isEmpty() ?? !1;\n    n1 && (n1.removeAllFields(), Za(n1, r1)), t1.addErrorMessage((o1)=>i1 ? `The ${o1.red(\"`select`\")} statement for type ${o1.bold(r1.name)} must not be empty. ${fr(o1)}` : `The ${o1.red(\"`select`\")} statement for type ${o1.bold(r1.name)} needs ${o1.bold(\"at least one truthy value\")}.`);\n}\nfunction wd(e1, t1) {\n    let [r1, n1] = xn(e1.selectionPath), i1 = t1.arguments.getDeepSelectionParent(r1);\n    i1 && (i1.value.getField(n1)?.markAsError(), Za(i1.value, e1.outputType)), t1.addErrorMessage((o1)=>{\n        let s1 = [\n            `Unknown field ${o1.red(`\\`${n1}\\``)}`\n        ];\n        return i1 && s1.push(`for ${o1.bold(i1.kind)} statement`), s1.push(`on model ${o1.bold(`\\`${e1.outputType.name}\\``)}.`), s1.push(fr(o1)), s1.join(\" \");\n    });\n}\nfunction Pd(e1, t1) {\n    let r1 = e1.argumentPath[0], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    n1 instanceof Q && (n1.getField(r1)?.markAsError(), Id(n1, e1.arguments)), t1.addErrorMessage((i1)=>za(i1, r1, e1.arguments.map((o1)=>o1.name)));\n}\nfunction vd(e1, t1) {\n    let [r1, n1] = xn(e1.argumentPath), i1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    if (i1 instanceof Q) {\n        i1.getDeepField(e1.argumentPath)?.markAsError();\n        let o1 = i1.getDeepFieldValue(r1);\n        o1 instanceof Q && Xa(o1, e1.inputType);\n    }\n    t1.addErrorMessage((o1)=>za(o1, n1, e1.inputType.fields.map((s1)=>s1.name)));\n}\nfunction za(e1, t1, r1) {\n    let n1 = [\n        `Unknown argument \\`${e1.red(t1)}\\`.`\n    ], i1 = Fd(t1, r1);\n    return i1 && n1.push(`Did you mean \\`${e1.green(i1)}\\`?`), r1.length > 0 && n1.push(fr(e1)), n1.join(\" \");\n}\nfunction Td(e1, t1) {\n    let r1;\n    t1.addErrorMessage((l1)=>r1?.value instanceof G && r1.value.text === \"null\" ? `Argument \\`${l1.green(o1)}\\` must not be ${l1.red(\"null\")}.` : `Argument \\`${l1.green(o1)}\\` is missing.`);\n    let n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    if (!(n1 instanceof Q)) return;\n    let [i1, o1] = xn(e1.argumentPath), s1 = new hn, a1 = n1.getDeepFieldValue(i1);\n    if (a1 instanceof Q) if (r1 = a1.getField(o1), r1 && a1.removeField(o1), e1.inputTypes.length === 1 && e1.inputTypes[0].kind === \"object\") {\n        for (let l1 of e1.inputTypes[0].fields)s1.addField(l1.name, l1.typeNames.join(\" | \"));\n        a1.addSuggestion(new Se(o1, s1).makeRequired());\n    } else {\n        let l1 = e1.inputTypes.map(Ya).join(\" | \");\n        a1.addSuggestion(new Se(o1, l1).makeRequired());\n    }\n}\nfunction Ya(e1) {\n    return e1.kind === \"list\" ? `${Ya(e1.elementType)}[]` : e1.name;\n}\nfunction Cd(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    n1 instanceof Q && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), t1.addErrorMessage((i1)=>{\n        let o1 = bn(\"or\", e1.argument.typeNames.map((s1)=>i1.green(s1)));\n        return `Argument \\`${i1.bold(r1)}\\`: Invalid value provided. Expected ${o1}, provided ${i1.red(e1.inferredType)}.`;\n    });\n}\nfunction Ad(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    n1 instanceof Q && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), t1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Invalid value for argument \\`${i1.bold(r1)}\\``\n        ];\n        if (e1.underlyingError && o1.push(`: ${e1.underlyingError}`), o1.push(\".\"), e1.argument.typeNames.length > 0) {\n            let s1 = bn(\"or\", e1.argument.typeNames.map((a1)=>i1.green(a1)));\n            o1.push(` Expected ${s1}.`);\n        }\n        return o1.join(\"\");\n    });\n}\nfunction Md(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath), i1;\n    if (n1 instanceof Q) {\n        let s1 = n1.getDeepField(e1.argumentPath)?.value;\n        s1?.markAsError(), s1 instanceof G && (i1 = s1.text);\n    }\n    t1.addErrorMessage((o1)=>{\n        let s1 = [\n            \"Unable to fit value\"\n        ];\n        return i1 && s1.push(o1.red(i1)), s1.push(`into a 64-bit signed integer for field \\`${o1.bold(r1)}\\``), s1.join(\" \");\n    });\n}\nfunction Rd(e1, t1) {\n    let r1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    if (n1 instanceof Q) {\n        let i1 = n1.getDeepFieldValue(e1.argumentPath);\n        i1 instanceof Q && Xa(i1, e1.inputType);\n    }\n    t1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Argument \\`${i1.bold(r1)}\\` of type ${i1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 ? e1.constraints.requiredFields ? o1.push(`${i1.green(\"at least one of\")} ${bn(\"or\", e1.constraints.requiredFields.map((s1)=>`\\`${i1.bold(s1)}\\``))} arguments.`) : o1.push(`${i1.green(\"at least one\")} argument.`) : o1.push(`${i1.green(`at least ${e1.constraints.minFieldCount}`)} arguments.`), o1.push(fr(i1)), o1.join(\" \");\n    });\n}\nfunction Sd(e1, t1) {\n    let r1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath), i1 = [];\n    if (n1 instanceof Q) {\n        let o1 = n1.getDeepFieldValue(e1.argumentPath);\n        o1 instanceof Q && (o1.markAsError(), i1 = Object.keys(o1.getFields()));\n    }\n    t1.addErrorMessage((o1)=>{\n        let s1 = [\n            `Argument \\`${o1.bold(r1)}\\` of type ${o1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 && e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"exactly one\")} argument,`) : e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"at most one\")} argument,`) : s1.push(`${o1.green(`at most ${e1.constraints.maxFieldCount}`)} arguments,`), s1.push(`but you provided ${bn(\"and\", i1.map((a1)=>o1.red(a1)))}. Please choose`), e1.constraints.maxFieldCount === 1 ? s1.push(\"one.\") : s1.push(`${e1.constraints.maxFieldCount}.`), s1.join(\" \");\n    });\n}\nfunction Za(e1, t1) {\n    for (let r1 of t1.fields)e1.hasField(r1.name) || e1.addSuggestion(new Se(r1.name, \"true\"));\n}\nfunction Id(e1, t1) {\n    for (let r1 of t1)e1.hasField(r1.name) || e1.addSuggestion(new Se(r1.name, r1.typeNames.join(\" | \")));\n}\nfunction Xa(e1, t1) {\n    if (t1.kind === \"object\") for (let r1 of t1.fields)e1.hasField(r1.name) || e1.addSuggestion(new Se(r1.name, r1.typeNames.join(\" | \")));\n}\nfunction xn(e1) {\n    let t1 = [\n        ...e1\n    ], r1 = t1.pop();\n    if (!r1) throw new Error(\"unexpected empty path\");\n    return [\n        t1,\n        r1\n    ];\n}\nfunction fr({ green: e1, enabled: t1 }) {\n    return \"Available options are \" + (t1 ? `listed in ${e1(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction bn(e1, t1) {\n    if (t1.length === 1) return t1[0];\n    let r1 = [\n        ...t1\n    ], n1 = r1.pop();\n    return `${r1.join(\", \")} ${e1} ${n1}`;\n}\nvar kd = 3;\nfunction Fd(e1, t1) {\n    let r1 = 1 / 0, n1;\n    for (let i1 of t1){\n        let o1 = (0, Wa.default)(e1, i1);\n        o1 > kd || o1 < r1 && (r1 = o1, n1 = i1);\n    }\n    return n1;\n}\nfunction En({ args: e1, errors: t1, errorFormat: r1, callsite: n1, originalMethod: i1, clientVersion: o1 }) {\n    let s1 = en(e1);\n    for (let p1 of t1)yn(p1, s1);\n    let a1 = r1 === \"pretty\" ? Os : Zr, l1 = s1.renderAllMessages(a1), u1 = new mt(0, {\n        colors: a1\n    }).write(s1).toString(), c1 = Pt({\n        message: l1,\n        callsite: n1,\n        originalMethod: i1,\n        showColors: r1 === \"pretty\",\n        callArguments: u1\n    });\n    throw new X(c1, {\n        clientVersion: o1\n    });\n}\nvar Dd = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n};\nfunction el({ modelName: e1, action: t1, args: r1, runtimeDataModel: n1, extensions: i1, callsite: o1, clientMethod: s1, errorFormat: a1, clientVersion: l1 }) {\n    let u1 = new Ki({\n        runtimeDataModel: n1,\n        modelName: e1,\n        action: t1,\n        rootArgs: r1,\n        callsite: o1,\n        extensions: i1,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s1,\n        errorFormat: a1,\n        clientVersion: l1\n    });\n    return {\n        modelName: e1,\n        action: Dd[t1],\n        query: Qi(r1, u1)\n    };\n}\nfunction Qi({ select: e1, include: t1, ...r1 } = {}, n1) {\n    return {\n        arguments: rl(r1, n1),\n        selection: Od(e1, t1, n1)\n    };\n}\nfunction Od(e1, t1, r1) {\n    return e1 && t1 && r1.throwValidationError({\n        kind: \"IncludeAndSelect\",\n        selectionPath: r1.getSelectionPath()\n    }), e1 ? Ld(e1, r1) : _d(r1, t1);\n}\nfunction _d(e1, t1) {\n    let r1 = {};\n    return e1.model && !e1.isRawAction() && (r1.$composites = !0, r1.$scalars = !0), t1 && Nd(r1, t1, e1), r1;\n}\nfunction Nd(e1, t1, r1) {\n    for (let [n1, i1] of Object.entries(t1)){\n        let o1 = r1.findField(n1);\n        o1 && o1?.kind !== \"object\" && r1.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: r1.getSelectionPath().concat(n1),\n            outputType: r1.getOutputTypeDescription()\n        }), i1 === !0 ? e1[n1] = !0 : typeof i1 == \"object\" && (e1[n1] = Qi(i1, r1.nestSelection(n1)));\n    }\n}\nfunction Ld(e1, t1) {\n    let r1 = {}, n1 = t1.getComputedFields(), i1 = ga(e1, n1);\n    for (let [o1, s1] of Object.entries(i1)){\n        let a1 = t1.findField(o1);\n        n1?.[o1] && !a1 || (s1 === !0 ? r1[o1] = !0 : typeof s1 == \"object\" && (r1[o1] = Qi(s1, t1.nestSelection(o1))));\n    }\n    return r1;\n}\nfunction tl(e1, t1) {\n    if (e1 === null) return null;\n    if (typeof e1 == \"string\" || typeof e1 == \"number\" || typeof e1 == \"boolean\") return e1;\n    if (typeof e1 == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e1)\n    };\n    if (ft(e1)) {\n        if (Br(e1)) return {\n            $type: \"DateTime\",\n            value: e1.toISOString()\n        };\n        t1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: t1.getSelectionPath(),\n            argumentPath: t1.getArgumentPath(),\n            argument: {\n                name: t1.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (xt(e1)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e1.name,\n            _container: e1.modelName\n        }\n    };\n    if (Array.isArray(e1)) return $d(e1, t1);\n    if (ArrayBuffer.isView(e1)) return {\n        $type: \"Bytes\",\n        value: Buffer.from(e1).toString(\"base64\")\n    };\n    if (qd(e1)) return e1.values;\n    if (ht(e1)) return {\n        $type: \"Decimal\",\n        value: e1.toFixed()\n    };\n    if (e1 instanceof xe) {\n        if (e1 !== $r.instances[e1._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e1._getName()\n        };\n    }\n    if (Vd(e1)) return e1.toJSON();\n    if (typeof e1 == \"object\") return rl(e1, t1);\n    t1.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: t1.getSelectionPath(),\n        argumentPath: t1.getArgumentPath(),\n        argument: {\n            name: t1.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e1)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction rl(e1, t1) {\n    if (e1.$type) return {\n        $type: \"Json\",\n        value: JSON.stringify(e1)\n    };\n    let r1 = {};\n    for(let n1 in e1){\n        let i1 = e1[n1];\n        i1 !== void 0 && (r1[n1] = tl(i1, t1.nestArgument(n1)));\n    }\n    return r1;\n}\nfunction $d(e1, t1) {\n    let r1 = [];\n    for(let n1 = 0; n1 < e1.length; n1++){\n        let i1 = t1.nestArgument(String(n1)), o1 = e1[n1];\n        o1 === void 0 && t1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: i1.getSelectionPath(),\n            argumentPath: i1.getArgumentPath(),\n            argument: {\n                name: `${t1.getArgumentName()}[${n1}]`,\n                typeNames: []\n            },\n            underlyingError: \"Can not use `undefined` value within array. Use `null` or filter out `undefined` values\"\n        }), r1.push(tl(o1, i1));\n    }\n    return r1;\n}\nfunction qd(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.__prismaRawParameters__ === !0;\n}\nfunction Vd(e1) {\n    return typeof e1 == \"object\" && e1 !== null && typeof e1.toJSON == \"function\";\n}\nvar Ki = class e {\n    constructor(t1){\n        this.params = t1;\n        this.params.modelName && (this.model = this.params.runtimeDataModel.models[this.params.modelName]);\n    }\n    throwValidationError(t1) {\n        En({\n            errors: [\n                t1\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.model)) return {\n            name: this.params.modelName,\n            fields: this.model.fields.map((t1)=>({\n                    name: t1.name,\n                    typeName: \"boolean\",\n                    isRelation: t1.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(t1) {\n        return this.model?.fields.find((r1)=>r1.name === t1);\n    }\n    nestSelection(t1) {\n        let r1 = this.findField(t1), n1 = r1?.kind === \"object\" ? r1.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n1,\n            selectionPath: this.params.selectionPath.concat(t1)\n        });\n    }\n    nestArgument(t1) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(t1)\n        });\n    }\n};\nvar nl = (e1)=>({\n        command: e1\n    });\nvar il = (e1)=>e1.strings.reduce((t1, r1, n1)=>`${t1}@P${n1}${r1}`);\nfunction gr(e1) {\n    try {\n        return ol(e1, \"fast\");\n    } catch  {\n        return ol(e1, \"slow\");\n    }\n}\nfunction ol(e1, t1) {\n    return JSON.stringify(e1.map((r1)=>jd(r1, t1)));\n}\nfunction jd(e1, t1) {\n    return typeof e1 == \"bigint\" ? {\n        prisma__type: \"bigint\",\n        prisma__value: e1.toString()\n    } : ft(e1) ? {\n        prisma__type: \"date\",\n        prisma__value: e1.toJSON()\n    } : Pe.isDecimal(e1) ? {\n        prisma__type: \"decimal\",\n        prisma__value: e1.toJSON()\n    } : Buffer.isBuffer(e1) ? {\n        prisma__type: \"bytes\",\n        prisma__value: e1.toString(\"base64\")\n    } : Bd(e1) || ArrayBuffer.isView(e1) ? {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e1).toString(\"base64\")\n    } : typeof e1 == \"object\" && t1 === \"slow\" ? al(e1) : e1;\n}\nfunction Bd(e1) {\n    return e1 instanceof ArrayBuffer || e1 instanceof SharedArrayBuffer ? !0 : typeof e1 == \"object\" && e1 !== null ? e1[Symbol.toStringTag] === \"ArrayBuffer\" || e1[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction al(e1) {\n    if (typeof e1 != \"object\" || e1 === null) return e1;\n    if (typeof e1.toJSON == \"function\") return e1.toJSON();\n    if (Array.isArray(e1)) return e1.map(sl);\n    let t1 = {};\n    for (let r1 of Object.keys(e1))t1[r1] = sl(e1[r1]);\n    return t1;\n}\nfunction sl(e1) {\n    return typeof e1 == \"bigint\" ? e1.toString() : al(e1);\n}\nvar Ud = /^(\\s*alter\\s)/i, ll = O(\"prisma:client\");\nfunction Gi(e1, t1, r1, n1) {\n    if (!(e1 !== \"postgresql\" && e1 !== \"cockroachdb\") && r1.length > 0 && Ud.exec(t1)) throw new Error(`Running ALTER using ${n1} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Ji = ({ clientMethod: e1, activeProvider: t1, activeProviderFlavour: r1 })=>(n1)=>{\n        r1 !== void 0 && (t1 = r1);\n        let i1 = \"\", o1;\n        if (Array.isArray(n1)) {\n            let [s1, ...a1] = n1;\n            i1 = s1, o1 = {\n                values: gr(a1 || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(t1){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    i1 = n1.sql, o1 = {\n                        values: gr(n1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    i1 = n1.text, o1 = {\n                        values: gr(n1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    i1 = il(n1), o1 = {\n                        values: gr(n1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${t1} provider does not support ${e1}`);\n        }\n        return o1?.values ? ll(`prisma.${e1}(${i1}, ${o1.values})`) : ll(`prisma.${e1}(${i1})`), {\n            query: i1,\n            parameters: o1\n        };\n    }, ul = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1.strings,\n            ...e1.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        let [t1, ...r1] = e1;\n        return new oe(t1, r1);\n    }\n}, cl = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        return e1[0];\n    }\n};\nfunction Hi(e1) {\n    return function(r1) {\n        let n1, i1 = (o1 = e1)=>{\n            try {\n                return o1 === void 0 || o1?.kind === \"itx\" ? n1 ?? (n1 = pl(r1(o1))) : pl(r1(o1));\n            } catch (s1) {\n                return Promise.reject(s1);\n            }\n        };\n        return {\n            then (o1, s1) {\n                return i1().then(o1, s1);\n            },\n            catch (o1) {\n                return i1().catch(o1);\n            },\n            finally (o1) {\n                return i1().finally(o1);\n            },\n            requestTransaction (o1) {\n                let s1 = i1(o1);\n                return s1.requestTransaction ? s1.requestTransaction(o1) : s1;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction pl(e1) {\n    return typeof e1.then == \"function\" ? e1 : Promise.resolve(e1);\n}\nvar dl = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    async createEngineSpan () {},\n    getActiveContext () {},\n    runInChildSpan (e1, t1) {\n        return t1();\n    }\n}, Wi = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(t1) {\n        return this.getGlobalTracingHelper().getTraceParent(t1);\n    }\n    createEngineSpan(t1) {\n        return this.getGlobalTracingHelper().createEngineSpan(t1);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(t1, r1) {\n        return this.getGlobalTracingHelper().runInChildSpan(t1, r1);\n    }\n    getGlobalTracingHelper() {\n        return globalThis.PRISMA_INSTRUMENTATION?.helper ?? dl;\n    }\n};\nfunction ml(e1) {\n    return e1.includes(\"tracing\") ? new Wi : dl;\n}\nfunction fl(e1, t1 = ()=>{}) {\n    let r1, n1 = new Promise((i1)=>r1 = i1);\n    return {\n        then (i1) {\n            return --e1 === 0 && r1(t1()), i1?.(n1);\n        }\n    };\n}\nvar Kd = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], zi = Kd;\nfunction gl(e1) {\n    return typeof e1 == \"string\" ? e1 : e1.reduce((t1, r1)=>{\n        let n1 = typeof r1 == \"string\" ? r1 : r1.level;\n        return n1 === \"query\" ? t1 : t1 && (r1 === \"info\" || t1 === \"info\") ? \"info\" : n1;\n    }, void 0);\n}\nvar wn = class {\n    constructor(){\n        this._middlewares = [];\n    }\n    use(t1) {\n        this._middlewares.push(t1);\n    }\n    get(t1) {\n        return this._middlewares[t1];\n    }\n    has(t1) {\n        return !!this._middlewares[t1];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n};\nvar hl = S(li());\nfunction Pn(e1) {\n    return typeof e1.batchRequestIdx == \"number\";\n}\nfunction vn(e1) {\n    return e1 === null ? e1 : Array.isArray(e1) ? e1.map(vn) : typeof e1 == \"object\" ? Qd(e1) ? Gd(e1) : pt(e1, vn) : e1;\n}\nfunction Qd(e1) {\n    return e1 !== null && typeof e1 == \"object\" && typeof e1.$type == \"string\";\n}\nfunction Gd({ $type: e1, value: t1 }) {\n    switch(e1){\n        case \"BigInt\":\n            return BigInt(t1);\n        case \"Bytes\":\n            return Buffer.from(t1, \"base64\");\n        case \"DateTime\":\n            return new Date(t1);\n        case \"Decimal\":\n            return new Pe(t1);\n        case \"Json\":\n            return JSON.parse(t1);\n        default:\n            He(t1, \"Unknown tagged value\");\n    }\n}\nfunction yl(e1) {\n    if (e1.action !== \"findUnique\" && e1.action !== \"findUniqueOrThrow\") return;\n    let t1 = [];\n    return e1.modelName && t1.push(e1.modelName), e1.query.arguments && t1.push(Yi(e1.query.arguments)), t1.push(Yi(e1.query.selection)), t1.join(\"\");\n}\nfunction Yi(e1) {\n    return `(${Object.keys(e1).sort().map((r1)=>{\n        let n1 = e1[r1];\n        return typeof n1 == \"object\" && n1 !== null ? `(${r1} ${Yi(n1)})` : r1;\n    }).join(\" \")})`;\n}\nvar Jd = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Zi(e1) {\n    return Jd[e1];\n}\nvar Tn = class {\n    constructor(t1){\n        this.options = t1;\n        this.tickActive = !1;\n        this.batches = {};\n    }\n    request(t1) {\n        let r1 = this.options.batchBy(t1);\n        return r1 ? (this.batches[r1] || (this.batches[r1] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n1, i1)=>{\n            this.batches[r1].push({\n                request: t1,\n                resolve: n1,\n                reject: i1\n            });\n        })) : this.options.singleLoader(t1);\n    }\n    dispatchBatches() {\n        for(let t1 in this.batches){\n            let r1 = this.batches[t1];\n            delete this.batches[t1], r1.length === 1 ? this.options.singleLoader(r1[0].request).then((n1)=>{\n                n1 instanceof Error ? r1[0].reject(n1) : r1[0].resolve(n1);\n            }).catch((n1)=>{\n                r1[0].reject(n1);\n            }) : (r1.sort((n1, i1)=>this.options.batchOrder(n1.request, i1.request)), this.options.batchLoader(r1.map((n1)=>n1.request)).then((n1)=>{\n                if (n1 instanceof Error) for(let i1 = 0; i1 < r1.length; i1++)r1[i1].reject(n1);\n                else for(let i1 = 0; i1 < r1.length; i1++){\n                    let o1 = n1[i1];\n                    o1 instanceof Error ? r1[i1].reject(o1) : r1[i1].resolve(o1);\n                }\n            }).catch((n1)=>{\n                for(let i1 = 0; i1 < r1.length; i1++)r1[i1].reject(n1);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nvar Hd = O(\"prisma:client:request_handler\"), Cn = class {\n    constructor(t1, r1){\n        this.logEmitter = r1, this.client = t1, this.dataloader = new Tn({\n            batchLoader: ca(async ({ requests: n1, customDataProxyFetch: i1 })=>{\n                let { transaction: o1, otelParentCtx: s1 } = n1[0], a1 = n1.map((p1)=>p1.protocolQuery), l1 = this.client._tracingHelper.getTraceParent(s1), u1 = n1.some((p1)=>Zi(p1.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a1, {\n                    traceparent: l1,\n                    transaction: Wd(o1),\n                    containsWrite: u1,\n                    customDataProxyFetch: i1\n                })).map((p1, d1)=>{\n                    if (p1 instanceof Error) return p1;\n                    try {\n                        return this.mapQueryEngineResult(n1[d1], p1);\n                    } catch (f1) {\n                        return f1;\n                    }\n                });\n            }),\n            singleLoader: async (n1)=>{\n                let i1 = n1.transaction?.kind === \"itx\" ? xl(n1.transaction) : void 0, o1 = await this.client._engine.request(n1.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i1,\n                    isWrite: Zi(n1.protocolQuery.action),\n                    customDataProxyFetch: n1.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n1, o1);\n            },\n            batchBy: (n1)=>n1.transaction?.id ? `transaction-${n1.transaction.id}` : yl(n1.protocolQuery),\n            batchOrder (n1, i1) {\n                return n1.transaction?.kind === \"batch\" && i1.transaction?.kind === \"batch\" ? n1.transaction.index - i1.transaction.index : 0;\n            }\n        });\n    }\n    async request(t1) {\n        try {\n            return await this.dataloader.request(t1);\n        } catch (r1) {\n            let { clientMethod: n1, callsite: i1, transaction: o1, args: s1 } = t1;\n            this.handleAndLogRequestError({\n                error: r1,\n                clientMethod: n1,\n                callsite: i1,\n                transaction: o1,\n                args: s1\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: t1, unpacker: r1 }, n1) {\n        let i1 = n1?.data, o1 = n1?.elapsed, s1 = this.unpack(i1, t1, r1);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: s1,\n            elapsed: o1\n        } : s1;\n    }\n    handleAndLogRequestError(t1) {\n        try {\n            this.handleRequestError(t1);\n        } catch (r1) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: r1.message,\n                target: t1.clientMethod,\n                timestamp: new Date\n            }), r1;\n        }\n    }\n    handleRequestError({ error: t1, clientMethod: r1, callsite: n1, transaction: i1, args: o1 }) {\n        if (Hd(t1), zd(t1, i1) || t1 instanceof Me) throw t1;\n        if (t1 instanceof U && Yd(t1)) {\n            let a1 = bl(t1.meta);\n            En({\n                args: o1,\n                errors: [\n                    a1\n                ],\n                callsite: n1,\n                errorFormat: this.client._errorFormat,\n                originalMethod: r1,\n                clientVersion: this.client._clientVersion\n            });\n        }\n        let s1 = t1.message;\n        throw n1 && (s1 = Pt({\n            callsite: n1,\n            originalMethod: r1,\n            isPanic: t1.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: s1\n        })), s1 = this.sanitizeMessage(s1), t1.code ? new U(s1, {\n            code: t1.code,\n            clientVersion: this.client._clientVersion,\n            meta: t1.meta,\n            batchRequestIdx: t1.batchRequestIdx\n        }) : t1.isPanic ? new ue(s1, this.client._clientVersion) : t1 instanceof K ? new K(s1, {\n            clientVersion: this.client._clientVersion,\n            batchRequestIdx: t1.batchRequestIdx\n        }) : t1 instanceof F ? new F(s1, this.client._clientVersion) : t1 instanceof ue ? new ue(s1, this.client._clientVersion) : (t1.clientVersion = this.client._clientVersion, t1);\n    }\n    sanitizeMessage(t1) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, hl.default)(t1) : t1;\n    }\n    unpack(t1, r1, n1) {\n        if (!t1 || (t1.data && (t1 = t1.data), !t1)) return t1;\n        let i1 = Object.values(t1)[0], o1 = r1.filter((a1)=>a1 !== \"select\" && a1 !== \"include\"), s1 = vn(Ai(i1, o1));\n        return n1 ? n1(s1) : s1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction Wd(e1) {\n    if (e1) {\n        if (e1.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e1.isolationLevel\n            }\n        };\n        if (e1.kind === \"itx\") return {\n            kind: \"itx\",\n            options: xl(e1)\n        };\n        He(e1, \"Unknown transaction kind\");\n    }\n}\nfunction xl(e1) {\n    return {\n        id: e1.id,\n        payload: e1.payload\n    };\n}\nfunction zd(e1, t1) {\n    return Pn(e1) && t1?.kind === \"batch\" && e1.batchRequestIdx !== t1.index;\n}\nfunction Yd(e1) {\n    return e1.code === \"P2009\" || e1.code === \"P2012\";\n}\nfunction bl(e1) {\n    if (e1.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e1.errors.map(bl)\n    };\n    if (Array.isArray(e1.selectionPath)) {\n        let [, ...t1] = e1.selectionPath;\n        return {\n            ...e1,\n            selectionPath: t1\n        };\n    }\n    return e1;\n}\nvar El = \"5.5.2\";\nvar wl = El;\nfunction Pl(e1) {\n    return e1.map((t1)=>{\n        let r1 = {};\n        for (let n1 of Object.keys(t1))r1[n1] = vl(t1[n1]);\n        return r1;\n    });\n}\nfunction vl({ prisma__type: e1, prisma__value: t1 }) {\n    switch(e1){\n        case \"bigint\":\n            return BigInt(t1);\n        case \"bytes\":\n            return Buffer.from(t1, \"base64\");\n        case \"decimal\":\n            return new Pe(t1);\n        case \"datetime\":\n        case \"date\":\n            return new Date(t1);\n        case \"time\":\n            return new Date(`1970-01-01T${t1}Z`);\n        case \"array\":\n            return t1.map(vl);\n        default:\n            return t1;\n    }\n}\nvar Ml = S(Ui());\nvar q = class extends Error {\n    constructor(t1){\n        super(t1 + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nE(q, \"PrismaClientConstructorValidationError\");\nvar Tl = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"__internal\"\n], Cl = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], Al = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Xd = {\n    datasources: (e1, { datasourceNames: t1 })=>{\n        if (e1) {\n            if (typeof e1 != \"object\" || Array.isArray(e1)) throw new q(`Invalid value ${JSON.stringify(e1)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [r1, n1] of Object.entries(e1)){\n                if (!t1.includes(r1)) {\n                    let i1 = Mt(r1, t1) || ` Available datasources: ${t1.join(\", \")}`;\n                    throw new q(`Unknown datasource ${r1} provided to PrismaClient constructor.${i1}`);\n                }\n                if (typeof n1 != \"object\" || Array.isArray(n1)) throw new q(`Invalid value ${JSON.stringify(e1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n1 && typeof n1 == \"object\") for (let [i1, o1] of Object.entries(n1)){\n                    if (i1 !== \"url\") throw new q(`Invalid value ${JSON.stringify(e1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o1 != \"string\") throw new q(`Invalid value ${JSON.stringify(o1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e1, t1)=>{\n        if (e1 === null) return;\n        if (e1 === void 0) throw new q('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!gn(t1).includes(\"driverAdapters\")) throw new q('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n    },\n    datasourceUrl: (e1)=>{\n        if (typeof e1 < \"u\" && typeof e1 != \"string\") throw new q(`Invalid value ${JSON.stringify(e1)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e1)=>{\n        if (e1) {\n            if (typeof e1 != \"string\") throw new q(`Invalid value ${JSON.stringify(e1)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!Cl.includes(e1)) {\n                let t1 = Mt(e1, Cl);\n                throw new q(`Invalid errorFormat ${e1} provided to PrismaClient constructor.${t1}`);\n            }\n        }\n    },\n    log: (e1)=>{\n        if (!e1) return;\n        if (!Array.isArray(e1)) throw new q(`Invalid value ${JSON.stringify(e1)} for \"log\" provided to PrismaClient constructor.`);\n        function t1(r1) {\n            if (typeof r1 == \"string\" && !Al.includes(r1)) {\n                let n1 = Mt(r1, Al);\n                throw new q(`Invalid log level \"${r1}\" provided to PrismaClient constructor.${n1}`);\n            }\n        }\n        for (let r1 of e1){\n            t1(r1);\n            let n1 = {\n                level: t1,\n                emit: (i1)=>{\n                    let o1 = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o1.includes(i1)) {\n                        let s1 = Mt(i1, o1);\n                        throw new q(`Invalid value ${JSON.stringify(i1)} for \"emit\" in logLevel provided to PrismaClient constructor.${s1}`);\n                    }\n                }\n            };\n            if (r1 && typeof r1 == \"object\") for (let [i1, o1] of Object.entries(r1))if (n1[i1]) n1[i1](o1);\n            else throw new q(`Invalid property ${i1} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    __internal: (e1)=>{\n        if (!e1) return;\n        let t1 = [\n            \"debug\",\n            \"hooks\",\n            \"engine\",\n            \"measurePerformance\"\n        ];\n        if (typeof e1 != \"object\") throw new q(`Invalid value ${JSON.stringify(e1)} for \"__internal\" to PrismaClient constructor`);\n        for (let [r1] of Object.entries(e1))if (!t1.includes(r1)) {\n            let n1 = Mt(r1, t1);\n            throw new q(`Invalid property ${JSON.stringify(r1)} for \"__internal\" provided to PrismaClient constructor.${n1}`);\n        }\n    }\n};\nfunction Rl(e1, t1) {\n    for (let [r1, n1] of Object.entries(e1)){\n        if (!Tl.includes(r1)) {\n            let i1 = Mt(r1, Tl);\n            throw new q(`Unknown property ${r1} provided to PrismaClient constructor.${i1}`);\n        }\n        Xd[r1](n1, t1);\n    }\n    if (e1.datasourceUrl && e1.datasources) throw new q('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Mt(e1, t1) {\n    if (t1.length === 0 || typeof e1 != \"string\") return \"\";\n    let r1 = em(e1, t1);\n    return r1 ? ` Did you mean \"${r1}\"?` : \"\";\n}\nfunction em(e1, t1) {\n    if (t1.length === 0) return null;\n    let r1 = t1.map((i1)=>({\n            value: i1,\n            distance: (0, Ml.default)(e1, i1)\n        }));\n    r1.sort((i1, o1)=>i1.distance < o1.distance ? -1 : 1);\n    let n1 = r1[0];\n    return n1.distance < 3 ? n1.value : null;\n}\nfunction Sl(e1) {\n    return e1.length === 0 ? Promise.resolve([]) : new Promise((t1, r1)=>{\n        let n1 = new Array(e1.length), i1 = null, o1 = !1, s1 = 0, a1 = ()=>{\n            o1 || (s1++, s1 === e1.length && (o1 = !0, i1 ? r1(i1) : t1(n1)));\n        }, l1 = (u1)=>{\n            o1 || (o1 = !0, r1(u1));\n        };\n        for(let u1 = 0; u1 < e1.length; u1++)e1[u1].then((c1)=>{\n            n1[u1] = c1, a1();\n        }, (c1)=>{\n            if (!Pn(c1)) {\n                l1(c1);\n                return;\n            }\n            c1.batchRequestIdx === u1 ? l1(c1) : (i1 || (i1 = c1), a1());\n        });\n    });\n}\nvar Ue = O(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar tm = {\n    requestArgsToMiddlewareArgs: (e1)=>e1,\n    middlewareArgsToRequestArgs: (e1)=>e1\n}, rm = Symbol.for(\"prisma.client.transaction.id\"), nm = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction Ol(e1) {\n    class t1 {\n        constructor(n1){\n            this._middlewares = new wn;\n            this._createPrismaPromise = Hi();\n            this.$extends = ra;\n            xa(e1), n1 && Rl(n1, e1);\n            let i1 = n1?.adapter ? fs(n1.adapter) : void 0, o1 = new Fl.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = ln.empty(), this._previewFeatures = gn(e1), this._clientVersion = e1.clientVersion ?? wl, this._activeProvider = e1.activeProvider, this._tracingHelper = ml(this._previewFeatures);\n            let s1 = {\n                rootEnvPath: e1.relativeEnvPaths.rootEnvPath && yr.default.resolve(e1.dirname, e1.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e1.relativeEnvPaths.schemaEnvPath && yr.default.resolve(e1.dirname, e1.relativeEnvPaths.schemaEnvPath)\n            }, a1 = !i1 && _t(s1, {\n                conflictCheck: \"none\"\n            }) || e1.injectableEdgeEnv?.();\n            try {\n                let l1 = n1 ?? {}, u1 = l1.__internal ?? {}, c1 = u1.debug === !0;\n                c1 && O.enable(\"prisma:client\");\n                let p1 = yr.default.resolve(e1.dirname, e1.relativePath);\n                Dl.default.existsSync(p1) || (p1 = e1.dirname), Ue(\"dirname\", e1.dirname), Ue(\"relativePath\", e1.relativePath), Ue(\"cwd\", p1);\n                let d1 = u1.engine || {};\n                if (l1.errorFormat ? this._errorFormat = l1.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e1.runtimeDataModel, this._engineConfig = {\n                    cwd: p1,\n                    dirname: e1.dirname,\n                    enableDebugLogs: c1,\n                    allowTriggerPanic: d1.allowTriggerPanic,\n                    datamodelPath: yr.default.join(e1.dirname, e1.filename ?? \"schema.prisma\"),\n                    prismaPath: d1.binaryPath ?? void 0,\n                    engineEndpoint: d1.endpoint,\n                    generator: e1.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l1.log && gl(l1.log),\n                    logQueries: l1.log && !!(typeof l1.log == \"string\" ? l1.log === \"query\" : l1.log.find((f1)=>typeof f1 == \"string\" ? f1 === \"query\" : f1.level === \"query\")),\n                    env: a1?.parsed ?? {},\n                    flags: [],\n                    clientVersion: e1.clientVersion,\n                    engineVersion: e1.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e1.activeProvider,\n                    inlineSchema: e1.inlineSchema,\n                    overrideDatasources: ba(l1, e1.datasourceNames),\n                    inlineDatasources: e1.inlineDatasources,\n                    inlineSchemaHash: e1.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    logEmitter: o1,\n                    isBundled: e1.isBundled,\n                    adapter: i1\n                }, Ue(\"clientVersion\", e1.clientVersion), this._engine = Ua(e1, this._engineConfig), this._requestHandler = new Cn(this, o1), l1.log) for (let f1 of l1.log){\n                    let y1 = typeof f1 == \"string\" ? f1 : f1.emit === \"stdout\" ? f1.level : null;\n                    y1 && this.$on(y1, (g1)=>{\n                        $t.log(`${$t.tags[y1] ?? \"\"}`, g1.message || g1.query);\n                    });\n                }\n                this._metrics = new dt(this._engine);\n            } catch (l1) {\n                throw l1.clientVersion = this._clientVersion, l1;\n            }\n            return this._appliedParent = zt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n1) {\n            this._middlewares.use(n1);\n        }\n        $on(n1, i1) {\n            n1 === \"beforeExit\" ? this._engine.on(\"beforeExit\", i1) : this._engine.on(n1, (o1)=>{\n                let s1 = o1.fields;\n                return i1(n1 === \"query\" ? {\n                    timestamp: o1.timestamp,\n                    query: s1?.query ?? o1.query,\n                    params: s1?.params ?? o1.params,\n                    duration: s1?.duration_ms ?? o1.duration,\n                    target: o1.target\n                } : {\n                    timestamp: o1.timestamp,\n                    message: s1?.message ?? o1.message,\n                    target: o1.target\n                });\n            });\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            } finally{\n                Eo();\n            }\n        }\n        $executeRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider, l1 = this._engineConfig.adapter?.flavour;\n            return this._request({\n                action: \"executeRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: Ji({\n                    clientMethod: i1,\n                    activeProvider: a1,\n                    activeProviderFlavour: l1\n                }),\n                callsite: Ve(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            });\n        }\n        $executeRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) {\n                    let [s1, a1] = Il(n1, i1);\n                    return Gi(this._activeProvider, s1.text, s1.values, Array.isArray(n1) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o1, \"$executeRaw\", s1, a1);\n                }\n                throw new X(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>(Gi(this._activeProvider, n1, i1, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o1, \"$executeRawUnsafe\", [\n                    n1,\n                    ...i1\n                ])));\n        }\n        $runCommandRaw(n1) {\n            if (e1.activeProvider !== \"mongodb\") throw new X(`The ${e1.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i1)=>this._request({\n                    args: n1,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: nl,\n                    callsite: Ve(this._errorFormat),\n                    transaction: i1\n                }));\n        }\n        async $queryRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider, l1 = this._engineConfig.adapter?.flavour;\n            return this._request({\n                action: \"queryRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: Ji({\n                    clientMethod: i1,\n                    activeProvider: a1,\n                    activeProviderFlavour: l1\n                }),\n                callsite: Ve(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            }).then(Pl);\n        }\n        $queryRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) return this.$queryRawInternal(o1, \"$queryRaw\", ...Il(n1, i1));\n                throw new X(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>this.$queryRawInternal(o1, \"$queryRawUnsafe\", [\n                    n1,\n                    ...i1\n                ]));\n        }\n        _transactionWithArray({ promises: n1, options: i1 }) {\n            let o1 = nm.nextId(), s1 = fl(n1.length), a1 = n1.map((l1, u1)=>{\n                if (l1?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c1 = i1?.isolationLevel, p1 = {\n                    kind: \"batch\",\n                    id: o1,\n                    index: u1,\n                    isolationLevel: c1,\n                    lock: s1\n                };\n                return l1.requestTransaction?.(p1) ?? l1;\n            });\n            return Sl(a1);\n        }\n        async _transactionWithCallback({ callback: n1, options: i1 }) {\n            let o1 = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s1 = await this._engine.transaction(\"start\", o1, i1), a1;\n            try {\n                let l1 = {\n                    kind: \"itx\",\n                    ...s1\n                };\n                a1 = await n1(this._createItxClient(l1)), await this._engine.transaction(\"commit\", o1, s1);\n            } catch (l1) {\n                throw await this._engine.transaction(\"rollback\", o1, s1).catch(()=>{}), l1;\n            }\n            return a1;\n        }\n        _createItxClient(n1) {\n            return zt(Ee(on(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n1)),\n                re(\"_createPrismaPromise\", ()=>Hi(n1)),\n                re(rm, ()=>n1.id),\n                Gt(zi)\n            ]));\n        }\n        $transaction(n1, i1) {\n            let o1;\n            typeof n1 == \"function\" ? o1 = ()=>this._transactionWithCallback({\n                    callback: n1,\n                    options: i1\n                }) : o1 = ()=>this._transactionWithArray({\n                    promises: n1,\n                    options: i1\n                });\n            let s1 = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s1, o1);\n        }\n        _request(n1) {\n            n1.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i1 = n1.middlewareArgsMapper ?? tm, o1 = {\n                args: i1.requestArgsToMiddlewareArgs(n1.args),\n                dataPath: n1.dataPath,\n                runInTransaction: !!n1.transaction,\n                action: n1.action,\n                model: n1.model\n            }, s1 = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o1.action,\n                        model: o1.model,\n                        name: o1.model ? `${o1.model}.${o1.action}` : o1.action\n                    }\n                }\n            }, a1 = -1, l1 = async (u1)=>{\n                let c1 = this._middlewares.get(++a1);\n                if (c1) return this._tracingHelper.runInChildSpan(s1.middleware, (P1)=>c1(u1, (T1)=>(P1?.end(), l1(T1))));\n                let { runInTransaction: p1, args: d1, ...f1 } = u1, y1 = {\n                    ...n1,\n                    ...f1\n                };\n                d1 && (y1.args = i1.middlewareArgsToRequestArgs(d1)), n1.transaction !== void 0 && p1 === !1 && delete y1.transaction;\n                let g1 = await ua(this, y1);\n                return y1.model ? oa({\n                    result: g1,\n                    modelName: y1.model,\n                    args: y1.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel\n                }) : g1;\n            };\n            return this._tracingHelper.runInChildSpan(s1.operation, ()=>new kl.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l1(o1)));\n        }\n        async _executeRequest({ args: n1, clientMethod: i1, dataPath: o1, callsite: s1, action: a1, model: l1, argsMapper: u1, transaction: c1, unpacker: p1, otelParentCtx: d1, customDataProxyFetch: f1 }) {\n            try {\n                n1 = u1 ? u1(n1) : n1;\n                let y1 = {\n                    name: \"serialize\"\n                }, g1 = this._tracingHelper.runInChildSpan(y1, ()=>el({\n                        modelName: l1,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a1,\n                        args: n1,\n                        clientMethod: i1,\n                        callsite: s1,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion\n                    }));\n                return O.enabled(\"prisma:client\") && (Ue(\"Prisma Client call:\"), Ue(`prisma.${i1}(${$s(n1)})`), Ue(\"Generated request:\"), Ue(JSON.stringify(g1, null, 2) + `\n`)), c1?.kind === \"batch\" && await c1.lock, this._requestHandler.request({\n                    protocolQuery: g1,\n                    modelName: l1,\n                    action: a1,\n                    clientMethod: i1,\n                    dataPath: o1,\n                    callsite: s1,\n                    args: n1,\n                    extensions: this._extensions,\n                    transaction: c1,\n                    unpacker: p1,\n                    otelParentCtx: d1,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    customDataProxyFetch: f1\n                });\n            } catch (y1) {\n                throw y1.clientVersion = this._clientVersion, y1;\n            }\n        }\n        get $metrics() {\n            if (!this._hasPreviewFlag(\"metrics\")) throw new X(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n                clientVersion: this._clientVersion\n            });\n            return this._metrics;\n        }\n        _hasPreviewFlag(n1) {\n            return !!this._engineConfig.previewFeatures?.includes(n1);\n        }\n    }\n    return t1;\n}\nfunction Il(e1, t1) {\n    return im(e1) ? [\n        new oe(e1, t1),\n        ul\n    ] : [\n        e1,\n        cl\n    ];\n}\nfunction im(e1) {\n    return Array.isArray(e1) && Array.isArray(e1.raw);\n}\nvar om = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction _l(e1) {\n    return new Proxy(e1, {\n        get (t1, r1) {\n            if (r1 in t1) return t1[r1];\n            if (!om.has(r1)) throw new TypeError(`Invalid enum value: ${String(r1)}`);\n        }\n    });\n}\nfunction Nl(e1) {\n    _t(e1, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wcmlzbWEvY2xpZW50L3J1bnRpbWUvbGlicmFyeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUFBLElBQUlBLEtBQUdDLE9BQU9DLE1BQU07QUFBQyxJQUFJQyxLQUFHRixPQUFPRyxjQUFjO0FBQUMsSUFBSUMsS0FBR0osT0FBT0ssd0JBQXdCO0FBQUMsSUFBSUMsS0FBR04sT0FBT08sbUJBQW1CO0FBQUMsSUFBSUMsS0FBR1IsT0FBT1MsY0FBYyxFQUFDQyxLQUFHVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFBQyxJQUFJQyxLQUFHLENBQUNDLElBQUVDLElBQUVDLEtBQUlELE1BQUtELEtBQUVaLEdBQUdZLElBQUVDLElBQUU7UUFBQ0UsWUFBVyxDQUFDO1FBQUVDLGNBQWEsQ0FBQztRQUFFQyxVQUFTLENBQUM7UUFBRUMsT0FBTUo7SUFBQyxLQUFHRixFQUFDLENBQUNDLEdBQUUsR0FBQ0M7QUFBRSxJQUFJSyxJQUFFLENBQUNQLElBQUVDLEtBQUksSUFBS0EsQ0FBQUEsTUFBR0QsR0FBRSxDQUFDQyxLQUFFO1lBQUNPLFNBQVEsQ0FBQztRQUFDLEdBQUdBLE9BQU8sRUFBQ1AsS0FBR0EsR0FBRU8sT0FBTyxHQUFFQyxLQUFHLENBQUNULElBQUVDO0lBQUssSUFBSSxJQUFJQyxNQUFLRCxHQUFFYixHQUFHWSxJQUFFRSxJQUFFO1FBQUNRLEtBQUlULEVBQUMsQ0FBQ0MsR0FBRTtRQUFDQyxZQUFXLENBQUM7SUFBQztBQUFFLEdBQUVRLEtBQUcsQ0FBQ1gsSUFBRUMsSUFBRUMsSUFBRVU7SUFBSyxJQUFHWCxNQUFHLE9BQU9BLE1BQUcsWUFBVSxPQUFPQSxNQUFHLFlBQVcsS0FBSSxJQUFJWSxNQUFLckIsR0FBR1MsSUFBRyxDQUFDTCxHQUFHa0IsSUFBSSxDQUFDZCxJQUFFYSxPQUFJQSxPQUFJWCxNQUFHZCxHQUFHWSxJQUFFYSxJQUFFO1FBQUNILEtBQUksSUFBSVQsRUFBQyxDQUFDWSxHQUFFO1FBQUNWLFlB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RztRQUFDLElBQUk4WixHQUFHOVosSUFBRUM7UUFBR3NyRDtLQUFHLEdBQUM7UUFBQ3ZyRDtRQUFFMHJEO0tBQUc7QUFBQTtBQUFDLFNBQVMySCxHQUFHcnpELEVBQUM7SUFBRSxPQUFPeVgsTUFBTUMsT0FBTyxDQUFDMVgsT0FBSXlYLE1BQU1DLE9BQU8sQ0FBQzFYLEdBQUVnYixHQUFHO0FBQUM7QUFBQyxJQUFJczRDLEtBQUcsSUFBSTUyQyxJQUFJO0lBQUM7SUFBUztJQUFXO0lBQWtCK0csT0FBTzh2QyxRQUFRO0lBQUM5dkMsT0FBTzRKLFdBQVc7SUFBQzVKLE9BQU8rdkMsa0JBQWtCO0lBQUMvdkMsT0FBT2d3QyxXQUFXO0NBQUM7QUFBRSxTQUFTOTRDLEdBQUczYSxFQUFDO0lBQUUsT0FBTyxJQUFJaXlCLE1BQU1qeUIsSUFBRTtRQUFDVSxLQUFJVCxFQUFDLEVBQUNDLEVBQUM7WUFBRSxJQUFHQSxNQUFLRCxJQUFFLE9BQU9BLEVBQUMsQ0FBQ0MsR0FBRTtZQUFDLElBQUcsQ0FBQ296RCxHQUFHMzFDLEdBQUcsQ0FBQ3pkLEtBQUcsTUFBTSxJQUFJbU8sVUFBVSxDQUFDLG9CQUFvQixFQUFFaE0sT0FBT25DLElBQUcsQ0FBQztRQUFDO0lBQUM7QUFBRTtBQUFDLFNBQVNtYixHQUFHcmIsRUFBQztJQUFFNG9CLEdBQUc1b0IsSUFBRTtRQUFDK29CLGVBQWM7SUFBTTtBQUFFO0FBQUMsS0FBSXZOLENBQUFBLENBQThaLEdBQ3g4Qzs7Ozs7Ozs7OztBQVVBLElBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy8ucHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM/NWJmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjt2YXIgTGw9T2JqZWN0LmNyZWF0ZTt2YXIgUnQ9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciAkbD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBxbD1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lczt2YXIgVmw9T2JqZWN0LmdldFByb3RvdHlwZU9mLGpsPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIEJsPShlLHQscik9PnQgaW4gZT9SdChlLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnJ9KTplW3RdPXI7dmFyIFY9KGUsdCk9PigpPT4odHx8ZSgodD17ZXhwb3J0czp7fX0pLmV4cG9ydHMsdCksdC5leHBvcnRzKSxTdD0oZSx0KT0+e2Zvcih2YXIgciBpbiB0KVJ0KGUscix7Z2V0OnRbcl0sZW51bWVyYWJsZTohMH0pfSxYaT0oZSx0LHIsbik9PntpZih0JiZ0eXBlb2YgdD09XCJvYmplY3RcInx8dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIilmb3IobGV0IGkgb2YgcWwodCkpIWpsLmNhbGwoZSxpKSYmaSE9PXImJlJ0KGUsaSx7Z2V0OigpPT50W2ldLGVudW1lcmFibGU6IShuPSRsKHQsaSkpfHxuLmVudW1lcmFibGV9KTtyZXR1cm4gZX07dmFyIFM9KGUsdCxyKT0+KHI9ZSE9bnVsbD9MbChWbChlKSk6e30sWGkodHx8IWV8fCFlLl9fZXNNb2R1bGU/UnQocixcImRlZmF1bHRcIix7dmFsdWU6ZSxlbnVtZXJhYmxlOiEwfSk6cixlKSksVWw9ZT0+WGkoUnQoe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZSk7dmFyIGVvPShlLHQscik9PihCbChlLHR5cGVvZiB0IT1cInN5bWJvbFwiP3QrXCJcIjp0LHIpLHIpO3ZhciBjbz1WKCh4bSx1byk9PntcInVzZSBzdHJpY3RcIjt2YXIgcnQ9MWUzLG50PXJ0KjYwLGl0PW50KjYwLFFlPWl0KjI0LEtsPVFlKjcsUWw9UWUqMzY1LjI1O3VvLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt0PXR8fHt9O3ZhciByPXR5cGVvZiBlO2lmKHI9PT1cInN0cmluZ1wiJiZlLmxlbmd0aD4wKXJldHVybiBHbChlKTtpZihyPT09XCJudW1iZXJcIiYmaXNGaW5pdGUoZSkpcmV0dXJuIHQubG9uZz9IbChlKTpKbChlKTt0aHJvdyBuZXcgRXJyb3IoXCJ2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPVwiK0pTT04uc3RyaW5naWZ5KGUpKX07ZnVuY3Rpb24gR2woZSl7aWYoZT1TdHJpbmcoZSksIShlLmxlbmd0aD4xMDApKXt2YXIgdD0vXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoZSk7aWYodCl7dmFyIHI9cGFyc2VGbG9hdCh0WzFdKSxuPSh0WzJdfHxcIm1zXCIpLnRvTG93ZXJDYXNlKCk7c3dpdGNoKG4pe2Nhc2VcInllYXJzXCI6Y2FzZVwieWVhclwiOmNhc2VcInlyc1wiOmNhc2VcInlyXCI6Y2FzZVwieVwiOnJldHVybiByKlFsO2Nhc2VcIndlZWtzXCI6Y2FzZVwid2Vla1wiOmNhc2VcIndcIjpyZXR1cm4gcipLbDtjYXNlXCJkYXlzXCI6Y2FzZVwiZGF5XCI6Y2FzZVwiZFwiOnJldHVybiByKlFlO2Nhc2VcImhvdXJzXCI6Y2FzZVwiaG91clwiOmNhc2VcImhyc1wiOmNhc2VcImhyXCI6Y2FzZVwiaFwiOnJldHVybiByKml0O2Nhc2VcIm1pbnV0ZXNcIjpjYXNlXCJtaW51dGVcIjpjYXNlXCJtaW5zXCI6Y2FzZVwibWluXCI6Y2FzZVwibVwiOnJldHVybiByKm50O2Nhc2VcInNlY29uZHNcIjpjYXNlXCJzZWNvbmRcIjpjYXNlXCJzZWNzXCI6Y2FzZVwic2VjXCI6Y2FzZVwic1wiOnJldHVybiByKnJ0O2Nhc2VcIm1pbGxpc2Vjb25kc1wiOmNhc2VcIm1pbGxpc2Vjb25kXCI6Y2FzZVwibXNlY3NcIjpjYXNlXCJtc2VjXCI6Y2FzZVwibXNcIjpyZXR1cm4gcjtkZWZhdWx0OnJldHVybn19fX1mdW5jdGlvbiBKbChlKXt2YXIgdD1NYXRoLmFicyhlKTtyZXR1cm4gdD49UWU/TWF0aC5yb3VuZChlL1FlKStcImRcIjp0Pj1pdD9NYXRoLnJvdW5kKGUvaXQpK1wiaFwiOnQ+PW50P01hdGgucm91bmQoZS9udCkrXCJtXCI6dD49cnQ/TWF0aC5yb3VuZChlL3J0KStcInNcIjplK1wibXNcIn1mdW5jdGlvbiBIbChlKXt2YXIgdD1NYXRoLmFicyhlKTtyZXR1cm4gdD49UWU/YnIoZSx0LFFlLFwiZGF5XCIpOnQ+PWl0P2JyKGUsdCxpdCxcImhvdXJcIik6dD49bnQ/YnIoZSx0LG50LFwibWludXRlXCIpOnQ+PXJ0P2JyKGUsdCxydCxcInNlY29uZFwiKTplK1wiIG1zXCJ9ZnVuY3Rpb24gYnIoZSx0LHIsbil7dmFyIGk9dD49cioxLjU7cmV0dXJuIE1hdGgucm91bmQoZS9yKStcIiBcIituKyhpP1wic1wiOlwiXCIpfX0pO3ZhciBrbj1WKChibSxwbyk9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBXbChlKXtyLmRlYnVnPXIsci5kZWZhdWx0PXIsci5jb2VyY2U9bCxyLmRpc2FibGU9byxyLmVuYWJsZT1pLHIuZW5hYmxlZD1zLHIuaHVtYW5pemU9Y28oKSxyLmRlc3Ryb3k9dSxPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGM9PntyW2NdPWVbY119KSxyLm5hbWVzPVtdLHIuc2tpcHM9W10sci5mb3JtYXR0ZXJzPXt9O2Z1bmN0aW9uIHQoYyl7bGV0IHA9MDtmb3IobGV0IGQ9MDtkPGMubGVuZ3RoO2QrKylwPShwPDw1KS1wK2MuY2hhckNvZGVBdChkKSxwfD0wO3JldHVybiByLmNvbG9yc1tNYXRoLmFicyhwKSVyLmNvbG9ycy5sZW5ndGhdfXIuc2VsZWN0Q29sb3I9dDtmdW5jdGlvbiByKGMpe2xldCBwLGQ9bnVsbCxmLHk7ZnVuY3Rpb24gZyguLi5QKXtpZighZy5lbmFibGVkKXJldHVybjtsZXQgVD1nLEM9TnVtYmVyKG5ldyBEYXRlKSx4PUMtKHB8fEMpO1QuZGlmZj14LFQucHJldj1wLFQuY3Vycj1DLHA9QyxQWzBdPXIuY29lcmNlKFBbMF0pLHR5cGVvZiBQWzBdIT1cInN0cmluZ1wiJiZQLnVuc2hpZnQoXCIlT1wiKTtsZXQgTT0wO1BbMF09UFswXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywoSixLZSk9PntpZihKPT09XCIlJVwiKXJldHVyblwiJVwiO00rKztsZXQgJD1yLmZvcm1hdHRlcnNbS2VdO2lmKHR5cGVvZiAkPT1cImZ1bmN0aW9uXCIpe2xldCB6PVBbTV07Sj0kLmNhbGwoVCx6KSxQLnNwbGljZShNLDEpLE0tLX1yZXR1cm4gSn0pLHIuZm9ybWF0QXJncy5jYWxsKFQsUCksKFQubG9nfHxyLmxvZykuYXBwbHkoVCxQKX1yZXR1cm4gZy5uYW1lc3BhY2U9YyxnLnVzZUNvbG9ycz1yLnVzZUNvbG9ycygpLGcuY29sb3I9ci5zZWxlY3RDb2xvcihjKSxnLmV4dGVuZD1uLGcuZGVzdHJveT1yLmRlc3Ryb3ksT2JqZWN0LmRlZmluZVByb3BlcnR5KGcsXCJlbmFibGVkXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDooKT0+ZCE9PW51bGw/ZDooZiE9PXIubmFtZXNwYWNlcyYmKGY9ci5uYW1lc3BhY2VzLHk9ci5lbmFibGVkKGMpKSx5KSxzZXQ6UD0+e2Q9UH19KSx0eXBlb2Ygci5pbml0PT1cImZ1bmN0aW9uXCImJnIuaW5pdChnKSxnfWZ1bmN0aW9uIG4oYyxwKXtsZXQgZD1yKHRoaXMubmFtZXNwYWNlKyh0eXBlb2YgcD5cInVcIj9cIjpcIjpwKStjKTtyZXR1cm4gZC5sb2c9dGhpcy5sb2csZH1mdW5jdGlvbiBpKGMpe3Iuc2F2ZShjKSxyLm5hbWVzcGFjZXM9YyxyLm5hbWVzPVtdLHIuc2tpcHM9W107bGV0IHAsZD0odHlwZW9mIGM9PVwic3RyaW5nXCI/YzpcIlwiKS5zcGxpdCgvW1xccyxdKy8pLGY9ZC5sZW5ndGg7Zm9yKHA9MDtwPGY7cCsrKWRbcF0mJihjPWRbcF0ucmVwbGFjZSgvXFwqL2csXCIuKj9cIiksY1swXT09PVwiLVwiP3Iuc2tpcHMucHVzaChuZXcgUmVnRXhwKFwiXlwiK2Muc2xpY2UoMSkrXCIkXCIpKTpyLm5hbWVzLnB1c2gobmV3IFJlZ0V4cChcIl5cIitjK1wiJFwiKSkpfWZ1bmN0aW9uIG8oKXtsZXQgYz1bLi4uci5uYW1lcy5tYXAoYSksLi4uci5za2lwcy5tYXAoYSkubWFwKHA9PlwiLVwiK3ApXS5qb2luKFwiLFwiKTtyZXR1cm4gci5lbmFibGUoXCJcIiksY31mdW5jdGlvbiBzKGMpe2lmKGNbYy5sZW5ndGgtMV09PT1cIipcIilyZXR1cm4hMDtsZXQgcCxkO2ZvcihwPTAsZD1yLnNraXBzLmxlbmd0aDtwPGQ7cCsrKWlmKHIuc2tpcHNbcF0udGVzdChjKSlyZXR1cm4hMTtmb3IocD0wLGQ9ci5uYW1lcy5sZW5ndGg7cDxkO3ArKylpZihyLm5hbWVzW3BdLnRlc3QoYykpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gYShjKXtyZXR1cm4gYy50b1N0cmluZygpLnN1YnN0cmluZygyLGMudG9TdHJpbmcoKS5sZW5ndGgtMikucmVwbGFjZSgvXFwuXFwqXFw/JC8sXCIqXCIpfWZ1bmN0aW9uIGwoYyl7cmV0dXJuIGMgaW5zdGFuY2VvZiBFcnJvcj9jLnN0YWNrfHxjLm1lc3NhZ2U6Y31mdW5jdGlvbiB1KCl7Y29uc29sZS53YXJuKFwiSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLlwiKX1yZXR1cm4gci5lbmFibGUoci5sb2FkKCkpLHJ9cG8uZXhwb3J0cz1XbH0pO3ZhciBtbz1WKChsZSxFcik9PntcInVzZSBzdHJpY3RcIjtsZS5mb3JtYXRBcmdzPVlsO2xlLnNhdmU9Wmw7bGUubG9hZD1YbDtsZS51c2VDb2xvcnM9emw7bGUuc3RvcmFnZT1ldSgpO2xlLmRlc3Ryb3k9KCgpPT57bGV0IGU9ITE7cmV0dXJuKCk9PntlfHwoZT0hMCxjb25zb2xlLndhcm4oXCJJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuXCIpKX19KSgpO2xlLmNvbG9ycz1bXCIjMDAwMENDXCIsXCIjMDAwMEZGXCIsXCIjMDAzM0NDXCIsXCIjMDAzM0ZGXCIsXCIjMDA2NkNDXCIsXCIjMDA2NkZGXCIsXCIjMDA5OUNDXCIsXCIjMDA5OUZGXCIsXCIjMDBDQzAwXCIsXCIjMDBDQzMzXCIsXCIjMDBDQzY2XCIsXCIjMDBDQzk5XCIsXCIjMDBDQ0NDXCIsXCIjMDBDQ0ZGXCIsXCIjMzMwMENDXCIsXCIjMzMwMEZGXCIsXCIjMzMzM0NDXCIsXCIjMzMzM0ZGXCIsXCIjMzM2NkNDXCIsXCIjMzM2NkZGXCIsXCIjMzM5OUNDXCIsXCIjMzM5OUZGXCIsXCIjMzNDQzAwXCIsXCIjMzNDQzMzXCIsXCIjMzNDQzY2XCIsXCIjMzNDQzk5XCIsXCIjMzNDQ0NDXCIsXCIjMzNDQ0ZGXCIsXCIjNjYwMENDXCIsXCIjNjYwMEZGXCIsXCIjNjYzM0NDXCIsXCIjNjYzM0ZGXCIsXCIjNjZDQzAwXCIsXCIjNjZDQzMzXCIsXCIjOTkwMENDXCIsXCIjOTkwMEZGXCIsXCIjOTkzM0NDXCIsXCIjOTkzM0ZGXCIsXCIjOTlDQzAwXCIsXCIjOTlDQzMzXCIsXCIjQ0MwMDAwXCIsXCIjQ0MwMDMzXCIsXCIjQ0MwMDY2XCIsXCIjQ0MwMDk5XCIsXCIjQ0MwMENDXCIsXCIjQ0MwMEZGXCIsXCIjQ0MzMzAwXCIsXCIjQ0MzMzMzXCIsXCIjQ0MzMzY2XCIsXCIjQ0MzMzk5XCIsXCIjQ0MzM0NDXCIsXCIjQ0MzM0ZGXCIsXCIjQ0M2NjAwXCIsXCIjQ0M2NjMzXCIsXCIjQ0M5OTAwXCIsXCIjQ0M5OTMzXCIsXCIjQ0NDQzAwXCIsXCIjQ0NDQzMzXCIsXCIjRkYwMDAwXCIsXCIjRkYwMDMzXCIsXCIjRkYwMDY2XCIsXCIjRkYwMDk5XCIsXCIjRkYwMENDXCIsXCIjRkYwMEZGXCIsXCIjRkYzMzAwXCIsXCIjRkYzMzMzXCIsXCIjRkYzMzY2XCIsXCIjRkYzMzk5XCIsXCIjRkYzM0NDXCIsXCIjRkYzM0ZGXCIsXCIjRkY2NjAwXCIsXCIjRkY2NjMzXCIsXCIjRkY5OTAwXCIsXCIjRkY5OTMzXCIsXCIjRkZDQzAwXCIsXCIjRkZDQzMzXCJdO2Z1bmN0aW9uIHpsKCl7cmV0dXJuIHR5cGVvZiB3aW5kb3c8XCJ1XCImJndpbmRvdy5wcm9jZXNzJiYod2luZG93LnByb2Nlc3MudHlwZT09PVwicmVuZGVyZXJcInx8d2luZG93LnByb2Nlc3MuX19ud2pzKT8hMDp0eXBlb2YgbmF2aWdhdG9yPFwidVwiJiZuYXZpZ2F0b3IudXNlckFnZW50JiZuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLyk/ITE6dHlwZW9mIGRvY3VtZW50PFwidVwiJiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2V8fHR5cGVvZiB3aW5kb3c8XCJ1XCImJndpbmRvdy5jb25zb2xlJiYod2luZG93LmNvbnNvbGUuZmlyZWJ1Z3x8d2luZG93LmNvbnNvbGUuZXhjZXB0aW9uJiZ3aW5kb3cuY29uc29sZS50YWJsZSl8fHR5cGVvZiBuYXZpZ2F0b3I8XCJ1XCImJm5hdmlnYXRvci51c2VyQWdlbnQmJm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pJiZwYXJzZUludChSZWdFeHAuJDEsMTApPj0zMXx8dHlwZW9mIG5hdmlnYXRvcjxcInVcIiYmbmF2aWdhdG9yLnVzZXJBZ2VudCYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pfWZ1bmN0aW9uIFlsKGUpe2lmKGVbMF09KHRoaXMudXNlQ29sb3JzP1wiJWNcIjpcIlwiKSt0aGlzLm5hbWVzcGFjZSsodGhpcy51c2VDb2xvcnM/XCIgJWNcIjpcIiBcIikrZVswXSsodGhpcy51c2VDb2xvcnM/XCIlYyBcIjpcIiBcIikrXCIrXCIrRXIuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpLCF0aGlzLnVzZUNvbG9ycylyZXR1cm47bGV0IHQ9XCJjb2xvcjogXCIrdGhpcy5jb2xvcjtlLnNwbGljZSgxLDAsdCxcImNvbG9yOiBpbmhlcml0XCIpO2xldCByPTAsbj0wO2VbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLGk9PntpIT09XCIlJVwiJiYocisrLGk9PT1cIiVjXCImJihuPXIpKX0pLGUuc3BsaWNlKG4sMCx0KX1sZS5sb2c9Y29uc29sZS5kZWJ1Z3x8Y29uc29sZS5sb2d8fCgoKT0+e30pO2Z1bmN0aW9uIFpsKGUpe3RyeXtlP2xlLnN0b3JhZ2Uuc2V0SXRlbShcImRlYnVnXCIsZSk6bGUuc3RvcmFnZS5yZW1vdmVJdGVtKFwiZGVidWdcIil9Y2F0Y2h7fX1mdW5jdGlvbiBYbCgpe2xldCBlO3RyeXtlPWxlLnN0b3JhZ2UuZ2V0SXRlbShcImRlYnVnXCIpfWNhdGNoe31yZXR1cm4hZSYmdHlwZW9mIHByb2Nlc3M8XCJ1XCImJlwiZW52XCJpbiBwcm9jZXNzJiYoZT1wcm9jZXNzLmVudi5ERUJVRyksZX1mdW5jdGlvbiBldSgpe3RyeXtyZXR1cm4gbG9jYWxTdG9yYWdlfWNhdGNoe319RXIuZXhwb3J0cz1rbigpKGxlKTt2YXJ7Zm9ybWF0dGVyczp0dX09RXIuZXhwb3J0czt0dS5qPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSl9Y2F0Y2godCl7cmV0dXJuXCJbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogXCIrdC5tZXNzYWdlfX19KTt2YXIgRm49VigoRW0sZm8pPT57XCJ1c2Ugc3RyaWN0XCI7Zm8uZXhwb3J0cz0oZSx0PXByb2Nlc3MuYXJndik9PntsZXQgcj1lLnN0YXJ0c1dpdGgoXCItXCIpP1wiXCI6ZS5sZW5ndGg9PT0xP1wiLVwiOlwiLS1cIixuPXQuaW5kZXhPZihyK2UpLGk9dC5pbmRleE9mKFwiLS1cIik7cmV0dXJuIG4hPT0tMSYmKGk9PT0tMXx8bjxpKX19KTt2YXIgX249Vigod20seW8pPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHJ1PXJlcXVpcmUoXCJvc1wiKSxnbz1yZXF1aXJlKFwidHR5XCIpLGRlPUZuKCkse2VudjpCfT1wcm9jZXNzLGtlO2RlKFwibm8tY29sb3JcIil8fGRlKFwibm8tY29sb3JzXCIpfHxkZShcImNvbG9yPWZhbHNlXCIpfHxkZShcImNvbG9yPW5ldmVyXCIpP2tlPTA6KGRlKFwiY29sb3JcIil8fGRlKFwiY29sb3JzXCIpfHxkZShcImNvbG9yPXRydWVcIil8fGRlKFwiY29sb3I9YWx3YXlzXCIpKSYmKGtlPTEpO1wiRk9SQ0VfQ09MT1JcImluIEImJihCLkZPUkNFX0NPTE9SPT09XCJ0cnVlXCI/a2U9MTpCLkZPUkNFX0NPTE9SPT09XCJmYWxzZVwiP2tlPTA6a2U9Qi5GT1JDRV9DT0xPUi5sZW5ndGg9PT0wPzE6TWF0aC5taW4ocGFyc2VJbnQoQi5GT1JDRV9DT0xPUiwxMCksMykpO2Z1bmN0aW9uIERuKGUpe3JldHVybiBlPT09MD8hMTp7bGV2ZWw6ZSxoYXNCYXNpYzohMCxoYXMyNTY6ZT49MixoYXMxNm06ZT49M319ZnVuY3Rpb24gT24oZSx0KXtpZihrZT09PTApcmV0dXJuIDA7aWYoZGUoXCJjb2xvcj0xNm1cIil8fGRlKFwiY29sb3I9ZnVsbFwiKXx8ZGUoXCJjb2xvcj10cnVlY29sb3JcIikpcmV0dXJuIDM7aWYoZGUoXCJjb2xvcj0yNTZcIikpcmV0dXJuIDI7aWYoZSYmIXQmJmtlPT09dm9pZCAwKXJldHVybiAwO2xldCByPWtlfHwwO2lmKEIuVEVSTT09PVwiZHVtYlwiKXJldHVybiByO2lmKHByb2Nlc3MucGxhdGZvcm09PT1cIndpbjMyXCIpe2xldCBuPXJ1LnJlbGVhc2UoKS5zcGxpdChcIi5cIik7cmV0dXJuIE51bWJlcihuWzBdKT49MTAmJk51bWJlcihuWzJdKT49MTA1ODY/TnVtYmVyKG5bMl0pPj0xNDkzMT8zOjI6MX1pZihcIkNJXCJpbiBCKXJldHVybltcIlRSQVZJU1wiLFwiQ0lSQ0xFQ0lcIixcIkFQUFZFWU9SXCIsXCJHSVRMQUJfQ0lcIixcIkdJVEhVQl9BQ1RJT05TXCIsXCJCVUlMREtJVEVcIl0uc29tZShuPT5uIGluIEIpfHxCLkNJX05BTUU9PT1cImNvZGVzaGlwXCI/MTpyO2lmKFwiVEVBTUNJVFlfVkVSU0lPTlwiaW4gQilyZXR1cm4vXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8udGVzdChCLlRFQU1DSVRZX1ZFUlNJT04pPzE6MDtpZihCLkNPTE9SVEVSTT09PVwidHJ1ZWNvbG9yXCIpcmV0dXJuIDM7aWYoXCJURVJNX1BST0dSQU1cImluIEIpe2xldCBuPXBhcnNlSW50KChCLlRFUk1fUFJPR1JBTV9WRVJTSU9OfHxcIlwiKS5zcGxpdChcIi5cIilbMF0sMTApO3N3aXRjaChCLlRFUk1fUFJPR1JBTSl7Y2FzZVwiaVRlcm0uYXBwXCI6cmV0dXJuIG4+PTM/MzoyO2Nhc2VcIkFwcGxlX1Rlcm1pbmFsXCI6cmV0dXJuIDJ9fXJldHVybi8tMjU2KGNvbG9yKT8kL2kudGVzdChCLlRFUk0pPzI6L15zY3JlZW58Xnh0ZXJtfF52dDEwMHxednQyMjB8XnJ4dnR8Y29sb3J8YW5zaXxjeWd3aW58bGludXgvaS50ZXN0KEIuVEVSTSl8fFwiQ09MT1JURVJNXCJpbiBCPzE6cn1mdW5jdGlvbiBudShlKXtsZXQgdD1PbihlLGUmJmUuaXNUVFkpO3JldHVybiBEbih0KX15by5leHBvcnRzPXtzdXBwb3J0c0NvbG9yOm51LHN0ZG91dDpEbihPbighMCxnby5pc2F0dHkoMSkpKSxzdGRlcnI6RG4oT24oITAsZ28uaXNhdHR5KDIpKSl9fSk7dmFyIHhvPVYoKEgsUHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGl1PXJlcXVpcmUoXCJ0dHlcIiksd3I9cmVxdWlyZShcInV0aWxcIik7SC5pbml0PXB1O0gubG9nPWx1O0guZm9ybWF0QXJncz1zdTtILnNhdmU9dXU7SC5sb2FkPWN1O0gudXNlQ29sb3JzPW91O0guZGVzdHJveT13ci5kZXByZWNhdGUoKCk9Pnt9LFwiSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLlwiKTtILmNvbG9ycz1bNiwyLDMsNCw1LDFdO3RyeXtsZXQgZT1fbigpO2UmJihlLnN0ZGVycnx8ZSkubGV2ZWw+PTImJihILmNvbG9ycz1bMjAsMjEsMjYsMjcsMzIsMzMsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNTYsNTcsNjIsNjMsNjgsNjksNzQsNzUsNzYsNzcsNzgsNzksODAsODEsOTIsOTMsOTgsOTksMTEyLDExMywxMjgsMTI5LDEzNCwxMzUsMTQ4LDE0OSwxNjAsMTYxLDE2MiwxNjMsMTY0LDE2NSwxNjYsMTY3LDE2OCwxNjksMTcwLDE3MSwxNzIsMTczLDE3OCwxNzksMTg0LDE4NSwxOTYsMTk3LDE5OCwxOTksMjAwLDIwMSwyMDIsMjAzLDIwNCwyMDUsMjA2LDIwNywyMDgsMjA5LDIxNCwyMTUsMjIwLDIyMV0pfWNhdGNoe31ILmluc3BlY3RPcHRzPU9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoZT0+L15kZWJ1Z18vaS50ZXN0KGUpKS5yZWR1Y2UoKGUsdCk9PntsZXQgcj10LnN1YnN0cmluZyg2KS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL18oW2Etel0pL2csKGksbyk9Pm8udG9VcHBlckNhc2UoKSksbj1wcm9jZXNzLmVudlt0XTtyZXR1cm4vXih5ZXN8b258dHJ1ZXxlbmFibGVkKSQvaS50ZXN0KG4pP249ITA6L14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KG4pP249ITE6bj09PVwibnVsbFwiP249bnVsbDpuPU51bWJlcihuKSxlW3JdPW4sZX0se30pO2Z1bmN0aW9uIG91KCl7cmV0dXJuXCJjb2xvcnNcImluIEguaW5zcGVjdE9wdHM/ISFILmluc3BlY3RPcHRzLmNvbG9yczppdS5pc2F0dHkocHJvY2Vzcy5zdGRlcnIuZmQpfWZ1bmN0aW9uIHN1KGUpe2xldHtuYW1lc3BhY2U6dCx1c2VDb2xvcnM6cn09dGhpcztpZihyKXtsZXQgbj10aGlzLmNvbG9yLGk9XCJcXHgxQlszXCIrKG48OD9uOlwiODs1O1wiK24pLG89YCAgJHtpfTsxbSR7dH0gXFx4MUJbMG1gO2VbMF09bytlWzBdLnNwbGl0KGBcbmApLmpvaW4oYFxuYCtvKSxlLnB1c2goaStcIm0rXCIrUHIuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpK1wiXFx4MUJbMG1cIil9ZWxzZSBlWzBdPWF1KCkrdCtcIiBcIitlWzBdfWZ1bmN0aW9uIGF1KCl7cmV0dXJuIEguaW5zcGVjdE9wdHMuaGlkZURhdGU/XCJcIjpuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkrXCIgXCJ9ZnVuY3Rpb24gbHUoLi4uZSl7cmV0dXJuIHByb2Nlc3Muc3RkZXJyLndyaXRlKHdyLmZvcm1hdCguLi5lKStgXG5gKX1mdW5jdGlvbiB1dShlKXtlP3Byb2Nlc3MuZW52LkRFQlVHPWU6ZGVsZXRlIHByb2Nlc3MuZW52LkRFQlVHfWZ1bmN0aW9uIGN1KCl7cmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHfWZ1bmN0aW9uIHB1KGUpe2UuaW5zcGVjdE9wdHM9e307bGV0IHQ9T2JqZWN0LmtleXMoSC5pbnNwZWN0T3B0cyk7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspZS5pbnNwZWN0T3B0c1t0W3JdXT1ILmluc3BlY3RPcHRzW3Rbcl1dfVByLmV4cG9ydHM9a24oKShIKTt2YXJ7Zm9ybWF0dGVyczpob309UHIuZXhwb3J0cztoby5vPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmluc3BlY3RPcHRzLmNvbG9ycz10aGlzLnVzZUNvbG9ycyx3ci5pbnNwZWN0KGUsdGhpcy5pbnNwZWN0T3B0cykuc3BsaXQoYFxuYCkubWFwKHQ9PnQudHJpbSgpKS5qb2luKFwiIFwiKX07aG8uTz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnM9dGhpcy51c2VDb2xvcnMsd3IuaW5zcGVjdChlLHRoaXMuaW5zcGVjdE9wdHMpfX0pO3ZhciBMbj1WKChQbSxObik9PntcInVzZSBzdHJpY3RcIjt0eXBlb2YgcHJvY2Vzcz5cInVcInx8cHJvY2Vzcy50eXBlPT09XCJyZW5kZXJlclwifHxwcm9jZXNzLmJyb3dzZXI9PT0hMHx8cHJvY2Vzcy5fX253anM/Tm4uZXhwb3J0cz1tbygpOk5uLmV4cG9ydHM9eG8oKX0pO3ZhciBTbz1WKChlZixVbik9PntcInVzZSBzdHJpY3RcIjt2YXIgQT1Vbi5leHBvcnRzO1VuLmV4cG9ydHMuZGVmYXVsdD1BO3ZhciBJPVwiXFx4MUJbXCIsa3Q9XCJcXHgxQl1cIixhdD1cIlxceDA3XCIsTXI9XCI7XCIsUm89cHJvY2Vzcy5lbnYuVEVSTV9QUk9HUkFNPT09XCJBcHBsZV9UZXJtaW5hbFwiO0EuY3Vyc29yVG89KGUsdCk9PntpZih0eXBlb2YgZSE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGB4YCBhcmd1bWVudCBpcyByZXF1aXJlZFwiKTtyZXR1cm4gdHlwZW9mIHQhPVwibnVtYmVyXCI/SSsoZSsxKStcIkdcIjpJKyh0KzEpK1wiO1wiKyhlKzEpK1wiSFwifTtBLmN1cnNvck1vdmU9KGUsdCk9PntpZih0eXBlb2YgZSE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGB4YCBhcmd1bWVudCBpcyByZXF1aXJlZFwiKTtsZXQgcj1cIlwiO3JldHVybiBlPDA/cis9SSstZStcIkRcIjplPjAmJihyKz1JK2UrXCJDXCIpLHQ8MD9yKz1JKy10K1wiQVwiOnQ+MCYmKHIrPUkrdCtcIkJcIikscn07QS5jdXJzb3JVcD0oZT0xKT0+SStlK1wiQVwiO0EuY3Vyc29yRG93bj0oZT0xKT0+SStlK1wiQlwiO0EuY3Vyc29yRm9yd2FyZD0oZT0xKT0+SStlK1wiQ1wiO0EuY3Vyc29yQmFja3dhcmQ9KGU9MSk9PkkrZStcIkRcIjtBLmN1cnNvckxlZnQ9SStcIkdcIjtBLmN1cnNvclNhdmVQb3NpdGlvbj1Sbz9cIlxceDFCN1wiOkkrXCJzXCI7QS5jdXJzb3JSZXN0b3JlUG9zaXRpb249Um8/XCJcXHgxQjhcIjpJK1widVwiO0EuY3Vyc29yR2V0UG9zaXRpb249SStcIjZuXCI7QS5jdXJzb3JOZXh0TGluZT1JK1wiRVwiO0EuY3Vyc29yUHJldkxpbmU9SStcIkZcIjtBLmN1cnNvckhpZGU9SStcIj8yNWxcIjtBLmN1cnNvclNob3c9SStcIj8yNWhcIjtBLmVyYXNlTGluZXM9ZT0+e2xldCB0PVwiXCI7Zm9yKGxldCByPTA7cjxlO3IrKyl0Kz1BLmVyYXNlTGluZSsocjxlLTE/QS5jdXJzb3JVcCgpOlwiXCIpO3JldHVybiBlJiYodCs9QS5jdXJzb3JMZWZ0KSx0fTtBLmVyYXNlRW5kTGluZT1JK1wiS1wiO0EuZXJhc2VTdGFydExpbmU9SStcIjFLXCI7QS5lcmFzZUxpbmU9SStcIjJLXCI7QS5lcmFzZURvd249SStcIkpcIjtBLmVyYXNlVXA9SStcIjFKXCI7QS5lcmFzZVNjcmVlbj1JK1wiMkpcIjtBLnNjcm9sbFVwPUkrXCJTXCI7QS5zY3JvbGxEb3duPUkrXCJUXCI7QS5jbGVhclNjcmVlbj1cIlxceDFCY1wiO0EuY2xlYXJUZXJtaW5hbD1wcm9jZXNzLnBsYXRmb3JtPT09XCJ3aW4zMlwiP2Ake0EuZXJhc2VTY3JlZW59JHtJfTBmYDpgJHtBLmVyYXNlU2NyZWVufSR7SX0zSiR7SX1IYDtBLmJlZXA9YXQ7QS5saW5rPShlLHQpPT5ba3QsXCI4XCIsTXIsTXIsdCxhdCxlLGt0LFwiOFwiLE1yLE1yLGF0XS5qb2luKFwiXCIpO0EuaW1hZ2U9KGUsdD17fSk9PntsZXQgcj1gJHtrdH0xMzM3O0ZpbGU9aW5saW5lPTFgO3JldHVybiB0LndpZHRoJiYocis9YDt3aWR0aD0ke3Qud2lkdGh9YCksdC5oZWlnaHQmJihyKz1gO2hlaWdodD0ke3QuaGVpZ2h0fWApLHQucHJlc2VydmVBc3BlY3RSYXRpbz09PSExJiYocis9XCI7cHJlc2VydmVBc3BlY3RSYXRpbz0wXCIpLHIrXCI6XCIrZS50b1N0cmluZyhcImJhc2U2NFwiKSthdH07QS5pVGVybT17c2V0Q3dkOihlPXByb2Nlc3MuY3dkKCkpPT5gJHtrdH01MDtDdXJyZW50RGlyPSR7ZX0ke2F0fWAsYW5ub3RhdGlvbjooZSx0PXt9KT0+e2xldCByPWAke2t0fTEzMzc7YCxuPXR5cGVvZiB0Lng8XCJ1XCIsaT10eXBlb2YgdC55PFwidVwiO2lmKChufHxpKSYmIShuJiZpJiZ0eXBlb2YgdC5sZW5ndGg8XCJ1XCIpKXRocm93IG5ldyBFcnJvcihcImB4YCwgYHlgIGFuZCBgbGVuZ3RoYCBtdXN0IGJlIGRlZmluZWQgd2hlbiBgeGAgb3IgYHlgIGlzIGRlZmluZWRcIik7cmV0dXJuIGU9ZS5yZXBsYWNlKC9cXHwvZyxcIlwiKSxyKz10LmlzSGlkZGVuP1wiQWRkSGlkZGVuQW5ub3RhdGlvbj1cIjpcIkFkZEFubm90YXRpb249XCIsdC5sZW5ndGg+MD9yKz0obj9bZSx0Lmxlbmd0aCx0LngsdC55XTpbdC5sZW5ndGgsZV0pLmpvaW4oXCJ8XCIpOnIrPWUscithdH19fSk7dmFyIEZvPVYoKHRmLGtvKT0+e1widXNlIHN0cmljdFwiO3ZhciBodT1fbigpLGx0PUZuKCk7ZnVuY3Rpb24gSW8oZSl7aWYoL15cXGR7Myw0fSQvLnRlc3QoZSkpe2xldCByPS8oXFxkezEsMn0pKFxcZHsyfSkvLmV4ZWMoZSk7cmV0dXJue21ham9yOjAsbWlub3I6cGFyc2VJbnQoclsxXSwxMCkscGF0Y2g6cGFyc2VJbnQoclsyXSwxMCl9fWxldCB0PShlfHxcIlwiKS5zcGxpdChcIi5cIikubWFwKHI9PnBhcnNlSW50KHIsMTApKTtyZXR1cm57bWFqb3I6dFswXSxtaW5vcjp0WzFdLHBhdGNoOnRbMl19fWZ1bmN0aW9uIEtuKGUpe2xldHtlbnY6dH09cHJvY2VzcztpZihcIkZPUkNFX0hZUEVSTElOS1wiaW4gdClyZXR1cm4hKHQuRk9SQ0VfSFlQRVJMSU5LLmxlbmd0aD4wJiZwYXJzZUludCh0LkZPUkNFX0hZUEVSTElOSywxMCk9PT0wKTtpZihsdChcIm5vLWh5cGVybGlua1wiKXx8bHQoXCJuby1oeXBlcmxpbmtzXCIpfHxsdChcImh5cGVybGluaz1mYWxzZVwiKXx8bHQoXCJoeXBlcmxpbms9bmV2ZXJcIikpcmV0dXJuITE7aWYobHQoXCJoeXBlcmxpbms9dHJ1ZVwiKXx8bHQoXCJoeXBlcmxpbms9YWx3YXlzXCIpfHxcIk5FVExJRllcImluIHQpcmV0dXJuITA7aWYoIWh1LnN1cHBvcnRzQ29sb3IoZSl8fGUmJiFlLmlzVFRZfHxwcm9jZXNzLnBsYXRmb3JtPT09XCJ3aW4zMlwifHxcIkNJXCJpbiB0fHxcIlRFQU1DSVRZX1ZFUlNJT05cImluIHQpcmV0dXJuITE7aWYoXCJURVJNX1BST0dSQU1cImluIHQpe2xldCByPUlvKHQuVEVSTV9QUk9HUkFNX1ZFUlNJT04pO3N3aXRjaCh0LlRFUk1fUFJPR1JBTSl7Y2FzZVwiaVRlcm0uYXBwXCI6cmV0dXJuIHIubWFqb3I9PT0zP3IubWlub3I+PTE6ci5tYWpvcj4zO2Nhc2VcIldlelRlcm1cIjpyZXR1cm4gci5tYWpvcj49MjAyMDA2MjA7Y2FzZVwidnNjb2RlXCI6cmV0dXJuIHIubWFqb3I+MXx8ci5tYWpvcj09PTEmJnIubWlub3I+PTcyfX1pZihcIlZURV9WRVJTSU9OXCJpbiB0KXtpZih0LlZURV9WRVJTSU9OPT09XCIwLjUwLjBcIilyZXR1cm4hMTtsZXQgcj1Jbyh0LlZURV9WRVJTSU9OKTtyZXR1cm4gci5tYWpvcj4wfHxyLm1pbm9yPj01MH1yZXR1cm4hMX1rby5leHBvcnRzPXtzdXBwb3J0c0h5cGVybGluazpLbixzdGRvdXQ6S24ocHJvY2Vzcy5zdGRvdXQpLHN0ZGVycjpLbihwcm9jZXNzLnN0ZGVycil9fSk7dmFyIE9vPVYoKHJmLEZ0KT0+e1widXNlIHN0cmljdFwiO3ZhciB4dT1TbygpLFFuPUZvKCksRG89KGUsdCx7dGFyZ2V0OnI9XCJzdGRvdXRcIiwuLi5ufT17fSk9PlFuW3JdP3h1LmxpbmsoZSx0KTpuLmZhbGxiYWNrPT09ITE/ZTp0eXBlb2Ygbi5mYWxsYmFjaz09XCJmdW5jdGlvblwiP24uZmFsbGJhY2soZSx0KTpgJHtlfSAoXFx1MjAwQiR7dH1cXHUyMDBCKWA7RnQuZXhwb3J0cz0oZSx0LHI9e30pPT5EbyhlLHQscik7RnQuZXhwb3J0cy5zdGRlcnI9KGUsdCxyPXt9KT0+RG8oZSx0LHt0YXJnZXQ6XCJzdGRlcnJcIiwuLi5yfSk7RnQuZXhwb3J0cy5pc1N1cHBvcnRlZD1Rbi5zdGRvdXQ7RnQuZXhwb3J0cy5zdGRlcnIuaXNTdXBwb3J0ZWQ9UW4uc3RkZXJyfSk7dmFyIEtvPVYoKHdmLER1KT0+e0R1LmV4cG9ydHM9e25hbWU6XCJkb3RlbnZcIix2ZXJzaW9uOlwiMTYuMC4zXCIsZGVzY3JpcHRpb246XCJMb2FkcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSAuZW52IGZpbGVcIixtYWluOlwibGliL21haW4uanNcIix0eXBlczpcImxpYi9tYWluLmQudHNcIixleHBvcnRzOntcIi5cIjp7cmVxdWlyZTpcIi4vbGliL21haW4uanNcIix0eXBlczpcIi4vbGliL21haW4uZC50c1wiLGRlZmF1bHQ6XCIuL2xpYi9tYWluLmpzXCJ9LFwiLi9jb25maWdcIjpcIi4vY29uZmlnLmpzXCIsXCIuL2NvbmZpZy5qc1wiOlwiLi9jb25maWcuanNcIixcIi4vbGliL2Vudi1vcHRpb25zXCI6XCIuL2xpYi9lbnYtb3B0aW9ucy5qc1wiLFwiLi9saWIvZW52LW9wdGlvbnMuanNcIjpcIi4vbGliL2Vudi1vcHRpb25zLmpzXCIsXCIuL2xpYi9jbGktb3B0aW9uc1wiOlwiLi9saWIvY2xpLW9wdGlvbnMuanNcIixcIi4vbGliL2NsaS1vcHRpb25zLmpzXCI6XCIuL2xpYi9jbGktb3B0aW9ucy5qc1wiLFwiLi9wYWNrYWdlLmpzb25cIjpcIi4vcGFja2FnZS5qc29uXCJ9LHNjcmlwdHM6e1wiZHRzLWNoZWNrXCI6XCJ0c2MgLS1wcm9qZWN0IHRlc3RzL3R5cGVzL3RzY29uZmlnLmpzb25cIixsaW50Olwic3RhbmRhcmRcIixcImxpbnQtcmVhZG1lXCI6XCJzdGFuZGFyZC1tYXJrZG93blwiLHByZXRlc3Q6XCJucG0gcnVuIGxpbnQgJiYgbnBtIHJ1biBkdHMtY2hlY2tcIix0ZXN0OlwidGFwIHRlc3RzLyouanMgLS0xMDAgLVJzcGVjXCIscHJlcmVsZWFzZTpcIm5wbSB0ZXN0XCIscmVsZWFzZTpcInN0YW5kYXJkLXZlcnNpb25cIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbW90ZG90bGEvZG90ZW52LmdpdFwifSxrZXl3b3JkczpbXCJkb3RlbnZcIixcImVudlwiLFwiLmVudlwiLFwiZW52aXJvbm1lbnRcIixcInZhcmlhYmxlc1wiLFwiY29uZmlnXCIsXCJzZXR0aW5nc1wiXSxyZWFkbWVGaWxlbmFtZTpcIlJFQURNRS5tZFwiLGxpY2Vuc2U6XCJCU0QtMi1DbGF1c2VcIixkZXZEZXBlbmRlbmNpZXM6e1wiQHR5cGVzL25vZGVcIjpcIl4xNy4wLjlcIixkZWNhY2hlOlwiXjQuNi4xXCIsZHRzbGludDpcIl4zLjcuMFwiLHNpbm9uOlwiXjEyLjAuMVwiLHN0YW5kYXJkOlwiXjE2LjAuNFwiLFwic3RhbmRhcmQtbWFya2Rvd25cIjpcIl43LjEuMFwiLFwic3RhbmRhcmQtdmVyc2lvblwiOlwiXjkuMy4yXCIsdGFwOlwiXjE1LjEuNlwiLHRhcjpcIl42LjEuMTFcIix0eXBlc2NyaXB0OlwiXjQuNS40XCJ9LGVuZ2luZXM6e25vZGU6XCI+PTEyXCJ9fX0pO3ZhciBHbz1WKChQZixGcik9PntcInVzZSBzdHJpY3RcIjt2YXIgT3U9cmVxdWlyZShcImZzXCIpLFFvPXJlcXVpcmUoXCJwYXRoXCIpLF91PXJlcXVpcmUoXCJvc1wiKSxOdT1LbygpLEx1PU51LnZlcnNpb24sJHU9Lyg/Ol58XilcXHMqKD86ZXhwb3J0XFxzKyk/KFtcXHcuLV0rKSg/Olxccyo9XFxzKj98Olxccys/KShcXHMqJyg/OlxcXFwnfFteJ10pKid8XFxzKlwiKD86XFxcXFwifFteXCJdKSpcInxcXHMqYCg/OlxcXFxgfFteYF0pKmB8W14jXFxyXFxuXSspP1xccyooPzojLiopPyg/OiR8JCkvbWc7ZnVuY3Rpb24gcXUoZSl7bGV0IHQ9e30scj1lLnRvU3RyaW5nKCk7cj1yLnJlcGxhY2UoL1xcclxcbj8vbWcsYFxuYCk7bGV0IG47Zm9yKDsobj0kdS5leGVjKHIpKSE9bnVsbDspe2xldCBpPW5bMV0sbz1uWzJdfHxcIlwiO289by50cmltKCk7bGV0IHM9b1swXTtvPW8ucmVwbGFjZSgvXihbJ1wiYF0pKFtcXHNcXFNdKilcXDEkL21nLFwiJDJcIikscz09PSdcIicmJihvPW8ucmVwbGFjZSgvXFxcXG4vZyxgXG5gKSxvPW8ucmVwbGFjZSgvXFxcXHIvZyxcIlxcclwiKSksdFtpXT1vfXJldHVybiB0fWZ1bmN0aW9uIFduKGUpe2NvbnNvbGUubG9nKGBbZG90ZW52QCR7THV9XVtERUJVR10gJHtlfWApfWZ1bmN0aW9uIFZ1KGUpe3JldHVybiBlWzBdPT09XCJ+XCI/UW8uam9pbihfdS5ob21lZGlyKCksZS5zbGljZSgxKSk6ZX1mdW5jdGlvbiBqdShlKXtsZXQgdD1Rby5yZXNvbHZlKHByb2Nlc3MuY3dkKCksXCIuZW52XCIpLHI9XCJ1dGY4XCIsbj0hIShlJiZlLmRlYnVnKSxpPSEhKGUmJmUub3ZlcnJpZGUpO2UmJihlLnBhdGghPW51bGwmJih0PVZ1KGUucGF0aCkpLGUuZW5jb2RpbmchPW51bGwmJihyPWUuZW5jb2RpbmcpKTt0cnl7bGV0IG89a3IucGFyc2UoT3UucmVhZEZpbGVTeW5jKHQse2VuY29kaW5nOnJ9KSk7cmV0dXJuIE9iamVjdC5rZXlzKG8pLmZvckVhY2goZnVuY3Rpb24ocyl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb2Nlc3MuZW52LHMpPyhpPT09ITAmJihwcm9jZXNzLmVudltzXT1vW3NdKSxuJiZXbihpPT09ITA/YFwiJHtzfVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBcXGBwcm9jZXNzLmVudlxcYCBhbmQgV0FTIG92ZXJ3cml0dGVuYDpgXCIke3N9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIFxcYHByb2Nlc3MuZW52XFxgIGFuZCB3YXMgTk9UIG92ZXJ3cml0dGVuYCkpOnByb2Nlc3MuZW52W3NdPW9bc119KSx7cGFyc2VkOm99fWNhdGNoKG8pe3JldHVybiBuJiZXbihgRmFpbGVkIHRvIGxvYWQgJHt0fSAke28ubWVzc2FnZX1gKSx7ZXJyb3I6b319fXZhciBrcj17Y29uZmlnOmp1LHBhcnNlOnF1fTtGci5leHBvcnRzLmNvbmZpZz1rci5jb25maWc7RnIuZXhwb3J0cy5wYXJzZT1rci5wYXJzZTtGci5leHBvcnRzPWtyfSk7dmFyIFpvPVYoKFNmLFlvKT0+e1widXNlIHN0cmljdFwiO1lvLmV4cG9ydHM9ZT0+e2xldCB0PWUubWF0Y2goL15bIFxcdF0qKD89XFxTKS9nbSk7cmV0dXJuIHQ/dC5yZWR1Y2UoKHIsbik9Pk1hdGgubWluKHIsbi5sZW5ndGgpLDEvMCk6MH19KTt2YXIgZXM9VigoSWYsWG8pPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIFF1PVpvKCk7WG8uZXhwb3J0cz1lPT57bGV0IHQ9UXUoZSk7aWYodD09PTApcmV0dXJuIGU7bGV0IHI9bmV3IFJlZ0V4cChgXlsgXFxcXHRdeyR7dH19YCxcImdtXCIpO3JldHVybiBlLnJlcGxhY2UocixcIlwiKX19KTt2YXIgdHM9Vigoa2YsR3UpPT57R3UuZXhwb3J0cz17bmFtZTpcIkBwcmlzbWEvZW5naW5lcy12ZXJzaW9uXCIsdmVyc2lvbjpcIjUuNS4xLTEuYWViYzA0NmNlOGI4OGViYmNiNDVlZmUzMWNiZTdkMDZmZDZhYmMwYVwiLG1haW46XCJpbmRleC5qc1wiLHR5cGVzOlwiaW5kZXguZC50c1wiLGxpY2Vuc2U6XCJBcGFjaGUtMi4wXCIsYXV0aG9yOlwiVGltIFN1Y2hhbmVrIDxzdWNoYW5la0BwcmlzbWEuaW8+XCIscHJpc21hOntlbmdpbmVzVmVyc2lvbjpcImFlYmMwNDZjZThiODhlYmJjYjQ1ZWZlMzFjYmU3ZDA2ZmQ2YWJjMGFcIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvZW5naW5lcy13cmFwcGVyLmdpdFwiLGRpcmVjdG9yeTpcInBhY2thZ2VzL2VuZ2luZXMtdmVyc2lvblwifSxkZXZEZXBlbmRlbmNpZXM6e1wiQHR5cGVzL25vZGVcIjpcIjE4LjE4LjZcIix0eXBlc2NyaXB0OlwiNC45LjVcIn0sZmlsZXM6W1wiaW5kZXguanNcIixcImluZGV4LmQudHNcIl0sc2NyaXB0czp7YnVpbGQ6XCJ0c2MgLWRcIn19fSk7dmFyIFhuPVYoT3I9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoT3IsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7T3IuZW5naW5lc1ZlcnNpb249dm9pZCAwO09yLmVuZ2luZXNWZXJzaW9uPXRzKCkucHJpc21hLmVuZ2luZXNWZXJzaW9ufSk7dmFyIGlpPVYoKEtmLGlzKT0+e1widXNlIHN0cmljdFwiO2lzLmV4cG9ydHM9KGUsdD0xLHIpPT57aWYocj17aW5kZW50OlwiIFwiLGluY2x1ZGVFbXB0eUxpbmVzOiExLC4uLnJ9LHR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGlucHV0XFxgIHRvIGJlIGEgXFxgc3RyaW5nXFxgLCBnb3QgXFxgJHt0eXBlb2YgZX1cXGBgKTtpZih0eXBlb2YgdCE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBjb3VudFxcYCB0byBiZSBhIFxcYG51bWJlclxcYCwgZ290IFxcYCR7dHlwZW9mIHR9XFxgYCk7aWYodHlwZW9mIHIuaW5kZW50IT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYG9wdGlvbnMuaW5kZW50XFxgIHRvIGJlIGEgXFxgc3RyaW5nXFxgLCBnb3QgXFxgJHt0eXBlb2Ygci5pbmRlbnR9XFxgYCk7aWYodD09PTApcmV0dXJuIGU7bGV0IG49ci5pbmNsdWRlRW1wdHlMaW5lcz8vXi9nbTovXig/IVxccyokKS9nbTtyZXR1cm4gZS5yZXBsYWNlKG4sci5pbmRlbnQucmVwZWF0KHQpKX19KTt2YXIgbHM9VigoSmYsYXMpPT57XCJ1c2Ugc3RyaWN0XCI7YXMuZXhwb3J0cz0oe29ubHlGaXJzdDplPSExfT17fSk9PntsZXQgdD1bXCJbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpXCIsXCIoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKVwiXS5qb2luKFwifFwiKTtyZXR1cm4gbmV3IFJlZ0V4cCh0LGU/dm9pZCAwOlwiZ1wiKX19KTt2YXIgbGk9VigoSGYsdXMpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHJjPWxzKCk7dXMuZXhwb3J0cz1lPT50eXBlb2YgZT09XCJzdHJpbmdcIj9lLnJlcGxhY2UocmMoKSxcIlwiKTplfSk7dmFyIGNzPVYoKFlmLE5yKT0+e1widXNlIHN0cmljdFwiO05yLmV4cG9ydHM9KGU9e30pPT57bGV0IHQ7aWYoZS5yZXBvVXJsKXQ9ZS5yZXBvVXJsO2Vsc2UgaWYoZS51c2VyJiZlLnJlcG8pdD1gaHR0cHM6Ly9naXRodWIuY29tLyR7ZS51c2VyfS8ke2UucmVwb31gO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwiWW91IG5lZWQgdG8gc3BlY2lmeSBlaXRoZXIgdGhlIGByZXBvVXJsYCBvcHRpb24gb3IgYm90aCB0aGUgYHVzZXJgIGFuZCBgcmVwb2Agb3B0aW9uc1wiKTtsZXQgcj1uZXcgVVJMKGAke3R9L2lzc3Vlcy9uZXdgKSxuPVtcImJvZHlcIixcInRpdGxlXCIsXCJsYWJlbHNcIixcInRlbXBsYXRlXCIsXCJtaWxlc3RvbmVcIixcImFzc2lnbmVlXCIsXCJwcm9qZWN0c1wiXTtmb3IobGV0IGkgb2Ygbil7bGV0IG89ZVtpXTtpZihvIT09dm9pZCAwKXtpZihpPT09XCJsYWJlbHNcInx8aT09PVwicHJvamVjdHNcIil7aWYoIUFycmF5LmlzQXJyYXkobykpdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFxcYCR7aX1cXGAgb3B0aW9uIHNob3VsZCBiZSBhbiBhcnJheWApO289by5qb2luKFwiLFwiKX1yLnNlYXJjaFBhcmFtcy5zZXQoaSxvKX19cmV0dXJuIHIudG9TdHJpbmcoKX07TnIuZXhwb3J0cy5kZWZhdWx0PU5yLmV4cG9ydHN9KTt2YXIgVWk9VigoQ1AsS2EpPT57XCJ1c2Ugc3RyaWN0XCI7S2EuZXhwb3J0cz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyLG4saSxvKXtyZXR1cm4gdDxyfHxuPHI/dD5uP24rMTp0KzE6aT09PW8/cjpyKzF9cmV0dXJuIGZ1bmN0aW9uKHQscil7aWYodD09PXIpcmV0dXJuIDA7aWYodC5sZW5ndGg+ci5sZW5ndGgpe3ZhciBuPXQ7dD1yLHI9bn1mb3IodmFyIGk9dC5sZW5ndGgsbz1yLmxlbmd0aDtpPjAmJnQuY2hhckNvZGVBdChpLTEpPT09ci5jaGFyQ29kZUF0KG8tMSk7KWktLSxvLS07Zm9yKHZhciBzPTA7czxpJiZ0LmNoYXJDb2RlQXQocyk9PT1yLmNoYXJDb2RlQXQocyk7KXMrKztpZihpLT1zLG8tPXMsaT09PTB8fG88MylyZXR1cm4gbzt2YXIgYT0wLGwsdSxjLHAsZCxmLHksZyxQLFQsQyx4LE09W107Zm9yKGw9MDtsPGk7bCsrKU0ucHVzaChsKzEpLE0ucHVzaCh0LmNoYXJDb2RlQXQocytsKSk7Zm9yKHZhciBjZT1NLmxlbmd0aC0xO2E8by0zOylmb3IoUD1yLmNoYXJDb2RlQXQocysodT1hKSksVD1yLmNoYXJDb2RlQXQocysoYz1hKzEpKSxDPXIuY2hhckNvZGVBdChzKyhwPWErMikpLHg9ci5jaGFyQ29kZUF0KHMrKGQ9YSszKSksZj1hKz00LGw9MDtsPGNlO2wrPTIpeT1NW2xdLGc9TVtsKzFdLHU9ZSh5LHUsYyxQLGcpLGM9ZSh1LGMscCxULGcpLHA9ZShjLHAsZCxDLGcpLGY9ZShwLGQsZix4LGcpLE1bbF09ZixkPXAscD1jLGM9dSx1PXk7Zm9yKDthPG87KWZvcihQPXIuY2hhckNvZGVBdChzKyh1PWEpKSxmPSsrYSxsPTA7bDxjZTtsKz0yKXk9TVtsXSxNW2xdPWY9ZSh5LHUsZixQLE1bbCsxXSksdT15O3JldHVybiBmfX0oKX0pO3ZhciBzbT17fTtTdChzbSx7RE1NRjooKT0+cGUsRE1NRkNsYXNzOigpPT54cixEZWJ1ZzooKT0+JG4sRGVjaW1hbDooKT0+UGUsRXh0ZW5zaW9uczooKT0+TW4sTWV0cmljc0NsaWVudDooKT0+ZHQsTm90Rm91bmRFcnJvcjooKT0+TWUsT2JqZWN0RW51bVZhbHVlOigpPT54ZSxQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yOigpPT5GLFByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yOigpPT5VLFByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yOigpPT51ZSxQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yOigpPT5LLFByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvcjooKT0+WCxQdWJsaWM6KCk9PlJuLFNxbDooKT0+b2UsVHlwZXM6KCk9PlNuLGRlZmluZURtbWZQcm9wZXJ0eTooKT0+bXMsZW1wdHk6KCk9PnlzLGdldFByaXNtYUNsaWVudDooKT0+T2wsaXR4Q2xpZW50RGVueUxpc3Q6KCk9PnppLGpvaW46KCk9PmdzLG1ha2VTdHJpY3RFbnVtOigpPT5fbCxvYmplY3RFbnVtTmFtZXM6KCk9PmljLG9iamVjdEVudW1WYWx1ZXM6KCk9PiRyLHJhdzooKT0+Z2ksc3FsdGFnOigpPT55aSx3YXJuRW52Q29uZmxpY3RzOigpPT5ObCx3YXJuT25jZTooKT0+cXR9KTttb2R1bGUuZXhwb3J0cz1VbChzbSk7dmFyIE1uPXt9O1N0KE1uLHtkZWZpbmVFeHRlbnNpb246KCk9PnRvLGdldEV4dGVuc2lvbkNvbnRleHQ6KCk9PnJvfSk7ZnVuY3Rpb24gdG8oZSl7cmV0dXJuIHR5cGVvZiBlPT1cImZ1bmN0aW9uXCI/ZTp0PT50LiRleHRlbmRzKGUpfWZ1bmN0aW9uIHJvKGUpe3JldHVybiBlfXZhciBSbj17fTtTdChSbix7dmFsaWRhdG9yOigpPT5ub30pO2Z1bmN0aW9uIG5vKC4uLmUpe3JldHVybiB0PT50fXZhciBTbj17fTtTdChTbix7RXh0ZW5zaW9uczooKT0+aW8sUHVibGljOigpPT5vbyxSZXN1bHQ6KCk9PnNvLFV0aWxzOigpPT5hb30pO3ZhciBpbz17fTt2YXIgb289e307dmFyIHNvPXt9O3ZhciBhbz17fTt2YXIgSWU9KGUsdCk9PntsZXQgcj17fTtmb3IobGV0IG4gb2YgZSl7bGV0IGk9blt0XTtyW2ldPW59cmV0dXJuIHJ9O2Z1bmN0aW9uIGxvKGUpe3JldHVybiBlLnN1YnN0cmluZygwLDEpLnRvTG93ZXJDYXNlKCkrZS5zdWJzdHJpbmcoMSl9dmFyIHhyPWNsYXNze2NvbnN0cnVjdG9yKHQpe3RoaXMuZG9jdW1lbnQ9dDt0aGlzLmNvbXBvc2l0ZU5hbWVzPW5ldyBTZXQodGhpcy5kYXRhbW9kZWwudHlwZXMubWFwKHI9PnIubmFtZSkpLHRoaXMudHlwZUFuZE1vZGVsTWFwPXRoaXMuYnVpbGRUeXBlTW9kZWxNYXAoKSx0aGlzLm1hcHBpbmdzTWFwPXRoaXMuYnVpbGRNYXBwaW5nc01hcCgpLHRoaXMub3V0cHV0VHlwZU1hcD10aGlzLmJ1aWxkTWVyZ2VkT3V0cHV0VHlwZU1hcCgpLHRoaXMucm9vdEZpZWxkTWFwPXRoaXMuYnVpbGRSb290RmllbGRNYXAoKSx0aGlzLmlucHV0VHlwZXNCeU5hbWU9dGhpcy5idWlsZElucHV0VHlwZXNNYXAoKX1nZXQgZGF0YW1vZGVsKCl7cmV0dXJuIHRoaXMuZG9jdW1lbnQuZGF0YW1vZGVsfWdldCBtYXBwaW5ncygpe3JldHVybiB0aGlzLmRvY3VtZW50Lm1hcHBpbmdzfWdldCBzY2hlbWEoKXtyZXR1cm4gdGhpcy5kb2N1bWVudC5zY2hlbWF9Z2V0IGlucHV0T2JqZWN0VHlwZXMoKXtyZXR1cm4gdGhpcy5zY2hlbWEuaW5wdXRPYmplY3RUeXBlc31nZXQgb3V0cHV0T2JqZWN0VHlwZXMoKXtyZXR1cm4gdGhpcy5zY2hlbWEub3V0cHV0T2JqZWN0VHlwZXN9aXNDb21wb3NpdGUodCl7cmV0dXJuIHRoaXMuY29tcG9zaXRlTmFtZXMuaGFzKHQpfWdldE90aGVyT3BlcmF0aW9uTmFtZXMoKXtyZXR1cm5bT2JqZWN0LnZhbHVlcyh0aGlzLm1hcHBpbmdzLm90aGVyT3BlcmF0aW9ucy53cml0ZSksT2JqZWN0LnZhbHVlcyh0aGlzLm1hcHBpbmdzLm90aGVyT3BlcmF0aW9ucy5yZWFkKV0uZmxhdCgpfWhhc0VudW1Jbk5hbWVzcGFjZSh0LHIpe3JldHVybiB0aGlzLnNjaGVtYS5lbnVtVHlwZXNbcl0/LmZpbmQobj0+bi5uYW1lPT09dCkhPT12b2lkIDB9cmVzb2x2ZUlucHV0T2JqZWN0VHlwZSh0KXtyZXR1cm4gdGhpcy5pbnB1dFR5cGVzQnlOYW1lLmdldChJbih0LnR5cGUsdC5uYW1lc3BhY2UpKX1yZXNvbHZlT3V0cHV0T2JqZWN0VHlwZSh0KXtpZih0LmxvY2F0aW9uPT09XCJvdXRwdXRPYmplY3RUeXBlc1wiKXJldHVybiB0aGlzLm91dHB1dE9iamVjdFR5cGVzW3QubmFtZXNwYWNlPz9cInByaXNtYVwiXS5maW5kKHI9PnIubmFtZT09PXQudHlwZSl9YnVpbGRNb2RlbE1hcCgpe3JldHVybiBJZSh0aGlzLmRhdGFtb2RlbC5tb2RlbHMsXCJuYW1lXCIpfWJ1aWxkVHlwZU1hcCgpe3JldHVybiBJZSh0aGlzLmRhdGFtb2RlbC50eXBlcyxcIm5hbWVcIil9YnVpbGRUeXBlTW9kZWxNYXAoKXtyZXR1cm57Li4udGhpcy5idWlsZFR5cGVNYXAoKSwuLi50aGlzLmJ1aWxkTW9kZWxNYXAoKX19YnVpbGRNYXBwaW5nc01hcCgpe3JldHVybiBJZSh0aGlzLm1hcHBpbmdzLm1vZGVsT3BlcmF0aW9ucyxcIm1vZGVsXCIpfWJ1aWxkTWVyZ2VkT3V0cHV0VHlwZU1hcCgpe3JldHVybnttb2RlbDpJZSh0aGlzLnNjaGVtYS5vdXRwdXRPYmplY3RUeXBlcy5tb2RlbCxcIm5hbWVcIikscHJpc21hOkllKHRoaXMuc2NoZW1hLm91dHB1dE9iamVjdFR5cGVzLnByaXNtYSxcIm5hbWVcIil9fWJ1aWxkUm9vdEZpZWxkTWFwKCl7cmV0dXJuey4uLkllKHRoaXMub3V0cHV0VHlwZU1hcC5wcmlzbWEuUXVlcnkuZmllbGRzLFwibmFtZVwiKSwuLi5JZSh0aGlzLm91dHB1dFR5cGVNYXAucHJpc21hLk11dGF0aW9uLmZpZWxkcyxcIm5hbWVcIil9fWJ1aWxkSW5wdXRUeXBlc01hcCgpe2xldCB0PW5ldyBNYXA7Zm9yKGxldCByIG9mIHRoaXMuaW5wdXRPYmplY3RUeXBlcy5wcmlzbWEpdC5zZXQoSW4oci5uYW1lLFwicHJpc21hXCIpLHIpO2lmKCF0aGlzLmlucHV0T2JqZWN0VHlwZXMubW9kZWwpcmV0dXJuIHQ7Zm9yKGxldCByIG9mIHRoaXMuaW5wdXRPYmplY3RUeXBlcy5tb2RlbCl0LnNldChJbihyLm5hbWUsXCJtb2RlbFwiKSxyKTtyZXR1cm4gdH19O2Z1bmN0aW9uIEluKGUsdCl7cmV0dXJuIHQ/YCR7dH0uJHtlfWA6ZX12YXIgcGU7KHQ9PntsZXQgZTsoeD0+KHguZmluZFVuaXF1ZT1cImZpbmRVbmlxdWVcIix4LmZpbmRVbmlxdWVPclRocm93PVwiZmluZFVuaXF1ZU9yVGhyb3dcIix4LmZpbmRGaXJzdD1cImZpbmRGaXJzdFwiLHguZmluZEZpcnN0T3JUaHJvdz1cImZpbmRGaXJzdE9yVGhyb3dcIix4LmZpbmRNYW55PVwiZmluZE1hbnlcIix4LmNyZWF0ZT1cImNyZWF0ZVwiLHguY3JlYXRlTWFueT1cImNyZWF0ZU1hbnlcIix4LnVwZGF0ZT1cInVwZGF0ZVwiLHgudXBkYXRlTWFueT1cInVwZGF0ZU1hbnlcIix4LnVwc2VydD1cInVwc2VydFwiLHguZGVsZXRlPVwiZGVsZXRlXCIseC5kZWxldGVNYW55PVwiZGVsZXRlTWFueVwiLHguZ3JvdXBCeT1cImdyb3VwQnlcIix4LmNvdW50PVwiY291bnRcIix4LmFnZ3JlZ2F0ZT1cImFnZ3JlZ2F0ZVwiLHguZmluZFJhdz1cImZpbmRSYXdcIix4LmFnZ3JlZ2F0ZVJhdz1cImFnZ3JlZ2F0ZVJhd1wiKSkoZT10Lk1vZGVsQWN0aW9ufHwodC5Nb2RlbEFjdGlvbj17fSkpfSkocGV8fChwZT17fSkpO3ZhciB2cj1TKExuKCkpLGR1PTEwMCxJdD1bXTt0eXBlb2YgcHJvY2VzczxcInVcIiYmdHlwZW9mIHByb2Nlc3Muc3RkZXJyPy53cml0ZSE9XCJmdW5jdGlvblwiJiYodnIuZGVmYXVsdC5sb2c9Y29uc29sZS5kZWJ1Zz8/Y29uc29sZS5sb2cpO2Z1bmN0aW9uIG11KGUpe2xldCB0PSgwLHZyLmRlZmF1bHQpKGUpLHI9T2JqZWN0LmFzc2lnbigoLi4ubik9Pih0LmxvZz1yLmxvZyxuLmxlbmd0aCE9PTAmJkl0LnB1c2goW2UsLi4ubl0pLEl0Lmxlbmd0aD5kdSYmSXQuc2hpZnQoKSx0KFwiXCIsLi4ubikpLHQpO3JldHVybiByfXZhciAkbj1PYmplY3QuYXNzaWduKG11LHZyLmRlZmF1bHQpO2Z1bmN0aW9uIGJvKGU9NzUwMCl7bGV0IHQ9SXQubWFwKHI9PnIubWFwKG49PnR5cGVvZiBuPT1cInN0cmluZ1wiP246SlNPTi5zdHJpbmdpZnkobikpLmpvaW4oXCIgXCIpKS5qb2luKGBcbmApO3JldHVybiB0Lmxlbmd0aDxlP3Q6dC5zbGljZSgtZSl9ZnVuY3Rpb24gRW8oKXtJdC5sZW5ndGg9MH12YXIgTz0kbjt2YXIgcW4sd28sUG8sdm8sVG89ITA7dHlwZW9mIHByb2Nlc3M8XCJ1XCImJih7Rk9SQ0VfQ09MT1I6cW4sTk9ERV9ESVNBQkxFX0NPTE9SUzp3byxOT19DT0xPUjpQbyxURVJNOnZvfT1wcm9jZXNzLmVudnx8e30sVG89cHJvY2Vzcy5zdGRvdXQmJnByb2Nlc3Muc3Rkb3V0LmlzVFRZKTt2YXIgZnU9e2VuYWJsZWQ6IXdvJiZQbz09bnVsbCYmdm8hPT1cImR1bWJcIiYmKHFuIT1udWxsJiZxbiE9PVwiMFwifHxUbyl9O2Z1bmN0aW9uIF8oZSx0KXtsZXQgcj1uZXcgUmVnRXhwKGBcXFxceDFiXFxcXFske3R9bWAsXCJnXCIpLG49YFxceDFCWyR7ZX1tYCxpPWBcXHgxQlske3R9bWA7cmV0dXJuIGZ1bmN0aW9uKG8pe3JldHVybiFmdS5lbmFibGVkfHxvPT1udWxsP286bisofihcIlwiK28pLmluZGV4T2YoaSk/by5yZXBsYWNlKHIsaStuKTpvKStpfX12YXIgVG09XygwLDApLG5lPV8oMSwyMiksRmU9XygyLDIyKSxDbT1fKDMsMjMpLHRlPV8oNCwyNCksQW09Xyg3LDI3KSxNbT1fKDgsMjgpLFJtPV8oOSwyOSksU209XygzMCwzOSksbWU9XygzMSwzOSksR2U9XygzMiwzOSksaGU9XygzMywzOSksb3Q9XygzNCwzOSksSW09XygzNSwzOSksRGU9XygzNiwzOSksa209XygzNywzOSksVHI9Xyg5MCwzOSksRm09Xyg5MCwzOSksRG09Xyg0MCw0OSksT209Xyg0MSw0OSksX209Xyg0Miw0OSksTm09Xyg0Myw0OSksTG09Xyg0NCw0OSksJG09Xyg0NSw0OSkscW09Xyg0Niw0OSksVm09Xyg0Nyw0OSk7dmFyIENvPVMocmVxdWlyZShcImZzXCIpKTtmdW5jdGlvbiBWbigpe2xldCBlPXByb2Nlc3MuZW52LlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWTtpZighKGUmJkNvLmRlZmF1bHQuZXhpc3RzU3luYyhlKSkmJnByb2Nlc3MuYXJjaD09PVwiaWEzMlwiKXRocm93IG5ldyBFcnJvcignVGhlIGRlZmF1bHQgcXVlcnkgZW5naW5lIHR5cGUgKE5vZGUtQVBJLCBcImxpYnJhcnlcIikgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgZm9yIDMyYml0IE5vZGUuIFBsZWFzZSBzZXQgYGVuZ2luZVR5cGUgPSBcImJpbmFyeVwiYCBpbiB0aGUgXCJnZW5lcmF0b3JcIiBibG9jayBvZiB5b3VyIFwic2NoZW1hLnByaXNtYVwiIGZpbGUgKG9yIHVzZSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIFwiUFJJU01BX0NMSUVOVF9FTkdJTkVfVFlQRT1iaW5hcnlcIiBhbmQvb3IgXCJQUklTTUFfQ0xJX1FVRVJZX0VOR0lORV9UWVBFPWJpbmFyeVwiLiknKX12YXIgQ3I9XCJsaWJxdWVyeV9lbmdpbmVcIjtmdW5jdGlvbiBqbihlLHQpe2xldCByPXQ9PT1cInVybFwiO3JldHVybiBlLmluY2x1ZGVzKFwid2luZG93c1wiKT9yP1wicXVlcnlfZW5naW5lLmRsbC5ub2RlXCI6YHF1ZXJ5X2VuZ2luZS0ke2V9LmRsbC5ub2RlYDplLmluY2x1ZGVzKFwiZGFyd2luXCIpP3I/YCR7Q3J9LmR5bGliLm5vZGVgOmAke0NyfS0ke2V9LmR5bGliLm5vZGVgOnI/YCR7Q3J9LnNvLm5vZGVgOmAke0NyfS0ke2V9LnNvLm5vZGVgfXZhciAkbz1TKHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpKSxHbj1TKHJlcXVpcmUoXCJmcy9wcm9taXNlc1wiKSksU3I9UyhyZXF1aXJlKFwib3NcIikpO3ZhciBBcj1TeW1ib2woXCJAdHMtcGF0dGVybi9tYXRjaGVyXCIpLEFvPVwiQHRzLXBhdHRlcm4vYW5vbnltb3VzLXNlbGVjdC1rZXlcIixNbz1mdW5jdGlvbihlKXtyZXR1cm4hIShlJiZ0eXBlb2YgZT09XCJvYmplY3RcIil9LEJuPWZ1bmN0aW9uKGUpe3JldHVybiBlJiYhIWVbQXJdfSxndT1mdW5jdGlvbiBlKHQscixuKXtpZihNbyh0KSl7aWYoQm4odCkpe3ZhciBpPXRbQXJdKCkubWF0Y2gociksbz1pLm1hdGNoZWQscz1pLnNlbGVjdGlvbnM7cmV0dXJuIG8mJnMmJk9iamVjdC5rZXlzKHMpLmZvckVhY2goZnVuY3Rpb24obCl7cmV0dXJuIG4obCxzW2xdKX0pLG99aWYoIU1vKHIpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuISFBcnJheS5pc0FycmF5KHIpJiZ0Lmxlbmd0aD09PXIubGVuZ3RoJiZ0LmV2ZXJ5KGZ1bmN0aW9uKGwsdSl7cmV0dXJuIGUobCxyW3VdLG4pfSk7aWYodCBpbnN0YW5jZW9mIE1hcClyZXR1cm4gciBpbnN0YW5jZW9mIE1hcCYmQXJyYXkuZnJvbSh0LmtleXMoKSkuZXZlcnkoZnVuY3Rpb24obCl7cmV0dXJuIGUodC5nZXQobCksci5nZXQobCksbil9KTtpZih0IGluc3RhbmNlb2YgU2V0KXtpZighKHIgaW5zdGFuY2VvZiBTZXQpKXJldHVybiExO2lmKHQuc2l6ZT09PTApcmV0dXJuIHIuc2l6ZT09PTA7aWYodC5zaXplPT09MSl7dmFyIGE9QXJyYXkuZnJvbSh0LnZhbHVlcygpKVswXTtyZXR1cm4gQm4oYSk/QXJyYXkuZnJvbShyLnZhbHVlcygpKS5ldmVyeShmdW5jdGlvbihsKXtyZXR1cm4gZShhLGwsbil9KTpyLmhhcyhhKX1yZXR1cm4gQXJyYXkuZnJvbSh0LnZhbHVlcygpKS5ldmVyeShmdW5jdGlvbihsKXtyZXR1cm4gci5oYXMobCl9KX1yZXR1cm4gT2JqZWN0LmtleXModCkuZXZlcnkoZnVuY3Rpb24obCl7dmFyIHUsYz10W2xdO3JldHVybihsIGluIHJ8fEJuKHU9YykmJnVbQXJdKCkubWF0Y2hlclR5cGU9PT1cIm9wdGlvbmFsXCIpJiZlKGMscltsXSxuKX0pfXJldHVybiBPYmplY3QuaXMocix0KX07ZnVuY3Rpb24gSmUoZSl7dmFyIHQ7cmV0dXJuKHQ9e30pW0FyXT1mdW5jdGlvbigpe3JldHVybnttYXRjaDpmdW5jdGlvbihyKXtyZXR1cm57bWF0Y2hlZDohIWUocil9fX19LHR9dmFyIEdtPUplKGZ1bmN0aW9uKGUpe3JldHVybiEwfSk7dmFyIEptPUplKGZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09XCJzdHJpbmdcIn0pLEhtPUplKGZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09XCJudW1iZXJcIn0pLFdtPUplKGZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09XCJib29sZWFuXCJ9KSx6bT1KZShmdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGU9PVwiYmlnaW50XCJ9KSxZbT1KZShmdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGU9PVwic3ltYm9sXCJ9KSxabT1KZShmdW5jdGlvbihlKXtyZXR1cm4gZT09bnVsbH0pO2Z1bmN0aW9uIHN0KGUpe3JldHVybiBuZXcgeXUoZSxbXSl9dmFyIHl1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShyLG4pe3RoaXMudmFsdWU9dm9pZCAwLHRoaXMuY2FzZXM9dm9pZCAwLHRoaXMudmFsdWU9cix0aGlzLmNhc2VzPW59dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQud2l0aD1mdW5jdGlvbigpe3ZhciByPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxuPXJbci5sZW5ndGgtMV0saT1bclswXV0sbz1bXTtyZXR1cm4gci5sZW5ndGg9PT0zJiZ0eXBlb2YgclsxXT09XCJmdW5jdGlvblwiPyhpLnB1c2goclswXSksby5wdXNoKHJbMV0pKTpyLmxlbmd0aD4yJiZpLnB1c2guYXBwbHkoaSxyLnNsaWNlKDEsci5sZW5ndGgtMSkpLG5ldyBlKHRoaXMudmFsdWUsdGhpcy5jYXNlcy5jb25jYXQoW3ttYXRjaDpmdW5jdGlvbihzKXt2YXIgYT17fSxsPSEhKGkuc29tZShmdW5jdGlvbih1KXtyZXR1cm4gZ3UodSxzLGZ1bmN0aW9uKGMscCl7YVtjXT1wfSl9KSYmby5ldmVyeShmdW5jdGlvbih1KXtyZXR1cm4gdShzKX0pKTtyZXR1cm57bWF0Y2hlZDpsLHZhbHVlOmwmJk9iamVjdC5rZXlzKGEpLmxlbmd0aD9BbyBpbiBhP2FbQW9dOmE6c319LGhhbmRsZXI6bn1dKSl9LHQud2hlbj1mdW5jdGlvbihyLG4pe3JldHVybiBuZXcgZSh0aGlzLnZhbHVlLHRoaXMuY2FzZXMuY29uY2F0KFt7bWF0Y2g6ZnVuY3Rpb24oaSl7cmV0dXJue21hdGNoZWQ6ISFyKGkpLHZhbHVlOml9fSxoYW5kbGVyOm59XSkpfSx0Lm90aGVyd2lzZT1mdW5jdGlvbihyKXtyZXR1cm4gbmV3IGUodGhpcy52YWx1ZSx0aGlzLmNhc2VzLmNvbmNhdChbe21hdGNoOmZ1bmN0aW9uKG4pe3JldHVybnttYXRjaGVkOiEwLHZhbHVlOm59fSxoYW5kbGVyOnJ9XSkpLnJ1bigpfSx0LmV4aGF1c3RpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ydW4oKX0sdC5ydW49ZnVuY3Rpb24oKXtmb3IodmFyIHI9dGhpcy52YWx1ZSxuPXZvaWQgMCxpPTA7aTx0aGlzLmNhc2VzLmxlbmd0aDtpKyspe3ZhciBvPXRoaXMuY2FzZXNbaV0scz1vLm1hdGNoKHRoaXMudmFsdWUpO2lmKHMubWF0Y2hlZCl7cj1zLnZhbHVlLG49by5oYW5kbGVyO2JyZWFrfX1pZighbil7dmFyIGE7dHJ5e2E9SlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZSl9Y2F0Y2h7YT10aGlzLnZhbHVlfXRocm93IG5ldyBFcnJvcihcIlBhdHRlcm4gbWF0Y2hpbmcgZXJyb3I6IG5vIHBhdHRlcm4gbWF0Y2hlcyB2YWx1ZSBcIithKX1yZXR1cm4gbihyLHRoaXMudmFsdWUpfSxlfSgpO3ZhciBxbz1yZXF1aXJlKFwidXRpbFwiKTt2YXIgX289UyhPbygpKTtmdW5jdGlvbiBEdChlKXtyZXR1cm4oMCxfby5kZWZhdWx0KShlLGUse2ZhbGxiYWNrOnRlfSl9dmFyIGJ1PXt3YXJuOmhlKFwicHJpc21hOndhcm5cIil9LEV1PXt3YXJuOigpPT4hcHJvY2Vzcy5lbnYuUFJJU01BX0RJU0FCTEVfV0FSTklOR1N9O2Z1bmN0aW9uIE90KGUsLi4udCl7RXUud2FybigpJiZjb25zb2xlLndhcm4oYCR7YnUud2Fybn0gJHtlfWAsLi4udCl9dmFyIHd1PSgwLHFvLnByb21pc2lmeSkoJG8uZGVmYXVsdC5leGVjKSxpZT1PKFwicHJpc21hOmdldC1wbGF0Zm9ybVwiKSxQdT1bXCIxLjAueFwiLFwiMS4xLnhcIixcIjMuMC54XCJdO2FzeW5jIGZ1bmN0aW9uIFZvKCl7bGV0IGU9U3IuZGVmYXVsdC5wbGF0Zm9ybSgpLHQ9cHJvY2Vzcy5hcmNoO2lmKGU9PT1cImZyZWVic2RcIil7bGV0IHM9YXdhaXQgSXIoXCJmcmVlYnNkLXZlcnNpb25cIik7aWYocyYmcy50cmltKCkubGVuZ3RoPjApe2xldCBsPS9eKFxcZCspXFwuPy8uZXhlYyhzKTtpZihsKXJldHVybntwbGF0Zm9ybTpcImZyZWVic2RcIix0YXJnZXREaXN0cm86YGZyZWVic2Qke2xbMV19YCxhcmNoOnR9fX1pZihlIT09XCJsaW51eFwiKXJldHVybntwbGF0Zm9ybTplLGFyY2g6dH07bGV0IHI9YXdhaXQgVHUoKSxuPWF3YWl0IEZ1KCksaT1BdSh7YXJjaDp0LGFyY2hGcm9tVW5hbWU6bixmYW1pbHlEaXN0cm86ci5mYW1pbHlEaXN0cm99KSx7bGlic3NsOm99PWF3YWl0IE11KGkpO3JldHVybntwbGF0Zm9ybTpcImxpbnV4XCIsbGlic3NsOm8sYXJjaDp0LGFyY2hGcm9tVW5hbWU6biwuLi5yfX1mdW5jdGlvbiB2dShlKXtsZXQgdD0vXklEPVwiPyhbXlwiXFxuXSopXCI/JC9pbSxyPS9eSURfTElLRT1cIj8oW15cIlxcbl0qKVwiPyQvaW0sbj10LmV4ZWMoZSksaT1uJiZuWzFdJiZuWzFdLnRvTG93ZXJDYXNlKCl8fFwiXCIsbz1yLmV4ZWMoZSkscz1vJiZvWzFdJiZvWzFdLnRvTG93ZXJDYXNlKCl8fFwiXCIsYT1zdCh7aWQ6aSxpZExpa2U6c30pLndpdGgoe2lkOlwiYWxwaW5lXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcIm11c2xcIixmYW1pbHlEaXN0cm86bCxvcmlnaW5hbERpc3RybzpsfSkpLndpdGgoe2lkOlwicmFzcGJpYW5cIn0sKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwiYXJtXCIsZmFtaWx5RGlzdHJvOlwiZGViaWFuXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aXRoKHtpZDpcIm5peG9zXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcIm5peG9zXCIsb3JpZ2luYWxEaXN0cm86bCxmYW1pbHlEaXN0cm86XCJuaXhvc1wifSkpLndpdGgoe2lkOlwiZGViaWFuXCJ9LHtpZDpcInVidW50dVwifSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJkZWJpYW5cIixvcmlnaW5hbERpc3RybzpsfSkpLndpdGgoe2lkOlwicmhlbFwifSx7aWQ6XCJjZW50b3NcIn0se2lkOlwiZmVkb3JhXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcInJoZWxcIixmYW1pbHlEaXN0cm86XCJyaGVsXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aGVuKCh7aWRMaWtlOmx9KT0+bC5pbmNsdWRlcyhcImRlYmlhblwiKXx8bC5pbmNsdWRlcyhcInVidW50dVwiKSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJkZWJpYW5cIixvcmlnaW5hbERpc3RybzpsfSkpLndoZW4oKHtpZExpa2U6bH0pPT5pPT09XCJhcmNoXCJ8fGwuaW5jbHVkZXMoXCJhcmNoXCIpLCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcImRlYmlhblwiLGZhbWlseURpc3RybzpcImFyY2hcIixvcmlnaW5hbERpc3RybzpsfSkpLndoZW4oKHtpZExpa2U6bH0pPT5sLmluY2x1ZGVzKFwiY2VudG9zXCIpfHxsLmluY2x1ZGVzKFwiZmVkb3JhXCIpfHxsLmluY2x1ZGVzKFwicmhlbFwiKXx8bC5pbmNsdWRlcyhcInN1c2VcIiksKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwicmhlbFwiLGZhbWlseURpc3RybzpcInJoZWxcIixvcmlnaW5hbERpc3RybzpsfSkpLm90aGVyd2lzZSgoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86dm9pZCAwLGZhbWlseURpc3Rybzp2b2lkIDAsb3JpZ2luYWxEaXN0cm86bH0pKTtyZXR1cm4gaWUoYEZvdW5kIGRpc3RybyBpbmZvOlxuJHtKU09OLnN0cmluZ2lmeShhLG51bGwsMil9YCksYX1hc3luYyBmdW5jdGlvbiBUdSgpe2xldCBlPVwiL2V0Yy9vcy1yZWxlYXNlXCI7dHJ5e2xldCB0PWF3YWl0IEduLmRlZmF1bHQucmVhZEZpbGUoZSx7ZW5jb2Rpbmc6XCJ1dGYtOFwifSk7cmV0dXJuIHZ1KHQpfWNhdGNoe3JldHVybnt0YXJnZXREaXN0cm86dm9pZCAwLGZhbWlseURpc3Rybzp2b2lkIDAsb3JpZ2luYWxEaXN0cm86dm9pZCAwfX19ZnVuY3Rpb24gQ3UoZSl7bGV0IHQ9L15PcGVuU1NMXFxzKFxcZCtcXC5cXGQrKVxcLlxcZCsvLmV4ZWMoZSk7aWYodCl7bGV0IHI9YCR7dFsxXX0ueGA7cmV0dXJuIGpvKHIpfX1mdW5jdGlvbiBObyhlKXtsZXQgdD0vbGlic3NsXFwuc29cXC4oXFxkKShcXC5cXGQpPy8uZXhlYyhlKTtpZih0KXtsZXQgcj1gJHt0WzFdfSR7dFsyXT8/XCIuMFwifS54YDtyZXR1cm4gam8ocil9fWZ1bmN0aW9uIGpvKGUpe2xldCB0PSgoKT0+e2lmKFVvKGUpKXJldHVybiBlO2xldCByPWUuc3BsaXQoXCIuXCIpO3JldHVybiByWzFdPVwiMFwiLHIuam9pbihcIi5cIil9KSgpO2lmKFB1LmluY2x1ZGVzKHQpKXJldHVybiB0fWZ1bmN0aW9uIEF1KGUpe3JldHVybiBzdChlKS53aXRoKHtmYW1pbHlEaXN0cm86XCJtdXNsXCJ9LCgpPT4oaWUoJ1RyeWluZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRocyBmb3IgXCJhbHBpbmVcIicpLFtcIi9saWJcIl0pKS53aXRoKHtmYW1pbHlEaXN0cm86XCJkZWJpYW5cIn0sKHthcmNoRnJvbVVuYW1lOnR9KT0+KGllKCdUcnlpbmcgcGxhdGZvcm0tc3BlY2lmaWMgcGF0aHMgZm9yIFwiZGViaWFuXCIgKGFuZCBcInVidW50dVwiKScpLFtgL3Vzci9saWIvJHt0fS1saW51eC1nbnVgLGAvbGliLyR7dH0tbGludXgtZ251YF0pKS53aXRoKHtmYW1pbHlEaXN0cm86XCJyaGVsXCJ9LCgpPT4oaWUoJ1RyeWluZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRocyBmb3IgXCJyaGVsXCInKSxbXCIvbGliNjRcIixcIi91c3IvbGliNjRcIl0pKS5vdGhlcndpc2UoKHtmYW1pbHlEaXN0cm86dCxhcmNoOnIsYXJjaEZyb21VbmFtZTpufSk9PihpZShgRG9uJ3Qga25vdyBhbnkgcGxhdGZvcm0tc3BlY2lmaWMgcGF0aHMgZm9yIFwiJHt0fVwiIG9uICR7cn0gKCR7bn0pYCksW10pKX1hc3luYyBmdW5jdGlvbiBNdShlKXtsZXQgdD0nZ3JlcCAtdiBcImxpYnNzbC5zby4wXCInLHI9YXdhaXQgTG8oZSk7aWYocil7aWUoYEZvdW5kIGxpYnNzbC5zbyBmaWxlIHVzaW5nIHBsYXRmb3JtLXNwZWNpZmljIHBhdGhzOiAke3J9YCk7bGV0IG89Tm8ocik7aWYoaWUoYFRoZSBwYXJzZWQgbGlic3NsIHZlcnNpb24gaXM6ICR7b31gKSxvKXJldHVybntsaWJzc2w6byxzdHJhdGVneTpcImxpYnNzbC1zcGVjaWZpYy1wYXRoXCJ9fWllKCdGYWxsaW5nIGJhY2sgdG8gXCJsZGNvbmZpZ1wiIGFuZCBvdGhlciBnZW5lcmljIHBhdGhzJyk7bGV0IG49YXdhaXQgSXIoYGxkY29uZmlnIC1wIHwgc2VkIFwicy8uKj0+cyovL1wiIHwgc2VkIFwic3wuKi98fFwiIHwgZ3JlcCBsaWJzc2wgfCBzb3J0IHwgJHt0fWApO2lmKG58fChuPWF3YWl0IExvKFtcIi9saWI2NFwiLFwiL3Vzci9saWI2NFwiLFwiL2xpYlwiXSkpLG4pe2llKGBGb3VuZCBsaWJzc2wuc28gZmlsZSB1c2luZyBcImxkY29uZmlnXCIgb3Igb3RoZXIgZ2VuZXJpYyBwYXRoczogJHtufWApO2xldCBvPU5vKG4pO2lmKGllKGBUaGUgcGFyc2VkIGxpYnNzbCB2ZXJzaW9uIGlzOiAke299YCksbylyZXR1cm57bGlic3NsOm8sc3RyYXRlZ3k6XCJsZGNvbmZpZ1wifX1sZXQgaT1hd2FpdCBJcihcIm9wZW5zc2wgdmVyc2lvbiAtdlwiKTtpZihpKXtpZShgRm91bmQgb3BlbnNzbCBiaW5hcnkgd2l0aCB2ZXJzaW9uOiAke2l9YCk7bGV0IG89Q3UoaSk7aWYoaWUoYFRoZSBwYXJzZWQgb3BlbnNzbCB2ZXJzaW9uIGlzOiAke299YCksbylyZXR1cm57bGlic3NsOm8sc3RyYXRlZ3k6XCJvcGVuc3NsLWJpbmFyeVwifX1yZXR1cm4gaWUoXCJDb3VsZG4ndCBmaW5kIGFueSB2ZXJzaW9uIG9mIGxpYnNzbCBvciBPcGVuU1NMIGluIHRoZSBzeXN0ZW1cIikse319YXN5bmMgZnVuY3Rpb24gTG8oZSl7Zm9yKGxldCB0IG9mIGUpe2xldCByPWF3YWl0IFJ1KHQpO2lmKHIpcmV0dXJuIHJ9fWFzeW5jIGZ1bmN0aW9uIFJ1KGUpe3RyeXtyZXR1cm4oYXdhaXQgR24uZGVmYXVsdC5yZWFkZGlyKGUpKS5maW5kKHI9PnIuc3RhcnRzV2l0aChcImxpYnNzbC5zby5cIikmJiFyLnN0YXJ0c1dpdGgoXCJsaWJzc2wuc28uMFwiKSl9Y2F0Y2godCl7aWYodC5jb2RlPT09XCJFTk9FTlRcIilyZXR1cm47dGhyb3cgdH19YXN5bmMgZnVuY3Rpb24gdXQoKXtsZXR7YmluYXJ5VGFyZ2V0OmV9PWF3YWl0IEJvKCk7cmV0dXJuIGV9ZnVuY3Rpb24gU3UoZSl7cmV0dXJuIGUuYmluYXJ5VGFyZ2V0IT09dm9pZCAwfWFzeW5jIGZ1bmN0aW9uIEpuKCl7bGV0e21lbW9pemVkOmUsLi4udH09YXdhaXQgQm8oKTtyZXR1cm4gdH12YXIgUnI9e307YXN5bmMgZnVuY3Rpb24gQm8oKXtpZihTdShScikpcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7Li4uUnIsbWVtb2l6ZWQ6ITB9KTtsZXQgZT1hd2FpdCBWbygpLHQ9SXUoZSk7cmV0dXJuIFJyPXsuLi5lLGJpbmFyeVRhcmdldDp0fSx7Li4uUnIsbWVtb2l6ZWQ6ITF9fWZ1bmN0aW9uIEl1KGUpe2xldHtwbGF0Zm9ybTp0LGFyY2g6cixhcmNoRnJvbVVuYW1lOm4sbGlic3NsOmksdGFyZ2V0RGlzdHJvOm8sZmFtaWx5RGlzdHJvOnMsb3JpZ2luYWxEaXN0cm86YX09ZTt0PT09XCJsaW51eFwiJiYhW1wieDY0XCIsXCJhcm02NFwiXS5pbmNsdWRlcyhyKSYmT3QoYFByaXNtYSBvbmx5IG9mZmljaWFsbHkgc3VwcG9ydHMgTGludXggb24gYW1kNjQgKHg4Nl82NCkgYW5kIGFybTY0IChhYXJjaDY0KSBzeXN0ZW0gYXJjaGl0ZWN0dXJlcy4gSWYgeW91IGFyZSB1c2luZyB5b3VyIG93biBjdXN0b20gUHJpc21hIGVuZ2luZXMsIHlvdSBjYW4gaWdub3JlIHRoaXMgd2FybmluZywgYXMgbG9uZyBhcyB5b3UndmUgY29tcGlsZWQgdGhlIGVuZ2luZXMgZm9yIHlvdXIgc3lzdGVtIGFyY2hpdGVjdHVyZSBcIiR7bn1cIi5gKTtsZXQgbD1cIjEuMS54XCI7aWYodD09PVwibGludXhcIiYmaT09PXZvaWQgMCl7bGV0IGM9c3Qoe2ZhbWlseURpc3RybzpzfSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwiZGViaWFuXCJ9LCgpPT5cIlBsZWFzZSBtYW51YWxseSBpbnN0YWxsIE9wZW5TU0wgdmlhIGBhcHQtZ2V0IHVwZGF0ZSAteSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgb3BlbnNzbGAgYW5kIHRyeSBpbnN0YWxsaW5nIFByaXNtYSBhZ2Fpbi4gSWYgeW91J3JlIHJ1bm5pbmcgUHJpc21hIG9uIERvY2tlciwgYWRkIHRoaXMgY29tbWFuZCB0byB5b3VyIERvY2tlcmZpbGUsIG9yIHN3aXRjaCB0byBhbiBpbWFnZSB0aGF0IGFscmVhZHkgaGFzIE9wZW5TU0wgaW5zdGFsbGVkLlwiKS5vdGhlcndpc2UoKCk9PlwiUGxlYXNlIG1hbnVhbGx5IGluc3RhbGwgT3BlblNTTCBhbmQgdHJ5IGluc3RhbGxpbmcgUHJpc21hIGFnYWluLlwiKTtPdChgUHJpc21hIGZhaWxlZCB0byBkZXRlY3QgdGhlIGxpYnNzbC9vcGVuc3NsIHZlcnNpb24gdG8gdXNlLCBhbmQgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLiBEZWZhdWx0aW5nIHRvIFwib3BlbnNzbC0ke2x9XCIuXG4ke2N9YCl9bGV0IHU9XCJkZWJpYW5cIjtpZih0PT09XCJsaW51eFwiJiZvPT09dm9pZCAwJiZPdChgUHJpc21hIGRvZXNuJ3Qga25vdyB3aGljaCBlbmdpbmVzIHRvIGRvd25sb2FkIGZvciB0aGUgTGludXggZGlzdHJvIFwiJHthfVwiLiBGYWxsaW5nIGJhY2sgdG8gUHJpc21hIGVuZ2luZXMgYnVpbHQgXCIke3V9XCIuXG5QbGVhc2UgcmVwb3J0IHlvdXIgZXhwZXJpZW5jZSBieSBjcmVhdGluZyBhbiBpc3N1ZSBhdCAke0R0KFwiaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzXCIpfSBzbyB3ZSBjYW4gYWRkIHlvdXIgZGlzdHJvIHRvIHRoZSBsaXN0IG9mIGtub3duIHN1cHBvcnRlZCBkaXN0cm9zLmApLHQ9PT1cImRhcndpblwiJiZyPT09XCJhcm02NFwiKXJldHVyblwiZGFyd2luLWFybTY0XCI7aWYodD09PVwiZGFyd2luXCIpcmV0dXJuXCJkYXJ3aW5cIjtpZih0PT09XCJ3aW4zMlwiKXJldHVyblwid2luZG93c1wiO2lmKHQ9PT1cImZyZWVic2RcIilyZXR1cm4gbztpZih0PT09XCJvcGVuYnNkXCIpcmV0dXJuXCJvcGVuYnNkXCI7aWYodD09PVwibmV0YnNkXCIpcmV0dXJuXCJuZXRic2RcIjtpZih0PT09XCJsaW51eFwiJiZvPT09XCJuaXhvc1wiKXJldHVyblwibGludXgtbml4b3NcIjtpZih0PT09XCJsaW51eFwiJiZyPT09XCJhcm02NFwiKXJldHVybmAke289PT1cIm11c2xcIj9cImxpbnV4LW11c2wtYXJtNjRcIjpcImxpbnV4LWFybTY0XCJ9LW9wZW5zc2wtJHtpfHxsfWA7aWYodD09PVwibGludXhcIiYmcj09PVwiYXJtXCIpcmV0dXJuYGxpbnV4LWFybS1vcGVuc3NsLSR7aXx8bH1gO2lmKHQ9PT1cImxpbnV4XCImJm89PT1cIm11c2xcIil7bGV0IGM9XCJsaW51eC1tdXNsXCI7cmV0dXJuIWl8fFVvKGkpP2M6YCR7Y30tb3BlbnNzbC0ke2l9YH1yZXR1cm4gdD09PVwibGludXhcIiYmbyYmaT9gJHtvfS1vcGVuc3NsLSR7aX1gOih0IT09XCJsaW51eFwiJiZPdChgUHJpc21hIGRldGVjdGVkIHVua25vd24gT1MgXCIke3R9XCIgYW5kIG1heSBub3Qgd29yayBhcyBleHBlY3RlZC4gRGVmYXVsdGluZyB0byBcImxpbnV4XCIuYCksaT9gJHt1fS1vcGVuc3NsLSR7aX1gOm8/YCR7b30tb3BlbnNzbC0ke2x9YDpgJHt1fS1vcGVuc3NsLSR7bH1gKX1hc3luYyBmdW5jdGlvbiBrdShlKXt0cnl7cmV0dXJuIGF3YWl0IGUoKX1jYXRjaHtyZXR1cm59fWZ1bmN0aW9uIElyKGUpe3JldHVybiBrdShhc3luYygpPT57bGV0IHQ9YXdhaXQgd3UoZSk7cmV0dXJuIGllKGBDb21tYW5kIFwiJHtlfVwiIHN1Y2Nlc3NmdWxseSByZXR1cm5lZCBcIiR7dC5zdGRvdXR9XCJgKSx0LnN0ZG91dH0pfWFzeW5jIGZ1bmN0aW9uIEZ1KCl7cmV0dXJuIHR5cGVvZiBTci5kZWZhdWx0Lm1hY2hpbmU9PVwiZnVuY3Rpb25cIj9Tci5kZWZhdWx0Lm1hY2hpbmUoKTooYXdhaXQgSXIoXCJ1bmFtZSAtbVwiKSk/LnRyaW0oKX1mdW5jdGlvbiBVbyhlKXtyZXR1cm4gZS5zdGFydHNXaXRoKFwiMS5cIil9dmFyIEhuPVtcImRhcndpblwiLFwiZGFyd2luLWFybTY0XCIsXCJkZWJpYW4tb3BlbnNzbC0xLjAueFwiLFwiZGViaWFuLW9wZW5zc2wtMS4xLnhcIixcImRlYmlhbi1vcGVuc3NsLTMuMC54XCIsXCJyaGVsLW9wZW5zc2wtMS4wLnhcIixcInJoZWwtb3BlbnNzbC0xLjEueFwiLFwicmhlbC1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1hcm02NC1vcGVuc3NsLTEuMS54XCIsXCJsaW51eC1hcm02NC1vcGVuc3NsLTEuMC54XCIsXCJsaW51eC1hcm02NC1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1hcm0tb3BlbnNzbC0xLjEueFwiLFwibGludXgtYXJtLW9wZW5zc2wtMS4wLnhcIixcImxpbnV4LWFybS1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1tdXNsXCIsXCJsaW51eC1tdXNsLW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LW11c2wtYXJtNjQtb3BlbnNzbC0xLjEueFwiLFwibGludXgtbXVzbC1hcm02NC1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1uaXhvc1wiLFwibGludXgtc3RhdGljLXg2NFwiLFwibGludXgtc3RhdGljLWFybTY0XCIsXCJ3aW5kb3dzXCIsXCJmcmVlYnNkMTFcIixcImZyZWVic2QxMlwiLFwiZnJlZWJzZDEzXCIsXCJvcGVuYnNkXCIsXCJuZXRic2RcIixcImFybVwiXTt2YXIgWW49UyhHbygpKSxEcj1TKHJlcXVpcmUoXCJmc1wiKSk7dmFyIGN0PVMocmVxdWlyZShcInBhdGhcIikpO2Z1bmN0aW9uIEpvKGUpe2xldCB0PWUuaWdub3JlUHJvY2Vzc0Vudj97fTpwcm9jZXNzLmVudixyPW49Pm4ubWF0Y2goLyguP1xcJHsoPzpbYS16QS1aMC05X10rKT99KS9nKT8ucmVkdWNlKGZ1bmN0aW9uKG8scyl7bGV0IGE9LyguPylcXCR7KFthLXpBLVowLTlfXSspP30vZy5leGVjKHMpO2lmKCFhKXJldHVybiBvO2xldCBsPWFbMV0sdSxjO2lmKGw9PT1cIlxcXFxcIiljPWFbMF0sdT1jLnJlcGxhY2UoXCJcXFxcJFwiLFwiJFwiKTtlbHNle2xldCBwPWFbMl07Yz1hWzBdLnN1YnN0cmluZyhsLmxlbmd0aCksdT1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0LHApP3RbcF06ZS5wYXJzZWRbcF18fFwiXCIsdT1yKHUpfXJldHVybiBvLnJlcGxhY2UoYyx1KX0sbik/P247Zm9yKGxldCBuIGluIGUucGFyc2VkKXtsZXQgaT1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pP3Rbbl06ZS5wYXJzZWRbbl07ZS5wYXJzZWRbbl09cihpKX1mb3IobGV0IG4gaW4gZS5wYXJzZWQpdFtuXT1lLnBhcnNlZFtuXTtyZXR1cm4gZX12YXIgem49TyhcInByaXNtYTp0cnlMb2FkRW52XCIpO2Z1bmN0aW9uIF90KHtyb290RW52UGF0aDplLHNjaGVtYUVudlBhdGg6dH0scj17Y29uZmxpY3RDaGVjazpcIm5vbmVcIn0pe2xldCBuPUhvKGUpO3IuY29uZmxpY3RDaGVjayE9PVwibm9uZVwiJiZCdShuLHQsci5jb25mbGljdENoZWNrKTtsZXQgaT1udWxsO3JldHVybiBXbyhuPy5wYXRoLHQpfHwoaT1Ibyh0KSksIW4mJiFpJiZ6bihcIk5vIEVudmlyb25tZW50IHZhcmlhYmxlcyBsb2FkZWRcIiksaT8uZG90ZW52UmVzdWx0LmVycm9yP2NvbnNvbGUuZXJyb3IobWUobmUoXCJTY2hlbWEgRW52IEVycm9yOiBcIikpK2kuZG90ZW52UmVzdWx0LmVycm9yKTp7bWVzc2FnZTpbbj8ubWVzc2FnZSxpPy5tZXNzYWdlXS5maWx0ZXIoQm9vbGVhbikuam9pbihgXG5gKSxwYXJzZWQ6ey4uLm4/LmRvdGVudlJlc3VsdD8ucGFyc2VkLC4uLmk/LmRvdGVudlJlc3VsdD8ucGFyc2VkfX19ZnVuY3Rpb24gQnUoZSx0LHIpe2xldCBuPWU/LmRvdGVudlJlc3VsdC5wYXJzZWQsaT0hV28oZT8ucGF0aCx0KTtpZihuJiZ0JiZpJiZEci5kZWZhdWx0LmV4aXN0c1N5bmModCkpe2xldCBvPVluLmRlZmF1bHQucGFyc2UoRHIuZGVmYXVsdC5yZWFkRmlsZVN5bmModCkpLHM9W107Zm9yKGxldCBhIGluIG8pblthXT09PW9bYV0mJnMucHVzaChhKTtpZihzLmxlbmd0aD4wKXtsZXQgYT1jdC5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksZS5wYXRoKSxsPWN0LmRlZmF1bHQucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSx0KTtpZihyPT09XCJlcnJvclwiKXtsZXQgdT1gVGhlcmUgaXMgYSBjb25mbGljdCBiZXR3ZWVuIGVudiB2YXIke3MubGVuZ3RoPjE/XCJzXCI6XCJcIn0gaW4gJHt0ZShhKX0gYW5kICR7dGUobCl9XG5Db25mbGljdGluZyBlbnYgdmFyczpcbiR7cy5tYXAoYz0+YCAgJHtuZShjKX1gKS5qb2luKGBcbmApfVxuXG5XZSBzdWdnZXN0IHRvIG1vdmUgdGhlIGNvbnRlbnRzIG9mICR7dGUobCl9IHRvICR7dGUoYSl9IHRvIGNvbnNvbGlkYXRlIHlvdXIgZW52IHZhcnMuXG5gO3Rocm93IG5ldyBFcnJvcih1KX1lbHNlIGlmKHI9PT1cIndhcm5cIil7bGV0IHU9YENvbmZsaWN0IGZvciBlbnYgdmFyJHtzLmxlbmd0aD4xP1wic1wiOlwiXCJ9ICR7cy5tYXAoYz0+bmUoYykpLmpvaW4oXCIsIFwiKX0gaW4gJHt0ZShhKX0gYW5kICR7dGUobCl9XG5FbnYgdmFycyBmcm9tICR7dGUobCl9IG92ZXJ3cml0ZSB0aGUgb25lcyBmcm9tICR7dGUoYSl9XG4gICAgICBgO2NvbnNvbGUud2FybihgJHtoZShcIndhcm4ocHJpc21hKVwiKX0gJHt1fWApfX19fWZ1bmN0aW9uIEhvKGUpe3JldHVybiBVdShlKT8oem4oYEVudmlyb25tZW50IHZhcmlhYmxlcyBsb2FkZWQgZnJvbSAke2V9YCkse2RvdGVudlJlc3VsdDpKbyhZbi5kZWZhdWx0LmNvbmZpZyh7cGF0aDplLGRlYnVnOnByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfREVCVUc/ITA6dm9pZCAwfSkpLG1lc3NhZ2U6RmUoYEVudmlyb25tZW50IHZhcmlhYmxlcyBsb2FkZWQgZnJvbSAke2N0LmRlZmF1bHQucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSxlKX1gKSxwYXRoOmV9KTooem4oYEVudmlyb25tZW50IHZhcmlhYmxlcyBub3QgZm91bmQgYXQgJHtlfWApLG51bGwpfWZ1bmN0aW9uIFdvKGUsdCl7cmV0dXJuIGUmJnQmJmN0LmRlZmF1bHQucmVzb2x2ZShlKT09PWN0LmRlZmF1bHQucmVzb2x2ZSh0KX1mdW5jdGlvbiBVdShlKXtyZXR1cm4hIShlJiZEci5kZWZhdWx0LmV4aXN0c1N5bmMoZSkpfXZhciB6bz1cImxpYnJhcnlcIjtmdW5jdGlvbiBabihlKXtsZXQgdD1LdSgpO3JldHVybiB0fHwoZT8uY29uZmlnLmVuZ2luZVR5cGU9PT1cImxpYnJhcnlcIj9cImxpYnJhcnlcIjplPy5jb25maWcuZW5naW5lVHlwZT09PVwiYmluYXJ5XCI/XCJiaW5hcnlcIjp6byl9ZnVuY3Rpb24gS3UoKXtsZXQgZT1wcm9jZXNzLmVudi5QUklTTUFfQ0xJRU5UX0VOR0lORV9UWVBFO3JldHVybiBlPT09XCJsaWJyYXJ5XCI/XCJsaWJyYXJ5XCI6ZT09PVwiYmluYXJ5XCI/XCJiaW5hcnlcIjp2b2lkIDB9dmFyIEp1PVMoWG4oKSk7dmFyIE49UyhyZXF1aXJlKFwicGF0aFwiKSksSHU9UyhYbigpKSxPZj1PKFwicHJpc21hOmVuZ2luZXNcIik7ZnVuY3Rpb24gcnMoKXtyZXR1cm4gTi5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vXCIpfXZhciBfZj1cImxpYnF1ZXJ5LWVuZ2luZVwiO04uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kYXJ3aW5cIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRhcndpbi1hcm02NFwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtZGViaWFuLW9wZW5zc2wtMS4wLnhcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMS54XCIpO04uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kZWJpYW4tb3BlbnNzbC0zLjAueFwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtbGludXgtc3RhdGljLXg2NFwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtbGludXgtc3RhdGljLWFybTY0XCIpO04uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1yaGVsLW9wZW5zc2wtMS4wLnhcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLXJoZWwtb3BlbnNzbC0xLjEueFwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtcmhlbC1vcGVuc3NsLTMuMC54XCIpO04uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1kYXJ3aW4uZHlsaWIubm9kZVwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtZGFyd2luLWFybTY0LmR5bGliLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMC54LnNvLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMS54LnNvLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRlYmlhbi1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LWFybTY0LW9wZW5zc2wtMS4wLnguc28ubm9kZVwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtYXJtNjQtb3BlbnNzbC0xLjEueC5zby5ub2RlXCIpO04uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1saW51eC1hcm02NC1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LW11c2wuc28ubm9kZVwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtbXVzbC1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLXJoZWwtb3BlbnNzbC0xLjAueC5zby5ub2RlXCIpO04uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1yaGVsLW9wZW5zc2wtMS4xLnguc28ubm9kZVwiKTtOLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtcmhlbC1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7Ti5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnlfZW5naW5lLXdpbmRvd3MuZGxsLm5vZGVcIik7dmFyIGVpPVMocmVxdWlyZShcImZzXCIpKSxucz1PKFwiY2htb2RQbHVzWFwiKTtmdW5jdGlvbiB0aShlKXtpZihwcm9jZXNzLnBsYXRmb3JtPT09XCJ3aW4zMlwiKXJldHVybjtsZXQgdD1laS5kZWZhdWx0LnN0YXRTeW5jKGUpLHI9dC5tb2RlfDY0fDh8MTtpZih0Lm1vZGU9PT1yKXtucyhgRXhlY3V0aW9uIHBlcm1pc3Npb25zIG9mICR7ZX0gYXJlIGZpbmVgKTtyZXR1cm59bGV0IG49ci50b1N0cmluZyg4KS5zbGljZSgtMyk7bnMoYEhhdmUgdG8gY2FsbCBjaG1vZFBsdXNYIG9uICR7ZX1gKSxlaS5kZWZhdWx0LmNobW9kU3luYyhlLG4pfWZ1bmN0aW9uIHJpKGUpe2xldCB0PWUuZSxyPWE9PmBQcmlzbWEgY2Fubm90IGZpbmQgdGhlIHJlcXVpcmVkIFxcYCR7YX1cXGAgc3lzdGVtIGxpYnJhcnkgaW4geW91ciBzeXN0ZW1gLG49dC5tZXNzYWdlLmluY2x1ZGVzKFwiY2Fubm90IG9wZW4gc2hhcmVkIG9iamVjdCBmaWxlXCIpLGk9YFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBhYm91dCBQcmlzbWEncyBzeXN0ZW0gcmVxdWlyZW1lbnRzOiAke0R0KFwiaHR0cHM6Ly9wcmlzLmx5L2Qvc3lzdGVtLXJlcXVpcmVtZW50c1wiKX1gLG89YFVuYWJsZSB0byByZXF1aXJlKFxcYCR7RmUoZS5pZCl9XFxgKS5gLHM9c3Qoe21lc3NhZ2U6dC5tZXNzYWdlLGNvZGU6dC5jb2RlfSkud2l0aCh7Y29kZTpcIkVOT0VOVFwifSwoKT0+XCJGaWxlIGRvZXMgbm90IGV4aXN0LlwiKS53aGVuKCh7bWVzc2FnZTphfSk9Pm4mJmEuaW5jbHVkZXMoXCJsaWJ6XCIpLCgpPT5gJHtyKFwibGlielwiKX0uIFBsZWFzZSBpbnN0YWxsIGl0IGFuZCB0cnkgYWdhaW4uYCkud2hlbigoe21lc3NhZ2U6YX0pPT5uJiZhLmluY2x1ZGVzKFwibGliZ2NjX3NcIiksKCk9PmAke3IoXCJsaWJnY2Nfc1wiKX0uIFBsZWFzZSBpbnN0YWxsIGl0IGFuZCB0cnkgYWdhaW4uYCkud2hlbigoe21lc3NhZ2U6YX0pPT5uJiZhLmluY2x1ZGVzKFwibGlic3NsXCIpLCgpPT57bGV0IGE9ZS5wbGF0Zm9ybUluZm8ubGlic3NsP2BvcGVuc3NsLSR7ZS5wbGF0Zm9ybUluZm8ubGlic3NsfWA6XCJvcGVuc3NsXCI7cmV0dXJuYCR7cihcImxpYnNzbFwiKX0uIFBsZWFzZSBpbnN0YWxsICR7YX0gYW5kIHRyeSBhZ2Fpbi5gfSkud2hlbigoe21lc3NhZ2U6YX0pPT5hLmluY2x1ZGVzKFwiR0xJQkNcIiksKCk9PmBQcmlzbWEgaGFzIGRldGVjdGVkIGFuIGluY29tcGF0aWJsZSB2ZXJzaW9uIG9mIHRoZSBcXGBnbGliY1xcYCBDIHN0YW5kYXJkIGxpYnJhcnkgaW5zdGFsbGVkIGluIHlvdXIgc3lzdGVtLiBUaGlzIHByb2JhYmx5IG1lYW5zIHlvdXIgc3lzdGVtIG1heSBiZSB0b28gb2xkIHRvIHJ1biBQcmlzbWEuICR7aX1gKS53aGVuKCh7bWVzc2FnZTphfSk9PmUucGxhdGZvcm1JbmZvLnBsYXRmb3JtPT09XCJsaW51eFwiJiZhLmluY2x1ZGVzKFwic3ltYm9sIG5vdCBmb3VuZFwiKSwoKT0+YFRoZSBQcmlzbWEgZW5naW5lcyBhcmUgbm90IGNvbXBhdGlibGUgd2l0aCB5b3VyIHN5c3RlbSAke2UucGxhdGZvcm1JbmZvLm9yaWdpbmFsRGlzdHJvfSBvbiAoJHtlLnBsYXRmb3JtSW5mby5hcmNoRnJvbVVuYW1lfSkgd2hpY2ggdXNlcyB0aGUgXFxgJHtlLnBsYXRmb3JtSW5mby5iaW5hcnlUYXJnZXR9XFxgIGJpbmFyeVRhcmdldCBieSBkZWZhdWx0LiAke2l9YCkub3RoZXJ3aXNlKCgpPT5gVGhlIFByaXNtYSBlbmdpbmVzIGRvIG5vdCBzZWVtIHRvIGJlIGNvbXBhdGlibGUgd2l0aCB5b3VyIHN5c3RlbS4gJHtpfWApO3JldHVybmAke299XG4ke3N9XG5cbkRldGFpbHM6ICR7dC5tZXNzYWdlfWB9dmFyIE50PVMocmVxdWlyZShcInBhdGhcIikpO2Z1bmN0aW9uIG5pKGUpe3JldHVybiBOdC5kZWZhdWx0LnNlcD09PU50LmRlZmF1bHQucG9zaXguc2VwP2U6ZS5zcGxpdChOdC5kZWZhdWx0LnNlcCkuam9pbihOdC5kZWZhdWx0LnBvc2l4LnNlcCl9dmFyIG9zPVMoaWkoKSk7ZnVuY3Rpb24gc2koZSl7cmV0dXJuIFN0cmluZyhuZXcgb2koZSkpfXZhciBvaT1jbGFzc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLmNvbmZpZz10fXRvU3RyaW5nKCl7bGV0e2NvbmZpZzp0fT10aGlzLHI9dC5wcm92aWRlci5mcm9tRW52VmFyP2BlbnYoXCIke3QucHJvdmlkZXIuZnJvbUVudlZhcn1cIilgOnQucHJvdmlkZXIudmFsdWUsbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHtwcm92aWRlcjpyLGJpbmFyeVRhcmdldHM6V3UodC5iaW5hcnlUYXJnZXRzKX0pKTtyZXR1cm5gZ2VuZXJhdG9yICR7dC5uYW1lfSB7XG4keygwLG9zLmRlZmF1bHQpKHp1KG4pLDIpfVxufWB9fTtmdW5jdGlvbiBXdShlKXtsZXQgdDtpZihlLmxlbmd0aD4wKXtsZXQgcj1lLmZpbmQobj0+bi5mcm9tRW52VmFyIT09bnVsbCk7cj90PWBlbnYoXCIke3IuZnJvbUVudlZhcn1cIilgOnQ9ZS5tYXAobj0+bi5uYXRpdmU/XCJuYXRpdmVcIjpuLnZhbHVlKX1lbHNlIHQ9dm9pZCAwO3JldHVybiB0fWZ1bmN0aW9uIHp1KGUpe2xldCB0PU9iamVjdC5rZXlzKGUpLnJlZHVjZSgocixuKT0+TWF0aC5tYXgocixuLmxlbmd0aCksMCk7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoW3Isbl0pPT5gJHtyLnBhZEVuZCh0KX0gPSAke1l1KG4pfWApLmpvaW4oYFxuYCl9ZnVuY3Rpb24gWXUoZSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSwodCxyKT0+QXJyYXkuaXNBcnJheShyKT9gWyR7ci5tYXAobj0+SlNPTi5zdHJpbmdpZnkobikpLmpvaW4oXCIsIFwiKX1dYDpKU09OLnN0cmluZ2lmeShyKSkpfXZhciAkdD17fTtTdCgkdCx7ZXJyb3I6KCk9PmVjLGluZm86KCk9Plh1LGxvZzooKT0+WnUscXVlcnk6KCk9PnRjLHNob3VsZDooKT0+c3MsdGFnczooKT0+THQsd2FybjooKT0+YWl9KTt2YXIgTHQ9e2Vycm9yOm1lKFwicHJpc21hOmVycm9yXCIpLHdhcm46aGUoXCJwcmlzbWE6d2FyblwiKSxpbmZvOkRlKFwicHJpc21hOmluZm9cIikscXVlcnk6b3QoXCJwcmlzbWE6cXVlcnlcIil9LHNzPXt3YXJuOigpPT4hcHJvY2Vzcy5lbnYuUFJJU01BX0RJU0FCTEVfV0FSTklOR1N9O2Z1bmN0aW9uIFp1KC4uLmUpe2NvbnNvbGUubG9nKC4uLmUpfWZ1bmN0aW9uIGFpKGUsLi4udCl7c3Mud2FybigpJiZjb25zb2xlLndhcm4oYCR7THQud2Fybn0gJHtlfWAsLi4udCl9ZnVuY3Rpb24gWHUoZSwuLi50KXtjb25zb2xlLmluZm8oYCR7THQuaW5mb30gJHtlfWAsLi4udCl9ZnVuY3Rpb24gZWMoZSwuLi50KXtjb25zb2xlLmVycm9yKGAke0x0LmVycm9yfSAke2V9YCwuLi50KX1mdW5jdGlvbiB0YyhlLC4uLnQpe2NvbnNvbGUubG9nKGAke0x0LnF1ZXJ5fSAke2V9YCwuLi50KX1mdW5jdGlvbiBfcihlLHQpe2lmKCFlKXRocm93IG5ldyBFcnJvcihgJHt0fS4gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLiBJZiB5b3Ugc2VlIHRoaXMgZXJyb3IsIHBsZWFzZSwgb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS9pc3N1ZXMvbmV3P2Fzc2lnbmVlcz0mbGFiZWxzPWtpbmQlMkZidWcmcHJvamVjdHM9JnRlbXBsYXRlPWJ1Z19yZXBvcnQueW1sYCl9ZnVuY3Rpb24gSGUoZSx0KXt0aHJvdyBuZXcgRXJyb3IodCl9ZnVuY3Rpb24gdWkoZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9dmFyIGNpPShlLHQpPT5lLnJlZHVjZSgocixuKT0+KHJbdChuKV09bixyKSx7fSk7ZnVuY3Rpb24gcHQoZSx0KXtsZXQgcj17fTtmb3IobGV0IG4gb2YgT2JqZWN0LmtleXMoZSkpcltuXT10KGVbbl0sbik7cmV0dXJuIHJ9ZnVuY3Rpb24gcGkoZSx0KXtpZihlLmxlbmd0aD09PTApcmV0dXJuO2xldCByPWVbMF07Zm9yKGxldCBuPTE7bjxlLmxlbmd0aDtuKyspdChyLGVbbl0pPDAmJihyPWVbbl0pO3JldHVybiByfWZ1bmN0aW9uIEUoZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIm5hbWVcIix7dmFsdWU6dCxjb25maWd1cmFibGU6ITB9KX12YXIgcHM9bmV3IFNldCxxdD0oZSx0LC4uLnIpPT57cHMuaGFzKGUpfHwocHMuYWRkKGUpLGFpKHQsLi4ucikpfTt2YXIgVT1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHIse2NvZGU6bixjbGllbnRWZXJzaW9uOmksbWV0YTpvLGJhdGNoUmVxdWVzdElkeDpzfSl7c3VwZXIocik7dGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIix0aGlzLmNvZGU9bix0aGlzLmNsaWVudFZlcnNpb249aSx0aGlzLm1ldGE9byxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImJhdGNoUmVxdWVzdElkeFwiLHt2YWx1ZTpzLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITB9KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIn19O0UoVSxcIlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yXCIpO3ZhciBNZT1jbGFzcyBleHRlbmRzIFV7Y29uc3RydWN0b3IodCxyKXtzdXBlcih0LHtjb2RlOlwiUDIwMjVcIixjbGllbnRWZXJzaW9uOnJ9KSx0aGlzLm5hbWU9XCJOb3RGb3VuZEVycm9yXCJ9fTtFKE1lLFwiTm90Rm91bmRFcnJvclwiKTt2YXIgRj1jbGFzcyBlIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IocixuLGkpe3N1cGVyKHIpO3RoaXMubmFtZT1cIlByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3JcIix0aGlzLmNsaWVudFZlcnNpb249bix0aGlzLmVycm9yQ29kZT1pLEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGUpfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yXCJ9fTtFKEYsXCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yXCIpO3ZhciB1ZT1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHIsbil7c3VwZXIocik7dGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3JcIix0aGlzLmNsaWVudFZlcnNpb249bn1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3JcIn19O0UodWUsXCJQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvclwiKTt2YXIgSz1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHIse2NsaWVudFZlcnNpb246bixiYXRjaFJlcXVlc3RJZHg6aX0pe3N1cGVyKHIpO3RoaXMubmFtZT1cIlByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3JcIix0aGlzLmNsaWVudFZlcnNpb249bixPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImJhdGNoUmVxdWVzdElkeFwiLHt2YWx1ZTppLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6ITF9KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvclwifX07RShLLFwiUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvclwiKTt2YXIgWD1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHIse2NsaWVudFZlcnNpb246bn0pe3N1cGVyKHIpO3RoaXMubmFtZT1cIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvclwiO3RoaXMuY2xpZW50VmVyc2lvbj1ufWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3JcIn19O0UoWCxcIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvclwiKTt2YXIgZHQ9Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy5fZW5naW5lPXR9cHJvbWV0aGV1cyh0KXtyZXR1cm4gdGhpcy5fZW5naW5lLm1ldHJpY3Moe2Zvcm1hdDpcInByb21ldGhldXNcIiwuLi50fSl9anNvbih0KXtyZXR1cm4gdGhpcy5fZW5naW5lLm1ldHJpY3Moe2Zvcm1hdDpcImpzb25cIiwuLi50fSl9fTtmdW5jdGlvbiBWdChlKXtsZXQgdDtyZXR1cm57Z2V0KCl7cmV0dXJuIHR8fCh0PXt2YWx1ZTplKCl9KSx0LnZhbHVlfX19ZnVuY3Rpb24gbXMoZSx0KXtsZXQgcj1WdCgoKT0+bmModCkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZG1tZlwiLHtnZXQ6KCk9PnIuZ2V0KCl9KX1mdW5jdGlvbiBuYyhlKXtyZXR1cm57ZGF0YW1vZGVsOnttb2RlbHM6ZGkoZS5tb2RlbHMpLGVudW1zOmRpKGUuZW51bXMpLHR5cGVzOmRpKGUudHlwZXMpfX19ZnVuY3Rpb24gZGkoZSl7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoW3Qscl0pPT4oe25hbWU6dCwuLi5yfSkpfXZhciBpYz1bXCJKc29uTnVsbFZhbHVlSW5wdXRcIixcIk51bGxhYmxlSnNvbk51bGxWYWx1ZUlucHV0XCIsXCJKc29uTnVsbFZhbHVlRmlsdGVyXCJdLExyPVN5bWJvbCgpLG1pPW5ldyBXZWFrTWFwLHhlPWNsYXNze2NvbnN0cnVjdG9yKHQpe3Q9PT1Mcj9taS5zZXQodGhpcyxgUHJpc21hLiR7dGhpcy5fZ2V0TmFtZSgpfWApOm1pLnNldCh0aGlzLGBuZXcgUHJpc21hLiR7dGhpcy5fZ2V0TmFtZXNwYWNlKCl9LiR7dGhpcy5fZ2V0TmFtZSgpfSgpYCl9X2dldE5hbWUoKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lfXRvU3RyaW5nKCl7cmV0dXJuIG1pLmdldCh0aGlzKX19LGp0PWNsYXNzIGV4dGVuZHMgeGV7X2dldE5hbWVzcGFjZSgpe3JldHVyblwiTnVsbFR5cGVzXCJ9fSxCdD1jbGFzcyBleHRlbmRzIGp0e307ZmkoQnQsXCJEYk51bGxcIik7dmFyIFV0PWNsYXNzIGV4dGVuZHMganR7fTtmaShVdCxcIkpzb25OdWxsXCIpO3ZhciBLdD1jbGFzcyBleHRlbmRzIGp0e307ZmkoS3QsXCJBbnlOdWxsXCIpO3ZhciAkcj17Y2xhc3Nlczp7RGJOdWxsOkJ0LEpzb25OdWxsOlV0LEFueU51bGw6S3R9LGluc3RhbmNlczp7RGJOdWxsOm5ldyBCdChMciksSnNvbk51bGw6bmV3IFV0KExyKSxBbnlOdWxsOm5ldyBLdChMcil9fTtmdW5jdGlvbiBmaShlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibmFtZVwiLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pfXZhciBsYz1TKExuKCksMSk7ZnVuY3Rpb24gcXIoZSl7cmV0dXJue29rOiExLGVycm9yOmUsbWFwKCl7cmV0dXJuIHFyKGUpfSxmbGF0TWFwKCl7cmV0dXJuIHFyKGUpfX19dmFyIG9jPWNsYXNze2NvbnN0cnVjdG9yKCl7ZW8odGhpcyxcInJlZ2lzdGVyZWRFcnJvcnNcIixbXSl9Y29uc3VtZUVycm9yKGUpe3JldHVybiB0aGlzLnJlZ2lzdGVyZWRFcnJvcnNbZV19cmVnaXN0ZXJOZXdFcnJvcihlKXtsZXQgdD0wO2Zvcig7dGhpcy5yZWdpc3RlcmVkRXJyb3JzW3RdIT09dm9pZCAwOyl0Kys7cmV0dXJuIHRoaXMucmVnaXN0ZXJlZEVycm9yc1t0XT17ZXJyb3I6ZX0sdH19LGZzPWU9PntsZXQgdD1uZXcgb2Mscj1PZSh0LGUuc3RhcnRUcmFuc2FjdGlvbi5iaW5kKGUpKTtyZXR1cm57ZXJyb3JSZWdpc3RyeTp0LHF1ZXJ5UmF3Ok9lKHQsZS5xdWVyeVJhdy5iaW5kKGUpKSxleGVjdXRlUmF3Ok9lKHQsZS5leGVjdXRlUmF3LmJpbmQoZSkpLGZsYXZvdXI6ZS5mbGF2b3VyLHN0YXJ0VHJhbnNhY3Rpb246YXN5bmMoLi4ubik9Pihhd2FpdCByKC4uLm4pKS5tYXAobz0+c2ModCxvKSksY2xvc2U6T2UodCxlLmNsb3NlLmJpbmQoZSkpfX0sc2M9KGUsdCk9Pih7Zmxhdm91cjp0LmZsYXZvdXIsb3B0aW9uczp0Lm9wdGlvbnMscXVlcnlSYXc6T2UoZSx0LnF1ZXJ5UmF3LmJpbmQodCkpLGV4ZWN1dGVSYXc6T2UoZSx0LmV4ZWN1dGVSYXcuYmluZCh0KSksY29tbWl0Ok9lKGUsdC5jb21taXQuYmluZCh0KSkscm9sbGJhY2s6T2UoZSx0LnJvbGxiYWNrLmJpbmQodCkpLGRpc3Bvc2U6YWMoZSx0LmRpc3Bvc2UuYmluZCh0KSl9KTtmdW5jdGlvbiBPZShlLHQpe3JldHVybiBhc3luYyguLi5yKT0+e3RyeXtyZXR1cm4gYXdhaXQgdCguLi5yKX1jYXRjaChuKXtsZXQgaT1lLnJlZ2lzdGVyTmV3RXJyb3Iobik7cmV0dXJuIHFyKHtraW5kOlwiR2VuZXJpY0pzXCIsaWQ6aX0pfX19ZnVuY3Rpb24gYWMoZSx0KXtyZXR1cm4oLi4ucik9Pnt0cnl7cmV0dXJuIHQoLi4ucil9Y2F0Y2gobil7bGV0IGk9ZS5yZWdpc3Rlck5ld0Vycm9yKG4pO3JldHVybiBxcih7a2luZDpcIkdlbmVyaWNKc1wiLGlkOml9KX19fXZhciBrbD1yZXF1aXJlKFwiYXN5bmNfaG9va3NcIiksRmw9cmVxdWlyZShcImV2ZW50c1wiKSxEbD1TKHJlcXVpcmUoXCJmc1wiKSkseXI9UyhyZXF1aXJlKFwicGF0aFwiKSk7dmFyIG9lPWNsYXNzIGV7Y29uc3RydWN0b3IodCxyKXtpZih0Lmxlbmd0aC0xIT09ci5sZW5ndGgpdGhyb3cgdC5sZW5ndGg9PT0wP25ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhdCBsZWFzdCAxIHN0cmluZ1wiKTpuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCAke3QubGVuZ3RofSBzdHJpbmdzIHRvIGhhdmUgJHt0Lmxlbmd0aC0xfSB2YWx1ZXNgKTtsZXQgbj1yLnJlZHVjZSgocyxhKT0+cysoYSBpbnN0YW5jZW9mIGU/YS52YWx1ZXMubGVuZ3RoOjEpLDApO3RoaXMudmFsdWVzPW5ldyBBcnJheShuKSx0aGlzLnN0cmluZ3M9bmV3IEFycmF5KG4rMSksdGhpcy5zdHJpbmdzWzBdPXRbMF07bGV0IGk9MCxvPTA7Zm9yKDtpPHIubGVuZ3RoOyl7bGV0IHM9cltpKytdLGE9dFtpXTtpZihzIGluc3RhbmNlb2YgZSl7dGhpcy5zdHJpbmdzW29dKz1zLnN0cmluZ3NbMF07bGV0IGw9MDtmb3IoO2w8cy52YWx1ZXMubGVuZ3RoOyl0aGlzLnZhbHVlc1tvKytdPXMudmFsdWVzW2wrK10sdGhpcy5zdHJpbmdzW29dPXMuc3RyaW5nc1tsXTt0aGlzLnN0cmluZ3Nbb10rPWF9ZWxzZSB0aGlzLnZhbHVlc1tvKytdPXMsdGhpcy5zdHJpbmdzW29dPWF9fWdldCB0ZXh0KCl7bGV0IHQ9MSxyPXRoaXMuc3RyaW5nc1swXTtmb3IoO3Q8dGhpcy5zdHJpbmdzLmxlbmd0aDspcis9YCQke3R9JHt0aGlzLnN0cmluZ3NbdCsrXX1gO3JldHVybiByfWdldCBzcWwoKXtsZXQgdD0xLHI9dGhpcy5zdHJpbmdzWzBdO2Zvcig7dDx0aGlzLnN0cmluZ3MubGVuZ3RoOylyKz1gPyR7dGhpcy5zdHJpbmdzW3QrK119YDtyZXR1cm4gcn1pbnNwZWN0KCl7cmV0dXJue3RleHQ6dGhpcy50ZXh0LHNxbDp0aGlzLnNxbCx2YWx1ZXM6dGhpcy52YWx1ZXN9fX07ZnVuY3Rpb24gZ3MoZSx0PVwiLFwiLHI9XCJcIixuPVwiXCIpe2lmKGUubGVuZ3RoPT09MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYGpvaW4oW10pYCB0byBiZSBjYWxsZWQgd2l0aCBhbiBhcnJheSBvZiBtdWx0aXBsZSBlbGVtZW50cywgYnV0IGdvdCBhbiBlbXB0eSBhcnJheVwiKTtyZXR1cm4gbmV3IG9lKFtyLC4uLkFycmF5KGUubGVuZ3RoLTEpLmZpbGwodCksbl0sZSl9ZnVuY3Rpb24gZ2koZSl7cmV0dXJuIG5ldyBvZShbZV0sW10pfXZhciB5cz1naShcIlwiKTtmdW5jdGlvbiB5aShlLC4uLnQpe3JldHVybiBuZXcgb2UoZSx0KX1mdW5jdGlvbiBRdChlKXtyZXR1cm57Z2V0S2V5cygpe3JldHVybiBPYmplY3Qua2V5cyhlKX0sZ2V0UHJvcGVydHlWYWx1ZSh0KXtyZXR1cm4gZVt0XX19fWZ1bmN0aW9uIHJlKGUsdCl7cmV0dXJue2dldEtleXMoKXtyZXR1cm5bZV19LGdldFByb3BlcnR5VmFsdWUoKXtyZXR1cm4gdCgpfX19dmFyIGJlPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5fbWFwPW5ldyBNYXB9Z2V0KHQpe3JldHVybiB0aGlzLl9tYXAuZ2V0KHQpPy52YWx1ZX1zZXQodCxyKXt0aGlzLl9tYXAuc2V0KHQse3ZhbHVlOnJ9KX1nZXRPckNyZWF0ZSh0LHIpe2xldCBuPXRoaXMuX21hcC5nZXQodCk7aWYobilyZXR1cm4gbi52YWx1ZTtsZXQgaT1yKCk7cmV0dXJuIHRoaXMuc2V0KHQsaSksaX19O2Z1bmN0aW9uIFdlKGUpe2xldCB0PW5ldyBiZTtyZXR1cm57Z2V0S2V5cygpe3JldHVybiBlLmdldEtleXMoKX0sZ2V0UHJvcGVydHlWYWx1ZShyKXtyZXR1cm4gdC5nZXRPckNyZWF0ZShyLCgpPT5lLmdldFByb3BlcnR5VmFsdWUocikpfSxnZXRQcm9wZXJ0eURlc2NyaXB0b3Iocil7cmV0dXJuIGUuZ2V0UHJvcGVydHlEZXNjcmlwdG9yPy4ocil9fX12YXIgYnM9cmVxdWlyZShcInV0aWxcIik7dmFyIFZyPXtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH07ZnVuY3Rpb24ganIoZSl7bGV0IHQ9bmV3IFNldChlKTtyZXR1cm57Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOigpPT5WcixoYXM6KHIsbik9PnQuaGFzKG4pLHNldDoocixuLGkpPT50LmFkZChuKSYmUmVmbGVjdC5zZXQocixuLGkpLG93bktleXM6KCk9PlsuLi50XX19dmFyIGhzPVN5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTtmdW5jdGlvbiBFZShlLHQpe2xldCByPXVjKHQpLG49bmV3IFNldCxpPW5ldyBQcm94eShlLHtnZXQobyxzKXtpZihuLmhhcyhzKSlyZXR1cm4gb1tzXTtsZXQgYT1yLmdldChzKTtyZXR1cm4gYT9hLmdldFByb3BlcnR5VmFsdWUocyk6b1tzXX0saGFzKG8scyl7aWYobi5oYXMocykpcmV0dXJuITA7bGV0IGE9ci5nZXQocyk7cmV0dXJuIGE/YS5oYXM/LihzKT8/ITA6UmVmbGVjdC5oYXMobyxzKX0sb3duS2V5cyhvKXtsZXQgcz14cyhSZWZsZWN0Lm93bktleXMobyksciksYT14cyhBcnJheS5mcm9tKHIua2V5cygpKSxyKTtyZXR1cm5bLi4ubmV3IFNldChbLi4ucywuLi5hLC4uLm5dKV19LHNldChvLHMsYSl7cmV0dXJuIHIuZ2V0KHMpPy5nZXRQcm9wZXJ0eURlc2NyaXB0b3I/LihzKT8ud3JpdGFibGU9PT0hMT8hMToobi5hZGQocyksUmVmbGVjdC5zZXQobyxzLGEpKX0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8scyl7bGV0IGE9UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxzKTtpZihhJiYhYS5jb25maWd1cmFibGUpcmV0dXJuIGE7bGV0IGw9ci5nZXQocyk7cmV0dXJuIGw/bC5nZXRQcm9wZXJ0eURlc2NyaXB0b3I/ey4uLlZyLC4uLmw/LmdldFByb3BlcnR5RGVzY3JpcHRvcihzKX06VnI6YX0sZGVmaW5lUHJvcGVydHkobyxzLGEpe3JldHVybiBuLmFkZChzKSxSZWZsZWN0LmRlZmluZVByb3BlcnR5KG8scyxhKX19KTtyZXR1cm4gaVtoc109ZnVuY3Rpb24obyxzLGE9YnMuaW5zcGVjdCl7bGV0IGw9ey4uLnRoaXN9O3JldHVybiBkZWxldGUgbFtoc10sYShsLHMpfSxpfWZ1bmN0aW9uIHVjKGUpe2xldCB0PW5ldyBNYXA7Zm9yKGxldCByIG9mIGUpe2xldCBuPXIuZ2V0S2V5cygpO2ZvcihsZXQgaSBvZiBuKXQuc2V0KGkscil9cmV0dXJuIHR9ZnVuY3Rpb24geHMoZSx0KXtyZXR1cm4gZS5maWx0ZXIocj0+dC5nZXQocik/Lmhhcz8uKHIpPz8hMCl9ZnVuY3Rpb24gR3QoZSl7cmV0dXJue2dldEtleXMoKXtyZXR1cm4gZX0saGFzKCl7cmV0dXJuITF9LGdldFByb3BlcnR5VmFsdWUoKXt9fX12YXIgbXQ9Y2xhc3N7Y29uc3RydWN0b3IodD0wLHIpe3RoaXMuY29udGV4dD1yO3RoaXMubGluZXM9W107dGhpcy5jdXJyZW50TGluZT1cIlwiO3RoaXMuY3VycmVudEluZGVudD0wO3RoaXMuY3VycmVudEluZGVudD10fXdyaXRlKHQpe3JldHVybiB0eXBlb2YgdD09XCJzdHJpbmdcIj90aGlzLmN1cnJlbnRMaW5lKz10OnQud3JpdGUodGhpcyksdGhpc313cml0ZUpvaW5lZCh0LHIpe2xldCBuPXIubGVuZ3RoLTE7Zm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspdGhpcy53cml0ZShyW2ldKSxpIT09biYmdGhpcy53cml0ZSh0KTtyZXR1cm4gdGhpc313cml0ZUxpbmUodCl7cmV0dXJuIHRoaXMud3JpdGUodCkubmV3TGluZSgpfW5ld0xpbmUoKXt0aGlzLmxpbmVzLnB1c2godGhpcy5pbmRlbnRlZEN1cnJlbnRMaW5lKCkpLHRoaXMuY3VycmVudExpbmU9XCJcIix0aGlzLm1hcmdpblN5bWJvbD12b2lkIDA7bGV0IHQ9dGhpcy5hZnRlck5leHROZXdMaW5lQ2FsbGJhY2s7cmV0dXJuIHRoaXMuYWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrPXZvaWQgMCx0Py4oKSx0aGlzfXdpdGhJbmRlbnQodCl7cmV0dXJuIHRoaXMuaW5kZW50KCksdCh0aGlzKSx0aGlzLnVuaW5kZW50KCksdGhpc31hZnRlck5leHROZXdsaW5lKHQpe3JldHVybiB0aGlzLmFmdGVyTmV4dE5ld0xpbmVDYWxsYmFjaz10LHRoaXN9aW5kZW50KCl7cmV0dXJuIHRoaXMuY3VycmVudEluZGVudCsrLHRoaXN9dW5pbmRlbnQoKXtyZXR1cm4gdGhpcy5jdXJyZW50SW5kZW50PjAmJnRoaXMuY3VycmVudEluZGVudC0tLHRoaXN9YWRkTWFyZ2luU3ltYm9sKHQpe3JldHVybiB0aGlzLm1hcmdpblN5bWJvbD10LHRoaXN9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5saW5lcy5jb25jYXQodGhpcy5pbmRlbnRlZEN1cnJlbnRMaW5lKCkpLmpvaW4oYFxuYCl9Z2V0Q3VycmVudExpbmVMZW5ndGgoKXtyZXR1cm4gdGhpcy5jdXJyZW50TGluZS5sZW5ndGh9aW5kZW50ZWRDdXJyZW50TGluZSgpe2xldCB0PXRoaXMuY3VycmVudExpbmUucGFkU3RhcnQodGhpcy5jdXJyZW50TGluZS5sZW5ndGgrMip0aGlzLmN1cnJlbnRJbmRlbnQpO3JldHVybiB0aGlzLm1hcmdpblN5bWJvbD90aGlzLm1hcmdpblN5bWJvbCt0LnNsaWNlKDEpOnR9fTtmdW5jdGlvbiBmdChlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERhdGV8fE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT09PVwiW29iamVjdCBEYXRlXVwifWZ1bmN0aW9uIEJyKGUpe3JldHVybiBlLnRvU3RyaW5nKCkhPT1cIkludmFsaWQgRGF0ZVwifXZhciBndD05ZTE1LCRlPTFlOSxoaT1cIjAxMjM0NTY3ODlhYmNkZWZcIixLcj1cIjIuMzAyNTg1MDkyOTk0MDQ1Njg0MDE3OTkxNDU0Njg0MzY0MjA3NjAxMTAxNDg4NjI4NzcyOTc2MDMzMzI3OTAwOTY3NTcyNjA5Njc3MzUyNDgwMjM1OTk3MjA1MDg5NTk4Mjk4MzQxOTY3Nzg0MDQyMjg2MjQ4NjMzNDA5NTI1NDY1MDgyODA2NzU2NjY2Mjg3MzY5MDk4NzgxNjg5NDgyOTA3MjA4MzI1NTU0NjgwODQzNzk5ODk0ODI2MjMzMTk4NTI4MzkzNTA1MzA4OTY1Mzc3NzMyNjI4ODQ2MTYzMzY2MjIyMjg3Njk4MjE5ODg2NzQ2NTQzNjY3NDc0NDA0MjQzMjc0MzY1MTU1MDQ4OTM0MzE0OTM5MzkxNDc5NjE5NDA0NDAwMjIyMTA1MTAxNzE0MTc0ODAwMzY4ODA4NDAxMjY0NzA4MDY4NTU2Nzc0MzIxNjIyODM1NTIyMDExNDgwNDY2MzcxNTY1OTEyMTM3MzQ1MDc0Nzg1Njk0NzY4MzQ2MzYxNjc5MjEwMTgwNjQ0NTA3MDY0ODAwMDI3NzUwMjY4NDkxNjc0NjU1MDU4Njg1NjkzNTY3MzQyMDY3MDU4MTEzNjQyOTIyNDU1NDQwNTc1ODkyNTcyNDIwODI0MTMxNDY5NTY4OTAxNjc1ODk0MDI1Njc3NjMxMTM1NjkxOTI5MjAzMzM3NjU4NzE0MTY2MDIzMDEwNTcwMzA4OTYzNDU3MjA3NTQ0MDM3MDg0NzQ2OTk0MDE2ODI2OTI4MjgwODQ4MTE4NDI4OTMxNDg0ODUyNDk0ODY0NDg3MTkyNzgwOTY3NjI3MTI3NTc3NTM5NzAyNzY2ODYwNTk1MjQ5NjcxNjY3NDE4MzQ4NTcwNDQyMjUwNzE5Nzk2NTAwNDcxNDk1MTA1MDQ5MjIxNDc3NjU2NzYzNjkzODY2Mjk3Njk3OTUyMjExMDcxODI2NDU0OTczNDc3MjY2MjQyNTcwOTQyOTMyMjU4Mjc5ODUwMjU4NTUwOTc4NTI2NTM4MzIwNzYwNjcyNjMxNzE2NDMwOTUwNTk5NTA4NzgwNzUyMzcxMDMzMzEwMTE5Nzg1NzU0NzMzMTU0MTQyMTgwODQyNzU0Mzg2MzU5MTc3ODExNzA1NDMwOTgyNzQ4MjM4NTA0NTY0ODAxOTA5NTYxMDI5OTI5MTgyNDMxODIzNzUyNTM1NzcwOTc1MDUzOTU2NTE4NzY5NzUxMDM3NDk3MDg4ODY5MjE4MDIwNTE4OTMzOTUwNzIzODUzOTIwNTE0NDYzNDE5NzI2NTI4NzI4Njk2NTExMDg2MjU3MTQ5MjE5ODg0OTk3ODc0ODg3Mzc3MTM0NTY4NjIwOTE2NzA1OFwiLFFyPVwiMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MDI4ODQxOTcxNjkzOTkzNzUxMDU4MjA5NzQ5NDQ1OTIzMDc4MTY0MDYyODYyMDg5OTg2MjgwMzQ4MjUzNDIxMTcwNjc5ODIxNDgwODY1MTMyODIzMDY2NDcwOTM4NDQ2MDk1NTA1ODIyMzE3MjUzNTk0MDgxMjg0ODExMTc0NTAyODQxMDI3MDE5Mzg1MjExMDU1NTk2NDQ2MjI5NDg5NTQ5MzAzODE5NjQ0Mjg4MTA5NzU2NjU5MzM0NDYxMjg0NzU2NDgyMzM3ODY3ODMxNjUyNzEyMDE5MDkxNDU2NDg1NjY5MjM0NjAzNDg2MTA0NTQzMjY2NDgyMTMzOTM2MDcyNjAyNDkxNDEyNzM3MjQ1ODcwMDY2MDYzMTU1ODgxNzQ4ODE1MjA5MjA5NjI4MjkyNTQwOTE3MTUzNjQzNjc4OTI1OTAzNjAwMTEzMzA1MzA1NDg4MjA0NjY1MjEzODQxNDY5NTE5NDE1MTE2MDk0MzMwNTcyNzAzNjU3NTk1OTE5NTMwOTIxODYxMTczODE5MzI2MTE3OTMxMDUxMTg1NDgwNzQ0NjIzNzk5NjI3NDk1NjczNTE4ODU3NTI3MjQ4OTEyMjc5MzgxODMwMTE5NDkxMjk4MzM2NzMzNjI0NDA2NTY2NDMwODYwMjEzOTQ5NDYzOTUyMjQ3MzcxOTA3MDIxNzk4NjA5NDM3MDI3NzA1MzkyMTcxNzYyOTMxNzY3NTIzODQ2NzQ4MTg0Njc2Njk0MDUxMzIwMDA1NjgxMjcxNDUyNjM1NjA4Mjc3ODU3NzEzNDI3NTc3ODk2MDkxNzM2MzcxNzg3MjE0Njg0NDA5MDEyMjQ5NTM0MzAxNDY1NDk1ODUzNzEwNTA3OTIyNzk2ODkyNTg5MjM1NDIwMTk5NTYxMTIxMjkwMjE5NjA4NjQwMzQ0MTgxNTk4MTM2Mjk3NzQ3NzEzMDk5NjA1MTg3MDcyMTEzNDk5OTk5OTgzNzI5NzgwNDk5NTEwNTk3MzE3MzI4MTYwOTYzMTg1OTUwMjQ0NTk0NTUzNDY5MDgzMDI2NDI1MjIzMDgyNTMzNDQ2ODUwMzUyNjE5MzExODgxNzEwMTAwMDMxMzc4Mzg3NTI4ODY1ODc1MzMyMDgzODE0MjA2MTcxNzc2NjkxNDczMDM1OTgyNTM0OTA0Mjg3NTU0Njg3MzExNTk1NjI4NjM4ODIzNTM3ODc1OTM3NTE5NTc3ODE4NTc3ODA1MzIxNzEyMjY4MDY2MTMwMDE5Mjc4NzY2MTExOTU5MDkyMTY0MjAxOTg5MzgwOTUyNTcyMDEwNjU0ODU4NjMyNzg5XCIseGk9e3ByZWNpc2lvbjoyMCxyb3VuZGluZzo0LG1vZHVsbzoxLHRvRXhwTmVnOi03LHRvRXhwUG9zOjIxLG1pbkU6LWd0LG1heEU6Z3QsY3J5cHRvOiExfSx2cyxSZSx3PSEwLEpyPVwiW0RlY2ltYWxFcnJvcl0gXCIsTGU9SnIrXCJJbnZhbGlkIGFyZ3VtZW50OiBcIixUcz1KcitcIlByZWNpc2lvbiBsaW1pdCBleGNlZWRlZFwiLENzPUpyK1wiY3J5cHRvIHVuYXZhaWxhYmxlXCIsQXM9XCJbb2JqZWN0IERlY2ltYWxdXCIsZWU9TWF0aC5mbG9vcixqPU1hdGgucG93LGNjPS9eMGIoWzAxXSsoXFwuWzAxXSopP3xcXC5bMDFdKykocFsrLV0/XFxkKyk/JC9pLHBjPS9eMHgoWzAtOWEtZl0rKFxcLlswLTlhLWZdKik/fFxcLlswLTlhLWZdKykocFsrLV0/XFxkKyk/JC9pLGRjPS9eMG8oWzAtN10rKFxcLlswLTddKik/fFxcLlswLTddKykocFsrLV0/XFxkKyk/JC9pLE1zPS9eKFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPyQvaSxnZT0xZTcsYj03LG1jPTkwMDcxOTkyNTQ3NDA5OTEsZmM9S3IubGVuZ3RoLTEsYmk9UXIubGVuZ3RoLTEsbT17dG9TdHJpbmdUYWc6QXN9O20uYWJzb2x1dGVWYWx1ZT1tLmFicz1mdW5jdGlvbigpe3ZhciBlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO3JldHVybiBlLnM8MCYmKGUucz0xKSxoKGUpfTttLmNlaWw9ZnVuY3Rpb24oKXtyZXR1cm4gaChuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSx0aGlzLmUrMSwyKX07bS5jbGFtcGVkVG89bS5jbGFtcD1mdW5jdGlvbihlLHQpe3ZhciByLG49dGhpcyxpPW4uY29uc3RydWN0b3I7aWYoZT1uZXcgaShlKSx0PW5ldyBpKHQpLCFlLnN8fCF0LnMpcmV0dXJuIG5ldyBpKE5hTik7aWYoZS5ndCh0KSl0aHJvdyBFcnJvcihMZSt0KTtyZXR1cm4gcj1uLmNtcChlKSxyPDA/ZTpuLmNtcCh0KT4wP3Q6bmV3IGkobil9O20uY29tcGFyZWRUbz1tLmNtcD1mdW5jdGlvbihlKXt2YXIgdCxyLG4saSxvPXRoaXMscz1vLmQsYT0oZT1uZXcgby5jb25zdHJ1Y3RvcihlKSkuZCxsPW8ucyx1PWUucztpZighc3x8IWEpcmV0dXJuIWx8fCF1P05hTjpsIT09dT9sOnM9PT1hPzA6IXNebDwwPzE6LTE7aWYoIXNbMF18fCFhWzBdKXJldHVybiBzWzBdP2w6YVswXT8tdTowO2lmKGwhPT11KXJldHVybiBsO2lmKG8uZSE9PWUuZSlyZXR1cm4gby5lPmUuZV5sPDA/MTotMTtmb3Iobj1zLmxlbmd0aCxpPWEubGVuZ3RoLHQ9MCxyPW48aT9uOmk7dDxyOysrdClpZihzW3RdIT09YVt0XSlyZXR1cm4gc1t0XT5hW3RdXmw8MD8xOi0xO3JldHVybiBuPT09aT8wOm4+aV5sPDA/MTotMX07bS5jb3NpbmU9bS5jb3M9ZnVuY3Rpb24oKXt2YXIgZSx0LHI9dGhpcyxuPXIuY29uc3RydWN0b3I7cmV0dXJuIHIuZD9yLmRbMF0/KGU9bi5wcmVjaXNpb24sdD1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrTWF0aC5tYXgoci5lLHIuc2QoKSkrYixuLnJvdW5kaW5nPTEscj1nYyhuLEZzKG4scikpLG4ucHJlY2lzaW9uPWUsbi5yb3VuZGluZz10LGgoUmU9PTJ8fFJlPT0zP3IubmVnKCk6cixlLHQsITApKTpuZXcgbigxKTpuZXcgbihOYU4pfTttLmN1YmVSb290PW0uY2JydD1mdW5jdGlvbigpe3ZhciBlLHQscixuLGksbyxzLGEsbCx1LGM9dGhpcyxwPWMuY29uc3RydWN0b3I7aWYoIWMuaXNGaW5pdGUoKXx8Yy5pc1plcm8oKSlyZXR1cm4gbmV3IHAoYyk7Zm9yKHc9ITEsbz1jLnMqaihjLnMqYywxLzMpLCFvfHxNYXRoLmFicyhvKT09MS8wPyhyPVcoYy5kKSxlPWMuZSwobz0oZS1yLmxlbmd0aCsxKSUzKSYmKHIrPW89PTF8fG89PS0yP1wiMFwiOlwiMDBcIiksbz1qKHIsMS8zKSxlPWVlKChlKzEpLzMpLShlJTM9PShlPDA/LTE6MikpLG89PTEvMD9yPVwiNWVcIitlOihyPW8udG9FeHBvbmVudGlhbCgpLHI9ci5zbGljZSgwLHIuaW5kZXhPZihcImVcIikrMSkrZSksbj1uZXcgcChyKSxuLnM9Yy5zKTpuPW5ldyBwKG8udG9TdHJpbmcoKSkscz0oZT1wLnByZWNpc2lvbikrMzs7KWlmKGE9bixsPWEudGltZXMoYSkudGltZXMoYSksdT1sLnBsdXMoYyksbj1EKHUucGx1cyhjKS50aW1lcyhhKSx1LnBsdXMobCkscysyLDEpLFcoYS5kKS5zbGljZSgwLHMpPT09KHI9VyhuLmQpKS5zbGljZSgwLHMpKWlmKHI9ci5zbGljZShzLTMscysxKSxyPT1cIjk5OTlcInx8IWkmJnI9PVwiNDk5OVwiKXtpZighaSYmKGgoYSxlKzEsMCksYS50aW1lcyhhKS50aW1lcyhhKS5lcShjKSkpe249YTticmVha31zKz00LGk9MX1lbHNleyghK3J8fCErci5zbGljZSgxKSYmci5jaGFyQXQoMCk9PVwiNVwiKSYmKGgobixlKzEsMSksdD0hbi50aW1lcyhuKS50aW1lcyhuKS5lcShjKSk7YnJlYWt9cmV0dXJuIHc9ITAsaChuLGUscC5yb3VuZGluZyx0KX07bS5kZWNpbWFsUGxhY2VzPW0uZHA9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuZCxyPU5hTjtpZih0KXtpZihlPXQubGVuZ3RoLTEscj0oZS1lZSh0aGlzLmUvYikpKmIsZT10W2VdLGUpZm9yKDtlJTEwPT0wO2UvPTEwKXItLTtyPDAmJihyPTApfXJldHVybiByfTttLmRpdmlkZWRCeT1tLmRpdj1mdW5jdGlvbihlKXtyZXR1cm4gRCh0aGlzLG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUpKX07bS5kaXZpZGVkVG9JbnRlZ2VyQnk9bS5kaXZUb0ludD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dC5jb25zdHJ1Y3RvcjtyZXR1cm4gaChEKHQsbmV3IHIoZSksMCwxLDEpLHIucHJlY2lzaW9uLHIucm91bmRpbmcpfTttLmVxdWFscz1tLmVxPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT09PTB9O20uZmxvb3I9ZnVuY3Rpb24oKXtyZXR1cm4gaChuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSx0aGlzLmUrMSwzKX07bS5ncmVhdGVyVGhhbj1tLmd0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT4wfTttLmdyZWF0ZXJUaGFuT3JFcXVhbFRvPW0uZ3RlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY21wKGUpO3JldHVybiB0PT0xfHx0PT09MH07bS5oeXBlcmJvbGljQ29zaW5lPW0uY29zaD1mdW5jdGlvbigpe3ZhciBlLHQscixuLGksbz10aGlzLHM9by5jb25zdHJ1Y3RvcixhPW5ldyBzKDEpO2lmKCFvLmlzRmluaXRlKCkpcmV0dXJuIG5ldyBzKG8ucz8xLzA6TmFOKTtpZihvLmlzWmVybygpKXJldHVybiBhO3I9cy5wcmVjaXNpb24sbj1zLnJvdW5kaW5nLHMucHJlY2lzaW9uPXIrTWF0aC5tYXgoby5lLG8uc2QoKSkrNCxzLnJvdW5kaW5nPTEsaT1vLmQubGVuZ3RoLGk8MzI/KGU9TWF0aC5jZWlsKGkvMyksdD0oMS9Xcig0LGUpKS50b1N0cmluZygpKTooZT0xNix0PVwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiKSxvPXl0KHMsMSxvLnRpbWVzKHQpLG5ldyBzKDEpLCEwKTtmb3IodmFyIGwsdT1lLGM9bmV3IHMoOCk7dS0tOylsPW8udGltZXMobyksbz1hLm1pbnVzKGwudGltZXMoYy5taW51cyhsLnRpbWVzKGMpKSkpO3JldHVybiBoKG8scy5wcmVjaXNpb249cixzLnJvdW5kaW5nPW4sITApfTttLmh5cGVyYm9saWNTaW5lPW0uc2luaD1mdW5jdGlvbigpe3ZhciBlLHQscixuLGk9dGhpcyxvPWkuY29uc3RydWN0b3I7aWYoIWkuaXNGaW5pdGUoKXx8aS5pc1plcm8oKSlyZXR1cm4gbmV3IG8oaSk7aWYodD1vLnByZWNpc2lvbixyPW8ucm91bmRpbmcsby5wcmVjaXNpb249dCtNYXRoLm1heChpLmUsaS5zZCgpKSs0LG8ucm91bmRpbmc9MSxuPWkuZC5sZW5ndGgsbjwzKWk9eXQobywyLGksaSwhMCk7ZWxzZXtlPTEuNCpNYXRoLnNxcnQobiksZT1lPjE2PzE2OmV8MCxpPWkudGltZXMoMS9Xcig1LGUpKSxpPXl0KG8sMixpLGksITApO2Zvcih2YXIgcyxhPW5ldyBvKDUpLGw9bmV3IG8oMTYpLHU9bmV3IG8oMjApO2UtLTspcz1pLnRpbWVzKGkpLGk9aS50aW1lcyhhLnBsdXMocy50aW1lcyhsLnRpbWVzKHMpLnBsdXModSkpKSl9cmV0dXJuIG8ucHJlY2lzaW9uPXQsby5yb3VuZGluZz1yLGgoaSx0LHIsITApfTttLmh5cGVyYm9saWNUYW5nZW50PW0udGFuaD1mdW5jdGlvbigpe3ZhciBlLHQscj10aGlzLG49ci5jb25zdHJ1Y3RvcjtyZXR1cm4gci5pc0Zpbml0ZSgpP3IuaXNaZXJvKCk/bmV3IG4ocik6KGU9bi5wcmVjaXNpb24sdD1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrNyxuLnJvdW5kaW5nPTEsRChyLnNpbmgoKSxyLmNvc2goKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9dCkpOm5ldyBuKHIucyl9O20uaW52ZXJzZUNvc2luZT1tLmFjb3M9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMscj10LmNvbnN0cnVjdG9yLG49dC5hYnMoKS5jbXAoMSksaT1yLnByZWNpc2lvbixvPXIucm91bmRpbmc7cmV0dXJuIG4hPT0tMT9uPT09MD90LmlzTmVnKCk/ZmUocixpLG8pOm5ldyByKDApOm5ldyByKE5hTik6dC5pc1plcm8oKT9mZShyLGkrNCxvKS50aW1lcyguNSk6KHIucHJlY2lzaW9uPWkrNixyLnJvdW5kaW5nPTEsdD10LmFzaW4oKSxlPWZlKHIsaSs0LG8pLnRpbWVzKC41KSxyLnByZWNpc2lvbj1pLHIucm91bmRpbmc9byxlLm1pbnVzKHQpKX07bS5pbnZlcnNlSHlwZXJib2xpY0Nvc2luZT1tLmFjb3NoPWZ1bmN0aW9uKCl7dmFyIGUsdCxyPXRoaXMsbj1yLmNvbnN0cnVjdG9yO3JldHVybiByLmx0ZSgxKT9uZXcgbihyLmVxKDEpPzA6TmFOKTpyLmlzRmluaXRlKCk/KGU9bi5wcmVjaXNpb24sdD1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrTWF0aC5tYXgoTWF0aC5hYnMoci5lKSxyLnNkKCkpKzQsbi5yb3VuZGluZz0xLHc9ITEscj1yLnRpbWVzKHIpLm1pbnVzKDEpLnNxcnQoKS5wbHVzKHIpLHc9ITAsbi5wcmVjaXNpb249ZSxuLnJvdW5kaW5nPXQsci5sbigpKTpuZXcgbihyKX07bS5pbnZlcnNlSHlwZXJib2xpY1NpbmU9bS5hc2luaD1mdW5jdGlvbigpe3ZhciBlLHQscj10aGlzLG49ci5jb25zdHJ1Y3RvcjtyZXR1cm4hci5pc0Zpbml0ZSgpfHxyLmlzWmVybygpP25ldyBuKHIpOihlPW4ucHJlY2lzaW9uLHQ9bi5yb3VuZGluZyxuLnByZWNpc2lvbj1lKzIqTWF0aC5tYXgoTWF0aC5hYnMoci5lKSxyLnNkKCkpKzYsbi5yb3VuZGluZz0xLHc9ITEscj1yLnRpbWVzKHIpLnBsdXMoMSkuc3FydCgpLnBsdXMociksdz0hMCxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9dCxyLmxuKCkpfTttLmludmVyc2VIeXBlcmJvbGljVGFuZ2VudD1tLmF0YW5oPWZ1bmN0aW9uKCl7dmFyIGUsdCxyLG4saT10aGlzLG89aS5jb25zdHJ1Y3RvcjtyZXR1cm4gaS5pc0Zpbml0ZSgpP2kuZT49MD9uZXcgbyhpLmFicygpLmVxKDEpP2kucy8wOmkuaXNaZXJvKCk/aTpOYU4pOihlPW8ucHJlY2lzaW9uLHQ9by5yb3VuZGluZyxuPWkuc2QoKSxNYXRoLm1heChuLGUpPDIqLWkuZS0xP2gobmV3IG8oaSksZSx0LCEwKTooby5wcmVjaXNpb249cj1uLWkuZSxpPUQoaS5wbHVzKDEpLG5ldyBvKDEpLm1pbnVzKGkpLHIrZSwxKSxvLnByZWNpc2lvbj1lKzQsby5yb3VuZGluZz0xLGk9aS5sbigpLG8ucHJlY2lzaW9uPWUsby5yb3VuZGluZz10LGkudGltZXMoLjUpKSk6bmV3IG8oTmFOKX07bS5pbnZlcnNlU2luZT1tLmFzaW49ZnVuY3Rpb24oKXt2YXIgZSx0LHIsbixpPXRoaXMsbz1pLmNvbnN0cnVjdG9yO3JldHVybiBpLmlzWmVybygpP25ldyBvKGkpOih0PWkuYWJzKCkuY21wKDEpLHI9by5wcmVjaXNpb24sbj1vLnJvdW5kaW5nLHQhPT0tMT90PT09MD8oZT1mZShvLHIrNCxuKS50aW1lcyguNSksZS5zPWkucyxlKTpuZXcgbyhOYU4pOihvLnByZWNpc2lvbj1yKzYsby5yb3VuZGluZz0xLGk9aS5kaXYobmV3IG8oMSkubWludXMoaS50aW1lcyhpKSkuc3FydCgpLnBsdXMoMSkpLmF0YW4oKSxvLnByZWNpc2lvbj1yLG8ucm91bmRpbmc9bixpLnRpbWVzKDIpKSl9O20uaW52ZXJzZVRhbmdlbnQ9bS5hdGFuPWZ1bmN0aW9uKCl7dmFyIGUsdCxyLG4saSxvLHMsYSxsLHU9dGhpcyxjPXUuY29uc3RydWN0b3IscD1jLnByZWNpc2lvbixkPWMucm91bmRpbmc7aWYodS5pc0Zpbml0ZSgpKXtpZih1LmlzWmVybygpKXJldHVybiBuZXcgYyh1KTtpZih1LmFicygpLmVxKDEpJiZwKzQ8PWJpKXJldHVybiBzPWZlKGMscCs0LGQpLnRpbWVzKC4yNSkscy5zPXUucyxzfWVsc2V7aWYoIXUucylyZXR1cm4gbmV3IGMoTmFOKTtpZihwKzQ8PWJpKXJldHVybiBzPWZlKGMscCs0LGQpLnRpbWVzKC41KSxzLnM9dS5zLHN9Zm9yKGMucHJlY2lzaW9uPWE9cCsxMCxjLnJvdW5kaW5nPTEscj1NYXRoLm1pbigyOCxhL2IrMnwwKSxlPXI7ZTstLWUpdT11LmRpdih1LnRpbWVzKHUpLnBsdXMoMSkuc3FydCgpLnBsdXMoMSkpO2Zvcih3PSExLHQ9TWF0aC5jZWlsKGEvYiksbj0xLGw9dS50aW1lcyh1KSxzPW5ldyBjKHUpLGk9dTtlIT09LTE7KWlmKGk9aS50aW1lcyhsKSxvPXMubWludXMoaS5kaXYobis9MikpLGk9aS50aW1lcyhsKSxzPW8ucGx1cyhpLmRpdihuKz0yKSkscy5kW3RdIT09dm9pZCAwKWZvcihlPXQ7cy5kW2VdPT09by5kW2VdJiZlLS07KTtyZXR1cm4gciYmKHM9cy50aW1lcygyPDxyLTEpKSx3PSEwLGgocyxjLnByZWNpc2lvbj1wLGMucm91bmRpbmc9ZCwhMCl9O20uaXNGaW5pdGU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZH07bS5pc0ludGVnZXI9bS5pc0ludD1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5kJiZlZSh0aGlzLmUvYik+dGhpcy5kLmxlbmd0aC0yfTttLmlzTmFOPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuc307bS5pc05lZ2F0aXZlPW0uaXNOZWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zPDB9O20uaXNQb3NpdGl2ZT1tLmlzUG9zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucz4wfTttLmlzWmVybz1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5kJiZ0aGlzLmRbMF09PT0wfTttLmxlc3NUaGFuPW0ubHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY21wKGUpPDB9O20ubGVzc1RoYW5PckVxdWFsVG89bS5sdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY21wKGUpPDF9O20ubG9nYXJpdGhtPW0ubG9nPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLG8scyxhLGwsdT10aGlzLGM9dS5jb25zdHJ1Y3RvcixwPWMucHJlY2lzaW9uLGQ9Yy5yb3VuZGluZyxmPTU7aWYoZT09bnVsbCllPW5ldyBjKDEwKSx0PSEwO2Vsc2V7aWYoZT1uZXcgYyhlKSxyPWUuZCxlLnM8MHx8IXJ8fCFyWzBdfHxlLmVxKDEpKXJldHVybiBuZXcgYyhOYU4pO3Q9ZS5lcSgxMCl9aWYocj11LmQsdS5zPDB8fCFyfHwhclswXXx8dS5lcSgxKSlyZXR1cm4gbmV3IGMociYmIXJbMF0/LTEvMDp1LnMhPTE/TmFOOnI/MDoxLzApO2lmKHQpaWYoci5sZW5ndGg+MSlvPSEwO2Vsc2V7Zm9yKGk9clswXTtpJTEwPT09MDspaS89MTA7bz1pIT09MX1pZih3PSExLGE9cCtmLHM9TmUodSxhKSxuPXQ/R3IoYyxhKzEwKTpOZShlLGEpLGw9RChzLG4sYSwxKSxKdChsLmQsaT1wLGQpKWRvIGlmKGErPTEwLHM9TmUodSxhKSxuPXQ/R3IoYyxhKzEwKTpOZShlLGEpLGw9RChzLG4sYSwxKSwhbyl7K1cobC5kKS5zbGljZShpKzEsaSsxNSkrMT09MWUxNCYmKGw9aChsLHArMSwwKSk7YnJlYWt9d2hpbGUoSnQobC5kLGkrPTEwLGQpKTtyZXR1cm4gdz0hMCxoKGwscCxkKX07bS5taW51cz1tLnN1Yj1mdW5jdGlvbihlKXt2YXIgdCxyLG4saSxvLHMsYSxsLHUsYyxwLGQsZj10aGlzLHk9Zi5jb25zdHJ1Y3RvcjtpZihlPW5ldyB5KGUpLCFmLmR8fCFlLmQpcmV0dXJuIWYuc3x8IWUucz9lPW5ldyB5KE5hTik6Zi5kP2Uucz0tZS5zOmU9bmV3IHkoZS5kfHxmLnMhPT1lLnM/ZjpOYU4pLGU7aWYoZi5zIT1lLnMpcmV0dXJuIGUucz0tZS5zLGYucGx1cyhlKTtpZih1PWYuZCxkPWUuZCxhPXkucHJlY2lzaW9uLGw9eS5yb3VuZGluZywhdVswXXx8IWRbMF0pe2lmKGRbMF0pZS5zPS1lLnM7ZWxzZSBpZih1WzBdKWU9bmV3IHkoZik7ZWxzZSByZXR1cm4gbmV3IHkobD09PTM/LTA6MCk7cmV0dXJuIHc/aChlLGEsbCk6ZX1pZihyPWVlKGUuZS9iKSxjPWVlKGYuZS9iKSx1PXUuc2xpY2UoKSxvPWMtcixvKXtmb3IocD1vPDAscD8odD11LG89LW8scz1kLmxlbmd0aCk6KHQ9ZCxyPWMscz11Lmxlbmd0aCksbj1NYXRoLm1heChNYXRoLmNlaWwoYS9iKSxzKSsyLG8+biYmKG89bix0Lmxlbmd0aD0xKSx0LnJldmVyc2UoKSxuPW87bi0tOyl0LnB1c2goMCk7dC5yZXZlcnNlKCl9ZWxzZXtmb3Iobj11Lmxlbmd0aCxzPWQubGVuZ3RoLHA9bjxzLHAmJihzPW4pLG49MDtuPHM7bisrKWlmKHVbbl0hPWRbbl0pe3A9dVtuXTxkW25dO2JyZWFrfW89MH1mb3IocCYmKHQ9dSx1PWQsZD10LGUucz0tZS5zKSxzPXUubGVuZ3RoLG49ZC5sZW5ndGgtcztuPjA7LS1uKXVbcysrXT0wO2ZvcihuPWQubGVuZ3RoO24+bzspe2lmKHVbLS1uXTxkW25dKXtmb3IoaT1uO2kmJnVbLS1pXT09PTA7KXVbaV09Z2UtMTstLXVbaV0sdVtuXSs9Z2V9dVtuXS09ZFtuXX1mb3IoO3VbLS1zXT09PTA7KXUucG9wKCk7Zm9yKDt1WzBdPT09MDt1LnNoaWZ0KCkpLS1yO3JldHVybiB1WzBdPyhlLmQ9dSxlLmU9SHIodSxyKSx3P2goZSxhLGwpOmUpOm5ldyB5KGw9PT0zPy0wOjApfTttLm1vZHVsbz1tLm1vZD1mdW5jdGlvbihlKXt2YXIgdCxyPXRoaXMsbj1yLmNvbnN0cnVjdG9yO3JldHVybiBlPW5ldyBuKGUpLCFyLmR8fCFlLnN8fGUuZCYmIWUuZFswXT9uZXcgbihOYU4pOiFlLmR8fHIuZCYmIXIuZFswXT9oKG5ldyBuKHIpLG4ucHJlY2lzaW9uLG4ucm91bmRpbmcpOih3PSExLG4ubW9kdWxvPT05Pyh0PUQocixlLmFicygpLDAsMywxKSx0LnMqPWUucyk6dD1EKHIsZSwwLG4ubW9kdWxvLDEpLHQ9dC50aW1lcyhlKSx3PSEwLHIubWludXModCkpfTttLm5hdHVyYWxFeHBvbmVudGlhbD1tLmV4cD1mdW5jdGlvbigpe3JldHVybiBFaSh0aGlzKX07bS5uYXR1cmFsTG9nYXJpdGhtPW0ubG49ZnVuY3Rpb24oKXtyZXR1cm4gTmUodGhpcyl9O20ubmVnYXRlZD1tLm5lZz1mdW5jdGlvbigpe3ZhciBlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO3JldHVybiBlLnM9LWUucyxoKGUpfTttLnBsdXM9bS5hZGQ9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGksbyxzLGEsbCx1LGMscD10aGlzLGQ9cC5jb25zdHJ1Y3RvcjtpZihlPW5ldyBkKGUpLCFwLmR8fCFlLmQpcmV0dXJuIXAuc3x8IWUucz9lPW5ldyBkKE5hTik6cC5kfHwoZT1uZXcgZChlLmR8fHAucz09PWUucz9wOk5hTikpLGU7aWYocC5zIT1lLnMpcmV0dXJuIGUucz0tZS5zLHAubWludXMoZSk7aWYodT1wLmQsYz1lLmQsYT1kLnByZWNpc2lvbixsPWQucm91bmRpbmcsIXVbMF18fCFjWzBdKXJldHVybiBjWzBdfHwoZT1uZXcgZChwKSksdz9oKGUsYSxsKTplO2lmKG89ZWUocC5lL2IpLG49ZWUoZS5lL2IpLHU9dS5zbGljZSgpLGk9by1uLGkpe2ZvcihpPDA/KHI9dSxpPS1pLHM9Yy5sZW5ndGgpOihyPWMsbj1vLHM9dS5sZW5ndGgpLG89TWF0aC5jZWlsKGEvYikscz1vPnM/bysxOnMrMSxpPnMmJihpPXMsci5sZW5ndGg9MSksci5yZXZlcnNlKCk7aS0tOylyLnB1c2goMCk7ci5yZXZlcnNlKCl9Zm9yKHM9dS5sZW5ndGgsaT1jLmxlbmd0aCxzLWk8MCYmKGk9cyxyPWMsYz11LHU9ciksdD0wO2k7KXQ9KHVbLS1pXT11W2ldK2NbaV0rdCkvZ2V8MCx1W2ldJT1nZTtmb3IodCYmKHUudW5zaGlmdCh0KSwrK24pLHM9dS5sZW5ndGg7dVstLXNdPT0wOyl1LnBvcCgpO3JldHVybiBlLmQ9dSxlLmU9SHIodSxuKSx3P2goZSxhLGwpOmV9O20ucHJlY2lzaW9uPW0uc2Q9ZnVuY3Rpb24oZSl7dmFyIHQscj10aGlzO2lmKGUhPT12b2lkIDAmJmUhPT0hIWUmJmUhPT0xJiZlIT09MCl0aHJvdyBFcnJvcihMZStlKTtyZXR1cm4gci5kPyh0PVJzKHIuZCksZSYmci5lKzE+dCYmKHQ9ci5lKzEpKTp0PU5hTix0fTttLnJvdW5kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuY29uc3RydWN0b3I7cmV0dXJuIGgobmV3IHQoZSksZS5lKzEsdC5yb3VuZGluZyl9O20uc2luZT1tLnNpbj1mdW5jdGlvbigpe3ZhciBlLHQscj10aGlzLG49ci5jb25zdHJ1Y3RvcjtyZXR1cm4gci5pc0Zpbml0ZSgpP3IuaXNaZXJvKCk/bmV3IG4ocik6KGU9bi5wcmVjaXNpb24sdD1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrTWF0aC5tYXgoci5lLHIuc2QoKSkrYixuLnJvdW5kaW5nPTEscj1oYyhuLEZzKG4scikpLG4ucHJlY2lzaW9uPWUsbi5yb3VuZGluZz10LGgoUmU+Mj9yLm5lZygpOnIsZSx0LCEwKSk6bmV3IG4oTmFOKX07bS5zcXVhcmVSb290PW0uc3FydD1mdW5jdGlvbigpe3ZhciBlLHQscixuLGksbyxzPXRoaXMsYT1zLmQsbD1zLmUsdT1zLnMsYz1zLmNvbnN0cnVjdG9yO2lmKHUhPT0xfHwhYXx8IWFbMF0pcmV0dXJuIG5ldyBjKCF1fHx1PDAmJighYXx8YVswXSk/TmFOOmE/czoxLzApO2Zvcih3PSExLHU9TWF0aC5zcXJ0KCtzKSx1PT0wfHx1PT0xLzA/KHQ9VyhhKSwodC5sZW5ndGgrbCklMj09MCYmKHQrPVwiMFwiKSx1PU1hdGguc3FydCh0KSxsPWVlKChsKzEpLzIpLShsPDB8fGwlMiksdT09MS8wP3Q9XCI1ZVwiK2w6KHQ9dS50b0V4cG9uZW50aWFsKCksdD10LnNsaWNlKDAsdC5pbmRleE9mKFwiZVwiKSsxKStsKSxuPW5ldyBjKHQpKTpuPW5ldyBjKHUudG9TdHJpbmcoKSkscj0obD1jLnByZWNpc2lvbikrMzs7KWlmKG89bixuPW8ucGx1cyhEKHMsbyxyKzIsMSkpLnRpbWVzKC41KSxXKG8uZCkuc2xpY2UoMCxyKT09PSh0PVcobi5kKSkuc2xpY2UoMCxyKSlpZih0PXQuc2xpY2Uoci0zLHIrMSksdD09XCI5OTk5XCJ8fCFpJiZ0PT1cIjQ5OTlcIil7aWYoIWkmJihoKG8sbCsxLDApLG8udGltZXMobykuZXEocykpKXtuPW87YnJlYWt9cis9NCxpPTF9ZWxzZXsoISt0fHwhK3Quc2xpY2UoMSkmJnQuY2hhckF0KDApPT1cIjVcIikmJihoKG4sbCsxLDEpLGU9IW4udGltZXMobikuZXEocykpO2JyZWFrfXJldHVybiB3PSEwLGgobixsLGMucm91bmRpbmcsZSl9O20udGFuZ2VudD1tLnRhbj1mdW5jdGlvbigpe3ZhciBlLHQscj10aGlzLG49ci5jb25zdHJ1Y3RvcjtyZXR1cm4gci5pc0Zpbml0ZSgpP3IuaXNaZXJvKCk/bmV3IG4ocik6KGU9bi5wcmVjaXNpb24sdD1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrMTAsbi5yb3VuZGluZz0xLHI9ci5zaW4oKSxyLnM9MSxyPUQocixuZXcgbigxKS5taW51cyhyLnRpbWVzKHIpKS5zcXJ0KCksZSsxMCwwKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9dCxoKFJlPT0yfHxSZT09ND9yLm5lZygpOnIsZSx0LCEwKSk6bmV3IG4oTmFOKX07bS50aW1lcz1tLm11bD1mdW5jdGlvbihlKXt2YXIgdCxyLG4saSxvLHMsYSxsLHUsYz10aGlzLHA9Yy5jb25zdHJ1Y3RvcixkPWMuZCxmPShlPW5ldyBwKGUpKS5kO2lmKGUucyo9Yy5zLCFkfHwhZFswXXx8IWZ8fCFmWzBdKXJldHVybiBuZXcgcCghZS5zfHxkJiYhZFswXSYmIWZ8fGYmJiFmWzBdJiYhZD9OYU46IWR8fCFmP2Uucy8wOmUucyowKTtmb3Iocj1lZShjLmUvYikrZWUoZS5lL2IpLGw9ZC5sZW5ndGgsdT1mLmxlbmd0aCxsPHUmJihvPWQsZD1mLGY9byxzPWwsbD11LHU9cyksbz1bXSxzPWwrdSxuPXM7bi0tOylvLnB1c2goMCk7Zm9yKG49dTstLW4+PTA7KXtmb3IodD0wLGk9bCtuO2k+bjspYT1vW2ldK2Zbbl0qZFtpLW4tMV0rdCxvW2ktLV09YSVnZXwwLHQ9YS9nZXwwO29baV09KG9baV0rdCklZ2V8MH1mb3IoOyFvWy0tc107KW8ucG9wKCk7cmV0dXJuIHQ/KytyOm8uc2hpZnQoKSxlLmQ9byxlLmU9SHIobyxyKSx3P2goZSxwLnByZWNpc2lvbixwLnJvdW5kaW5nKTplfTttLnRvQmluYXJ5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIFBpKHRoaXMsMixlLHQpfTttLnRvRGVjaW1hbFBsYWNlcz1tLnRvRFA9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49ci5jb25zdHJ1Y3RvcjtyZXR1cm4gcj1uZXcgbihyKSxlPT09dm9pZCAwP3I6KHNlKGUsMCwkZSksdD09PXZvaWQgMD90PW4ucm91bmRpbmc6c2UodCwwLDgpLGgocixlK3IuZSsxLHQpKX07bS50b0V4cG9uZW50aWFsPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj10aGlzLGk9bi5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD9yPXdlKG4sITApOihzZShlLDAsJGUpLHQ9PT12b2lkIDA/dD1pLnJvdW5kaW5nOnNlKHQsMCw4KSxuPWgobmV3IGkobiksZSsxLHQpLHI9d2UobiwhMCxlKzEpKSxuLmlzTmVnKCkmJiFuLmlzWmVybygpP1wiLVwiK3I6cn07bS50b0ZpeGVkPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpPXRoaXMsbz1pLmNvbnN0cnVjdG9yO3JldHVybiBlPT09dm9pZCAwP3I9d2UoaSk6KHNlKGUsMCwkZSksdD09PXZvaWQgMD90PW8ucm91bmRpbmc6c2UodCwwLDgpLG49aChuZXcgbyhpKSxlK2kuZSsxLHQpLHI9d2UobiwhMSxlK24uZSsxKSksaS5pc05lZygpJiYhaS5pc1plcm8oKT9cIi1cIityOnJ9O20udG9GcmFjdGlvbj1mdW5jdGlvbihlKXt2YXIgdCxyLG4saSxvLHMsYSxsLHUsYyxwLGQsZj10aGlzLHk9Zi5kLGc9Zi5jb25zdHJ1Y3RvcjtpZigheSlyZXR1cm4gbmV3IGcoZik7aWYodT1yPW5ldyBnKDEpLG49bD1uZXcgZygwKSx0PW5ldyBnKG4pLG89dC5lPVJzKHkpLWYuZS0xLHM9byViLHQuZFswXT1qKDEwLHM8MD9iK3M6cyksZT09bnVsbCllPW8+MD90OnU7ZWxzZXtpZihhPW5ldyBnKGUpLCFhLmlzSW50KCl8fGEubHQodSkpdGhyb3cgRXJyb3IoTGUrYSk7ZT1hLmd0KHQpP28+MD90OnU6YX1mb3Iodz0hMSxhPW5ldyBnKFcoeSkpLGM9Zy5wcmVjaXNpb24sZy5wcmVjaXNpb249bz15Lmxlbmd0aCpiKjI7cD1EKGEsdCwwLDEsMSksaT1yLnBsdXMocC50aW1lcyhuKSksaS5jbXAoZSkhPTE7KXI9bixuPWksaT11LHU9bC5wbHVzKHAudGltZXMoaSkpLGw9aSxpPXQsdD1hLm1pbnVzKHAudGltZXMoaSkpLGE9aTtyZXR1cm4gaT1EKGUubWludXMociksbiwwLDEsMSksbD1sLnBsdXMoaS50aW1lcyh1KSkscj1yLnBsdXMoaS50aW1lcyhuKSksbC5zPXUucz1mLnMsZD1EKHUsbixvLDEpLm1pbnVzKGYpLmFicygpLmNtcChEKGwscixvLDEpLm1pbnVzKGYpLmFicygpKTwxP1t1LG5dOltsLHJdLGcucHJlY2lzaW9uPWMsdz0hMCxkfTttLnRvSGV4YWRlY2ltYWw9bS50b0hleD1mdW5jdGlvbihlLHQpe3JldHVybiBQaSh0aGlzLDE2LGUsdCl9O20udG9OZWFyZXN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyxuPXIuY29uc3RydWN0b3I7aWYocj1uZXcgbihyKSxlPT1udWxsKXtpZighci5kKXJldHVybiByO2U9bmV3IG4oMSksdD1uLnJvdW5kaW5nfWVsc2V7aWYoZT1uZXcgbihlKSx0PT09dm9pZCAwP3Q9bi5yb3VuZGluZzpzZSh0LDAsOCksIXIuZClyZXR1cm4gZS5zP3I6ZTtpZighZS5kKXJldHVybiBlLnMmJihlLnM9ci5zKSxlfXJldHVybiBlLmRbMF0/KHc9ITEscj1EKHIsZSwwLHQsMSkudGltZXMoZSksdz0hMCxoKHIpKTooZS5zPXIucyxyPWUpLHJ9O20udG9OdW1iZXI9ZnVuY3Rpb24oKXtyZXR1cm4rdGhpc307bS50b09jdGFsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIFBpKHRoaXMsOCxlLHQpfTttLnRvUG93ZXI9bS5wb3c9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGksbyxzLGE9dGhpcyxsPWEuY29uc3RydWN0b3IsdT0rKGU9bmV3IGwoZSkpO2lmKCFhLmR8fCFlLmR8fCFhLmRbMF18fCFlLmRbMF0pcmV0dXJuIG5ldyBsKGooK2EsdSkpO2lmKGE9bmV3IGwoYSksYS5lcSgxKSlyZXR1cm4gYTtpZihuPWwucHJlY2lzaW9uLG89bC5yb3VuZGluZyxlLmVxKDEpKXJldHVybiBoKGEsbixvKTtpZih0PWVlKGUuZS9iKSx0Pj1lLmQubGVuZ3RoLTEmJihyPXU8MD8tdTp1KTw9bWMpcmV0dXJuIGk9U3MobCxhLHIsbiksZS5zPDA/bmV3IGwoMSkuZGl2KGkpOmgoaSxuLG8pO2lmKHM9YS5zLHM8MCl7aWYodDxlLmQubGVuZ3RoLTEpcmV0dXJuIG5ldyBsKE5hTik7aWYoZS5kW3RdJjF8fChzPTEpLGEuZT09MCYmYS5kWzBdPT0xJiZhLmQubGVuZ3RoPT0xKXJldHVybiBhLnM9cyxhfXJldHVybiByPWooK2EsdSksdD1yPT0wfHwhaXNGaW5pdGUocik/ZWUodSooTWF0aC5sb2coXCIwLlwiK1coYS5kKSkvTWF0aC5MTjEwK2EuZSsxKSk6bmV3IGwocitcIlwiKS5lLHQ+bC5tYXhFKzF8fHQ8bC5taW5FLTE/bmV3IGwodD4wP3MvMDowKToodz0hMSxsLnJvdW5kaW5nPWEucz0xLHI9TWF0aC5taW4oMTIsKHQrXCJcIikubGVuZ3RoKSxpPUVpKGUudGltZXMoTmUoYSxuK3IpKSxuKSxpLmQmJihpPWgoaSxuKzUsMSksSnQoaS5kLG4sbykmJih0PW4rMTAsaT1oKEVpKGUudGltZXMoTmUoYSx0K3IpKSx0KSx0KzUsMSksK1coaS5kKS5zbGljZShuKzEsbisxNSkrMT09MWUxNCYmKGk9aChpLG4rMSwwKSkpKSxpLnM9cyx3PSEwLGwucm91bmRpbmc9byxoKGksbixvKSl9O20udG9QcmVjaXNpb249ZnVuY3Rpb24oZSx0KXt2YXIgcixuPXRoaXMsaT1uLmNvbnN0cnVjdG9yO3JldHVybiBlPT09dm9pZCAwP3I9d2UobixuLmU8PWkudG9FeHBOZWd8fG4uZT49aS50b0V4cFBvcyk6KHNlKGUsMSwkZSksdD09PXZvaWQgMD90PWkucm91bmRpbmc6c2UodCwwLDgpLG49aChuZXcgaShuKSxlLHQpLHI9d2UobixlPD1uLmV8fG4uZTw9aS50b0V4cE5lZyxlKSksbi5pc05lZygpJiYhbi5pc1plcm8oKT9cIi1cIityOnJ9O20udG9TaWduaWZpY2FudERpZ2l0cz1tLnRvU0Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49ci5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD8oZT1uLnByZWNpc2lvbix0PW4ucm91bmRpbmcpOihzZShlLDEsJGUpLHQ9PT12b2lkIDA/dD1uLnJvdW5kaW5nOnNlKHQsMCw4KSksaChuZXcgbihyKSxlLHQpfTttLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuY29uc3RydWN0b3Iscj13ZShlLGUuZTw9dC50b0V4cE5lZ3x8ZS5lPj10LnRvRXhwUG9zKTtyZXR1cm4gZS5pc05lZygpJiYhZS5pc1plcm8oKT9cIi1cIityOnJ9O20udHJ1bmNhdGVkPW0udHJ1bmM9ZnVuY3Rpb24oKXtyZXR1cm4gaChuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSx0aGlzLmUrMSwxKX07bS52YWx1ZU9mPW0udG9KU09OPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuY29uc3RydWN0b3Iscj13ZShlLGUuZTw9dC50b0V4cE5lZ3x8ZS5lPj10LnRvRXhwUG9zKTtyZXR1cm4gZS5pc05lZygpP1wiLVwiK3I6cn07ZnVuY3Rpb24gVyhlKXt2YXIgdCxyLG4saT1lLmxlbmd0aC0xLG89XCJcIixzPWVbMF07aWYoaT4wKXtmb3Iobys9cyx0PTE7dDxpO3QrKyluPWVbdF0rXCJcIixyPWItbi5sZW5ndGgsciYmKG8rPV9lKHIpKSxvKz1uO3M9ZVt0XSxuPXMrXCJcIixyPWItbi5sZW5ndGgsciYmKG8rPV9lKHIpKX1lbHNlIGlmKHM9PT0wKXJldHVyblwiMFwiO2Zvcig7cyUxMD09PTA7KXMvPTEwO3JldHVybiBvK3N9ZnVuY3Rpb24gc2UoZSx0LHIpe2lmKGUhPT1+fmV8fGU8dHx8ZT5yKXRocm93IEVycm9yKExlK2UpfWZ1bmN0aW9uIEp0KGUsdCxyLG4pe3ZhciBpLG8scyxhO2ZvcihvPWVbMF07bz49MTA7by89MTApLS10O3JldHVybi0tdDwwPyh0Kz1iLGk9MCk6KGk9TWF0aC5jZWlsKCh0KzEpL2IpLHQlPWIpLG89aigxMCxiLXQpLGE9ZVtpXSVvfDAsbj09bnVsbD90PDM/KHQ9PTA/YT1hLzEwMHwwOnQ9PTEmJihhPWEvMTB8MCkscz1yPDQmJmE9PTk5OTk5fHxyPjMmJmE9PTQ5OTk5fHxhPT01ZTR8fGE9PTApOnM9KHI8NCYmYSsxPT1vfHxyPjMmJmErMT09by8yKSYmKGVbaSsxXS9vLzEwMHwwKT09aigxMCx0LTIpLTF8fChhPT1vLzJ8fGE9PTApJiYoZVtpKzFdL28vMTAwfDApPT0wOnQ8ND8odD09MD9hPWEvMWUzfDA6dD09MT9hPWEvMTAwfDA6dD09MiYmKGE9YS8xMHwwKSxzPShufHxyPDQpJiZhPT05OTk5fHwhbiYmcj4zJiZhPT00OTk5KTpzPSgobnx8cjw0KSYmYSsxPT1vfHwhbiYmcj4zJiZhKzE9PW8vMikmJihlW2krMV0vby8xZTN8MCk9PWooMTAsdC0zKS0xLHN9ZnVuY3Rpb24gVXIoZSx0LHIpe2Zvcih2YXIgbixpPVswXSxvLHM9MCxhPWUubGVuZ3RoO3M8YTspe2ZvcihvPWkubGVuZ3RoO28tLTspaVtvXSo9dDtmb3IoaVswXSs9aGkuaW5kZXhPZihlLmNoYXJBdChzKyspKSxuPTA7bjxpLmxlbmd0aDtuKyspaVtuXT5yLTEmJihpW24rMV09PT12b2lkIDAmJihpW24rMV09MCksaVtuKzFdKz1pW25dL3J8MCxpW25dJT1yKX1yZXR1cm4gaS5yZXZlcnNlKCl9ZnVuY3Rpb24gZ2MoZSx0KXt2YXIgcixuLGk7aWYodC5pc1plcm8oKSlyZXR1cm4gdDtuPXQuZC5sZW5ndGgsbjwzMj8ocj1NYXRoLmNlaWwobi8zKSxpPSgxL1dyKDQscikpLnRvU3RyaW5nKCkpOihyPTE2LGk9XCIyLjMyODMwNjQzNjUzODY5NjI4OTA2MjVlLTEwXCIpLGUucHJlY2lzaW9uKz1yLHQ9eXQoZSwxLHQudGltZXMoaSksbmV3IGUoMSkpO2Zvcih2YXIgbz1yO28tLTspe3ZhciBzPXQudGltZXModCk7dD1zLnRpbWVzKHMpLm1pbnVzKHMpLnRpbWVzKDgpLnBsdXMoMSl9cmV0dXJuIGUucHJlY2lzaW9uLT1yLHR9dmFyIEQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4saSxvKXt2YXIgcyxhPTAsbD1uLmxlbmd0aDtmb3Iobj1uLnNsaWNlKCk7bC0tOylzPW5bbF0qaSthLG5bbF09cyVvfDAsYT1zL298MDtyZXR1cm4gYSYmbi51bnNoaWZ0KGEpLG59ZnVuY3Rpb24gdChuLGksbyxzKXt2YXIgYSxsO2lmKG8hPXMpbD1vPnM/MTotMTtlbHNlIGZvcihhPWw9MDthPG87YSsrKWlmKG5bYV0hPWlbYV0pe2w9blthXT5pW2FdPzE6LTE7YnJlYWt9cmV0dXJuIGx9ZnVuY3Rpb24gcihuLGksbyxzKXtmb3IodmFyIGE9MDtvLS07KW5bb10tPWEsYT1uW29dPGlbb10/MTowLG5bb109YSpzK25bb10taVtvXTtmb3IoOyFuWzBdJiZuLmxlbmd0aD4xOyluLnNoaWZ0KCl9cmV0dXJuIGZ1bmN0aW9uKG4saSxvLHMsYSxsKXt2YXIgdSxjLHAsZCxmLHksZyxQLFQsQyx4LE0sY2UsSixLZSwkLHosQWUsWSx0dCxocj1uLmNvbnN0cnVjdG9yLEFuPW4ucz09aS5zPzE6LTEsWj1uLmQsaz1pLmQ7aWYoIVp8fCFaWzBdfHwha3x8IWtbMF0pcmV0dXJuIG5ldyBocighbi5zfHwhaS5zfHwoWj9rJiZaWzBdPT1rWzBdOiFrKT9OYU46WiYmWlswXT09MHx8IWs/QW4qMDpBbi8wKTtmb3IobD8oZj0xLGM9bi5lLWkuZSk6KGw9Z2UsZj1iLGM9ZWUobi5lL2YpLWVlKGkuZS9mKSksWT1rLmxlbmd0aCx6PVoubGVuZ3RoLFQ9bmV3IGhyKEFuKSxDPVQuZD1bXSxwPTA7a1twXT09KFpbcF18fDApO3ArKyk7aWYoa1twXT4oWltwXXx8MCkmJmMtLSxvPT1udWxsPyhKPW89aHIucHJlY2lzaW9uLHM9aHIucm91bmRpbmcpOmE/Sj1vKyhuLmUtaS5lKSsxOko9byxKPDApQy5wdXNoKDEpLHk9ITA7ZWxzZXtpZihKPUovZisyfDAscD0wLFk9PTEpe2ZvcihkPTAsaz1rWzBdLEorKzsocDx6fHxkKSYmSi0tO3ArKylLZT1kKmwrKFpbcF18fDApLENbcF09S2Uva3wwLGQ9S2Ula3wwO3k9ZHx8cDx6fWVsc2V7Zm9yKGQ9bC8oa1swXSsxKXwwLGQ+MSYmKGs9ZShrLGQsbCksWj1lKFosZCxsKSxZPWsubGVuZ3RoLHo9Wi5sZW5ndGgpLCQ9WSx4PVouc2xpY2UoMCxZKSxNPXgubGVuZ3RoO008WTspeFtNKytdPTA7dHQ9ay5zbGljZSgpLHR0LnVuc2hpZnQoMCksQWU9a1swXSxrWzFdPj1sLzImJisrQWU7ZG8gZD0wLHU9dChrLHgsWSxNKSx1PDA/KGNlPXhbMF0sWSE9TSYmKGNlPWNlKmwrKHhbMV18fDApKSxkPWNlL0FlfDAsZD4xPyhkPj1sJiYoZD1sLTEpLGc9ZShrLGQsbCksUD1nLmxlbmd0aCxNPXgubGVuZ3RoLHU9dChnLHgsUCxNKSx1PT0xJiYoZC0tLHIoZyxZPFA/dHQ6ayxQLGwpKSk6KGQ9PTAmJih1PWQ9MSksZz1rLnNsaWNlKCkpLFA9Zy5sZW5ndGgsUDxNJiZnLnVuc2hpZnQoMCkscih4LGcsTSxsKSx1PT0tMSYmKE09eC5sZW5ndGgsdT10KGsseCxZLE0pLHU8MSYmKGQrKyxyKHgsWTxNP3R0OmssTSxsKSkpLE09eC5sZW5ndGgpOnU9PT0wJiYoZCsrLHg9WzBdKSxDW3ArK109ZCx1JiZ4WzBdP3hbTSsrXT1aWyRdfHwwOih4PVtaWyRdXSxNPTEpO3doaWxlKCgkKys8enx8eFswXSE9PXZvaWQgMCkmJkotLSk7eT14WzBdIT09dm9pZCAwfUNbMF18fEMuc2hpZnQoKX1pZihmPT0xKVQuZT1jLHZzPXk7ZWxzZXtmb3IocD0xLGQ9Q1swXTtkPj0xMDtkLz0xMClwKys7VC5lPXArYypmLTEsaChULGE/bytULmUrMTpvLHMseSl9cmV0dXJuIFR9fSgpO2Z1bmN0aW9uIGgoZSx0LHIsbil7dmFyIGksbyxzLGEsbCx1LGMscCxkLGY9ZS5jb25zdHJ1Y3RvcjtlOmlmKHQhPW51bGwpe2lmKHA9ZS5kLCFwKXJldHVybiBlO2ZvcihpPTEsYT1wWzBdO2E+PTEwO2EvPTEwKWkrKztpZihvPXQtaSxvPDApbys9YixzPXQsYz1wW2Q9MF0sbD1jL2ooMTAsaS1zLTEpJTEwfDA7ZWxzZSBpZihkPU1hdGguY2VpbCgobysxKS9iKSxhPXAubGVuZ3RoLGQ+PWEpaWYobil7Zm9yKDthKys8PWQ7KXAucHVzaCgwKTtjPWw9MCxpPTEsbyU9YixzPW8tYisxfWVsc2UgYnJlYWsgZTtlbHNle2ZvcihjPWE9cFtkXSxpPTE7YT49MTA7YS89MTApaSsrO28lPWIscz1vLWIraSxsPXM8MD8wOmMvaigxMCxpLXMtMSklMTB8MH1pZihuPW58fHQ8MHx8cFtkKzFdIT09dm9pZCAwfHwoczwwP2M6YyVqKDEwLGktcy0xKSksdT1yPDQ/KGx8fG4pJiYocj09MHx8cj09KGUuczwwPzM6MikpOmw+NXx8bD09NSYmKHI9PTR8fG58fHI9PTYmJihvPjA/cz4wP2MvaigxMCxpLXMpOjA6cFtkLTFdKSUxMCYxfHxyPT0oZS5zPDA/ODo3KSksdDwxfHwhcFswXSlyZXR1cm4gcC5sZW5ndGg9MCx1Pyh0LT1lLmUrMSxwWzBdPWooMTAsKGItdCViKSViKSxlLmU9LXR8fDApOnBbMF09ZS5lPTAsZTtpZihvPT0wPyhwLmxlbmd0aD1kLGE9MSxkLS0pOihwLmxlbmd0aD1kKzEsYT1qKDEwLGItbykscFtkXT1zPjA/KGMvaigxMCxpLXMpJWooMTAscyl8MCkqYTowKSx1KWZvcig7OylpZihkPT0wKXtmb3Iobz0xLHM9cFswXTtzPj0xMDtzLz0xMClvKys7Zm9yKHM9cFswXSs9YSxhPTE7cz49MTA7cy89MTApYSsrO28hPWEmJihlLmUrKyxwWzBdPT1nZSYmKHBbMF09MSkpO2JyZWFrfWVsc2V7aWYocFtkXSs9YSxwW2RdIT1nZSlicmVhaztwW2QtLV09MCxhPTF9Zm9yKG89cC5sZW5ndGg7cFstLW9dPT09MDspcC5wb3AoKX1yZXR1cm4gdyYmKGUuZT5mLm1heEU/KGUuZD1udWxsLGUuZT1OYU4pOmUuZTxmLm1pbkUmJihlLmU9MCxlLmQ9WzBdKSksZX1mdW5jdGlvbiB3ZShlLHQscil7aWYoIWUuaXNGaW5pdGUoKSlyZXR1cm4ga3MoZSk7dmFyIG4saT1lLmUsbz1XKGUuZCkscz1vLmxlbmd0aDtyZXR1cm4gdD8ociYmKG49ci1zKT4wP289by5jaGFyQXQoMCkrXCIuXCIrby5zbGljZSgxKStfZShuKTpzPjEmJihvPW8uY2hhckF0KDApK1wiLlwiK28uc2xpY2UoMSkpLG89bysoZS5lPDA/XCJlXCI6XCJlK1wiKStlLmUpOmk8MD8obz1cIjAuXCIrX2UoLWktMSkrbyxyJiYobj1yLXMpPjAmJihvKz1fZShuKSkpOmk+PXM/KG8rPV9lKGkrMS1zKSxyJiYobj1yLWktMSk+MCYmKG89bytcIi5cIitfZShuKSkpOigobj1pKzEpPHMmJihvPW8uc2xpY2UoMCxuKStcIi5cIitvLnNsaWNlKG4pKSxyJiYobj1yLXMpPjAmJihpKzE9PT1zJiYobys9XCIuXCIpLG8rPV9lKG4pKSksb31mdW5jdGlvbiBIcihlLHQpe3ZhciByPWVbMF07Zm9yKHQqPWI7cj49MTA7ci89MTApdCsrO3JldHVybiB0fWZ1bmN0aW9uIEdyKGUsdCxyKXtpZih0PmZjKXRocm93IHc9ITAsciYmKGUucHJlY2lzaW9uPXIpLEVycm9yKFRzKTtyZXR1cm4gaChuZXcgZShLciksdCwxLCEwKX1mdW5jdGlvbiBmZShlLHQscil7aWYodD5iaSl0aHJvdyBFcnJvcihUcyk7cmV0dXJuIGgobmV3IGUoUXIpLHQsciwhMCl9ZnVuY3Rpb24gUnMoZSl7dmFyIHQ9ZS5sZW5ndGgtMSxyPXQqYisxO2lmKHQ9ZVt0XSx0KXtmb3IoO3QlMTA9PTA7dC89MTApci0tO2Zvcih0PWVbMF07dD49MTA7dC89MTApcisrfXJldHVybiByfWZ1bmN0aW9uIF9lKGUpe2Zvcih2YXIgdD1cIlwiO2UtLTspdCs9XCIwXCI7cmV0dXJuIHR9ZnVuY3Rpb24gU3MoZSx0LHIsbil7dmFyIGksbz1uZXcgZSgxKSxzPU1hdGguY2VpbChuL2IrNCk7Zm9yKHc9ITE7Oyl7aWYociUyJiYobz1vLnRpbWVzKHQpLHdzKG8uZCxzKSYmKGk9ITApKSxyPWVlKHIvMikscj09PTApe3I9by5kLmxlbmd0aC0xLGkmJm8uZFtyXT09PTAmJisrby5kW3JdO2JyZWFrfXQ9dC50aW1lcyh0KSx3cyh0LmQscyl9cmV0dXJuIHc9ITAsb31mdW5jdGlvbiBFcyhlKXtyZXR1cm4gZS5kW2UuZC5sZW5ndGgtMV0mMX1mdW5jdGlvbiBJcyhlLHQscil7Zm9yKHZhciBuLGk9bmV3IGUodFswXSksbz0wOysrbzx0Lmxlbmd0aDspaWYobj1uZXcgZSh0W29dKSxuLnMpaVtyXShuKSYmKGk9bik7ZWxzZXtpPW47YnJlYWt9cmV0dXJuIGl9ZnVuY3Rpb24gRWkoZSx0KXt2YXIgcixuLGksbyxzLGEsbCx1PTAsYz0wLHA9MCxkPWUuY29uc3RydWN0b3IsZj1kLnJvdW5kaW5nLHk9ZC5wcmVjaXNpb247aWYoIWUuZHx8IWUuZFswXXx8ZS5lPjE3KXJldHVybiBuZXcgZChlLmQ/ZS5kWzBdP2UuczwwPzA6MS8wOjE6ZS5zP2UuczwwPzA6ZTowLzApO2Zvcih0PT1udWxsPyh3PSExLGw9eSk6bD10LGE9bmV3IGQoLjAzMTI1KTtlLmU+LTI7KWU9ZS50aW1lcyhhKSxwKz01O2ZvcihuPU1hdGgubG9nKGooMixwKSkvTWF0aC5MTjEwKjIrNXwwLGwrPW4scj1vPXM9bmV3IGQoMSksZC5wcmVjaXNpb249bDs7KXtpZihvPWgoby50aW1lcyhlKSxsLDEpLHI9ci50aW1lcygrK2MpLGE9cy5wbHVzKEQobyxyLGwsMSkpLFcoYS5kKS5zbGljZSgwLGwpPT09VyhzLmQpLnNsaWNlKDAsbCkpe2ZvcihpPXA7aS0tOylzPWgocy50aW1lcyhzKSxsLDEpO2lmKHQ9PW51bGwpaWYodTwzJiZKdChzLmQsbC1uLGYsdSkpZC5wcmVjaXNpb249bCs9MTAscj1vPWE9bmV3IGQoMSksYz0wLHUrKztlbHNlIHJldHVybiBoKHMsZC5wcmVjaXNpb249eSxmLHc9ITApO2Vsc2UgcmV0dXJuIGQucHJlY2lzaW9uPXksc31zPWF9fWZ1bmN0aW9uIE5lKGUsdCl7dmFyIHIsbixpLG8scyxhLGwsdSxjLHAsZCxmPTEseT0xMCxnPWUsUD1nLmQsVD1nLmNvbnN0cnVjdG9yLEM9VC5yb3VuZGluZyx4PVQucHJlY2lzaW9uO2lmKGcuczwwfHwhUHx8IVBbMF18fCFnLmUmJlBbMF09PTEmJlAubGVuZ3RoPT0xKXJldHVybiBuZXcgVChQJiYhUFswXT8tMS8wOmcucyE9MT9OYU46UD8wOmcpO2lmKHQ9PW51bGw/KHc9ITEsYz14KTpjPXQsVC5wcmVjaXNpb249Yys9eSxyPVcoUCksbj1yLmNoYXJBdCgwKSxNYXRoLmFicyhvPWcuZSk8MTVlMTQpe2Zvcig7bjw3JiZuIT0xfHxuPT0xJiZyLmNoYXJBdCgxKT4zOylnPWcudGltZXMoZSkscj1XKGcuZCksbj1yLmNoYXJBdCgwKSxmKys7bz1nLmUsbj4xPyhnPW5ldyBUKFwiMC5cIityKSxvKyspOmc9bmV3IFQobitcIi5cIityLnNsaWNlKDEpKX1lbHNlIHJldHVybiB1PUdyKFQsYysyLHgpLnRpbWVzKG8rXCJcIiksZz1OZShuZXcgVChuK1wiLlwiK3Iuc2xpY2UoMSkpLGMteSkucGx1cyh1KSxULnByZWNpc2lvbj14LHQ9PW51bGw/aChnLHgsQyx3PSEwKTpnO2ZvcihwPWcsbD1zPWc9RChnLm1pbnVzKDEpLGcucGx1cygxKSxjLDEpLGQ9aChnLnRpbWVzKGcpLGMsMSksaT0zOzspe2lmKHM9aChzLnRpbWVzKGQpLGMsMSksdT1sLnBsdXMoRChzLG5ldyBUKGkpLGMsMSkpLFcodS5kKS5zbGljZSgwLGMpPT09VyhsLmQpLnNsaWNlKDAsYykpaWYobD1sLnRpbWVzKDIpLG8hPT0wJiYobD1sLnBsdXMoR3IoVCxjKzIseCkudGltZXMobytcIlwiKSkpLGw9RChsLG5ldyBUKGYpLGMsMSksdD09bnVsbClpZihKdChsLmQsYy15LEMsYSkpVC5wcmVjaXNpb249Yys9eSx1PXM9Zz1EKHAubWludXMoMSkscC5wbHVzKDEpLGMsMSksZD1oKGcudGltZXMoZyksYywxKSxpPWE9MTtlbHNlIHJldHVybiBoKGwsVC5wcmVjaXNpb249eCxDLHc9ITApO2Vsc2UgcmV0dXJuIFQucHJlY2lzaW9uPXgsbDtsPXUsaSs9Mn19ZnVuY3Rpb24ga3MoZSl7cmV0dXJuIFN0cmluZyhlLnMqZS5zLzApfWZ1bmN0aW9uIHdpKGUsdCl7dmFyIHIsbixpO2Zvcigocj10LmluZGV4T2YoXCIuXCIpKT4tMSYmKHQ9dC5yZXBsYWNlKFwiLlwiLFwiXCIpKSwobj10LnNlYXJjaCgvZS9pKSk+MD8ocjwwJiYocj1uKSxyKz0rdC5zbGljZShuKzEpLHQ9dC5zdWJzdHJpbmcoMCxuKSk6cjwwJiYocj10Lmxlbmd0aCksbj0wO3QuY2hhckNvZGVBdChuKT09PTQ4O24rKyk7Zm9yKGk9dC5sZW5ndGg7dC5jaGFyQ29kZUF0KGktMSk9PT00ODstLWkpO2lmKHQ9dC5zbGljZShuLGkpLHQpe2lmKGktPW4sZS5lPXI9ci1uLTEsZS5kPVtdLG49KHIrMSklYixyPDAmJihuKz1iKSxuPGkpe2ZvcihuJiZlLmQucHVzaCgrdC5zbGljZSgwLG4pKSxpLT1iO248aTspZS5kLnB1c2goK3Quc2xpY2UobixuKz1iKSk7dD10LnNsaWNlKG4pLG49Yi10Lmxlbmd0aH1lbHNlIG4tPWk7Zm9yKDtuLS07KXQrPVwiMFwiO2UuZC5wdXNoKCt0KSx3JiYoZS5lPmUuY29uc3RydWN0b3IubWF4RT8oZS5kPW51bGwsZS5lPU5hTik6ZS5lPGUuY29uc3RydWN0b3IubWluRSYmKGUuZT0wLGUuZD1bMF0pKX1lbHNlIGUuZT0wLGUuZD1bMF07cmV0dXJuIGV9ZnVuY3Rpb24geWMoZSx0KXt2YXIgcixuLGksbyxzLGEsbCx1LGM7aWYodC5pbmRleE9mKFwiX1wiKT4tMSl7aWYodD10LnJlcGxhY2UoLyhcXGQpXyg/PVxcZCkvZyxcIiQxXCIpLE1zLnRlc3QodCkpcmV0dXJuIHdpKGUsdCl9ZWxzZSBpZih0PT09XCJJbmZpbml0eVwifHx0PT09XCJOYU5cIilyZXR1cm4rdHx8KGUucz1OYU4pLGUuZT1OYU4sZS5kPW51bGwsZTtpZihwYy50ZXN0KHQpKXI9MTYsdD10LnRvTG93ZXJDYXNlKCk7ZWxzZSBpZihjYy50ZXN0KHQpKXI9MjtlbHNlIGlmKGRjLnRlc3QodCkpcj04O2Vsc2UgdGhyb3cgRXJyb3IoTGUrdCk7Zm9yKG89dC5zZWFyY2goL3AvaSksbz4wPyhsPSt0LnNsaWNlKG8rMSksdD10LnN1YnN0cmluZygyLG8pKTp0PXQuc2xpY2UoMiksbz10LmluZGV4T2YoXCIuXCIpLHM9bz49MCxuPWUuY29uc3RydWN0b3IscyYmKHQ9dC5yZXBsYWNlKFwiLlwiLFwiXCIpLGE9dC5sZW5ndGgsbz1hLW8saT1TcyhuLG5ldyBuKHIpLG8sbyoyKSksdT1Vcih0LHIsZ2UpLGM9dS5sZW5ndGgtMSxvPWM7dVtvXT09PTA7LS1vKXUucG9wKCk7cmV0dXJuIG88MD9uZXcgbihlLnMqMCk6KGUuZT1Icih1LGMpLGUuZD11LHc9ITEscyYmKGU9RChlLGksYSo0KSksbCYmKGU9ZS50aW1lcyhNYXRoLmFicyhsKTw1ND9qKDIsbCk6emUucG93KDIsbCkpKSx3PSEwLGUpfWZ1bmN0aW9uIGhjKGUsdCl7dmFyIHIsbj10LmQubGVuZ3RoO2lmKG48MylyZXR1cm4gdC5pc1plcm8oKT90Onl0KGUsMix0LHQpO3I9MS40Kk1hdGguc3FydChuKSxyPXI+MTY/MTY6cnwwLHQ9dC50aW1lcygxL1dyKDUscikpLHQ9eXQoZSwyLHQsdCk7Zm9yKHZhciBpLG89bmV3IGUoNSkscz1uZXcgZSgxNiksYT1uZXcgZSgyMCk7ci0tOylpPXQudGltZXModCksdD10LnRpbWVzKG8ucGx1cyhpLnRpbWVzKHMudGltZXMoaSkubWludXMoYSkpKSk7cmV0dXJuIHR9ZnVuY3Rpb24geXQoZSx0LHIsbixpKXt2YXIgbyxzLGEsbCx1PTEsYz1lLnByZWNpc2lvbixwPU1hdGguY2VpbChjL2IpO2Zvcih3PSExLGw9ci50aW1lcyhyKSxhPW5ldyBlKG4pOzspe2lmKHM9RChhLnRpbWVzKGwpLG5ldyBlKHQrKyp0KyspLGMsMSksYT1pP24ucGx1cyhzKTpuLm1pbnVzKHMpLG49RChzLnRpbWVzKGwpLG5ldyBlKHQrKyp0KyspLGMsMSkscz1hLnBsdXMobikscy5kW3BdIT09dm9pZCAwKXtmb3Iobz1wO3MuZFtvXT09PWEuZFtvXSYmby0tOyk7aWYobz09LTEpYnJlYWt9bz1hLGE9bixuPXMscz1vLHUrK31yZXR1cm4gdz0hMCxzLmQubGVuZ3RoPXArMSxzfWZ1bmN0aW9uIFdyKGUsdCl7Zm9yKHZhciByPWU7LS10OylyKj1lO3JldHVybiByfWZ1bmN0aW9uIEZzKGUsdCl7dmFyIHIsbj10LnM8MCxpPWZlKGUsZS5wcmVjaXNpb24sMSksbz1pLnRpbWVzKC41KTtpZih0PXQuYWJzKCksdC5sdGUobykpcmV0dXJuIFJlPW4/NDoxLHQ7aWYocj10LmRpdlRvSW50KGkpLHIuaXNaZXJvKCkpUmU9bj8zOjI7ZWxzZXtpZih0PXQubWludXMoci50aW1lcyhpKSksdC5sdGUobykpcmV0dXJuIFJlPUVzKHIpP24/MjozOm4/NDoxLHQ7UmU9RXMocik/bj8xOjQ6bj8zOjJ9cmV0dXJuIHQubWludXMoaSkuYWJzKCl9ZnVuY3Rpb24gUGkoZSx0LHIsbil7dmFyIGksbyxzLGEsbCx1LGMscCxkLGY9ZS5jb25zdHJ1Y3Rvcix5PXIhPT12b2lkIDA7aWYoeT8oc2UociwxLCRlKSxuPT09dm9pZCAwP249Zi5yb3VuZGluZzpzZShuLDAsOCkpOihyPWYucHJlY2lzaW9uLG49Zi5yb3VuZGluZyksIWUuaXNGaW5pdGUoKSljPWtzKGUpO2Vsc2V7Zm9yKGM9d2UoZSkscz1jLmluZGV4T2YoXCIuXCIpLHk/KGk9Mix0PT0xNj9yPXIqNC0zOnQ9PTgmJihyPXIqMy0yKSk6aT10LHM+PTAmJihjPWMucmVwbGFjZShcIi5cIixcIlwiKSxkPW5ldyBmKDEpLGQuZT1jLmxlbmd0aC1zLGQuZD1Vcih3ZShkKSwxMCxpKSxkLmU9ZC5kLmxlbmd0aCkscD1VcihjLDEwLGkpLG89bD1wLmxlbmd0aDtwWy0tbF09PTA7KXAucG9wKCk7aWYoIXBbMF0pYz15P1wiMHArMFwiOlwiMFwiO2Vsc2V7aWYoczwwP28tLTooZT1uZXcgZihlKSxlLmQ9cCxlLmU9byxlPUQoZSxkLHIsbiwwLGkpLHA9ZS5kLG89ZS5lLHU9dnMpLHM9cFtyXSxhPWkvMix1PXV8fHBbcisxXSE9PXZvaWQgMCx1PW48ND8ocyE9PXZvaWQgMHx8dSkmJihuPT09MHx8bj09PShlLnM8MD8zOjIpKTpzPmF8fHM9PT1hJiYobj09PTR8fHV8fG49PT02JiZwW3ItMV0mMXx8bj09PShlLnM8MD84OjcpKSxwLmxlbmd0aD1yLHUpZm9yKDsrK3BbLS1yXT5pLTE7KXBbcl09MCxyfHwoKytvLHAudW5zaGlmdCgxKSk7Zm9yKGw9cC5sZW5ndGg7IXBbbC0xXTstLWwpO2ZvcihzPTAsYz1cIlwiO3M8bDtzKyspYys9aGkuY2hhckF0KHBbc10pO2lmKHkpe2lmKGw+MSlpZih0PT0xNnx8dD09OCl7Zm9yKHM9dD09MTY/NDozLC0tbDtsJXM7bCsrKWMrPVwiMFwiO2ZvcihwPVVyKGMsaSx0KSxsPXAubGVuZ3RoOyFwW2wtMV07LS1sKTtmb3Iocz0xLGM9XCIxLlwiO3M8bDtzKyspYys9aGkuY2hhckF0KHBbc10pfWVsc2UgYz1jLmNoYXJBdCgwKStcIi5cIitjLnNsaWNlKDEpO2M9YysobzwwP1wicFwiOlwicCtcIikrb31lbHNlIGlmKG88MCl7Zm9yKDsrK287KWM9XCIwXCIrYztjPVwiMC5cIitjfWVsc2UgaWYoKytvPmwpZm9yKG8tPWw7by0tOyljKz1cIjBcIjtlbHNlIG88bCYmKGM9Yy5zbGljZSgwLG8pK1wiLlwiK2Muc2xpY2UobykpfWM9KHQ9PTE2P1wiMHhcIjp0PT0yP1wiMGJcIjp0PT04P1wiMG9cIjpcIlwiKStjfXJldHVybiBlLnM8MD9cIi1cIitjOmN9ZnVuY3Rpb24gd3MoZSx0KXtpZihlLmxlbmd0aD50KXJldHVybiBlLmxlbmd0aD10LCEwfWZ1bmN0aW9uIHhjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hYnMoKX1mdW5jdGlvbiBiYyhlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYWNvcygpfWZ1bmN0aW9uIEVjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hY29zaCgpfWZ1bmN0aW9uIHdjKGUsdCl7cmV0dXJuIG5ldyB0aGlzKGUpLnBsdXModCl9ZnVuY3Rpb24gUGMoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFzaW4oKX1mdW5jdGlvbiB2YyhlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYXNpbmgoKX1mdW5jdGlvbiBUYyhlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYXRhbigpfWZ1bmN0aW9uIENjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hdGFuaCgpfWZ1bmN0aW9uIEFjKGUsdCl7ZT1uZXcgdGhpcyhlKSx0PW5ldyB0aGlzKHQpO3ZhciByLG49dGhpcy5wcmVjaXNpb24saT10aGlzLnJvdW5kaW5nLG89bis0O3JldHVybiFlLnN8fCF0LnM/cj1uZXcgdGhpcyhOYU4pOiFlLmQmJiF0LmQ/KHI9ZmUodGhpcyxvLDEpLnRpbWVzKHQucz4wPy4yNTouNzUpLHIucz1lLnMpOiF0LmR8fGUuaXNaZXJvKCk/KHI9dC5zPDA/ZmUodGhpcyxuLGkpOm5ldyB0aGlzKDApLHIucz1lLnMpOiFlLmR8fHQuaXNaZXJvKCk/KHI9ZmUodGhpcyxvLDEpLnRpbWVzKC41KSxyLnM9ZS5zKTp0LnM8MD8odGhpcy5wcmVjaXNpb249byx0aGlzLnJvdW5kaW5nPTEscj10aGlzLmF0YW4oRChlLHQsbywxKSksdD1mZSh0aGlzLG8sMSksdGhpcy5wcmVjaXNpb249bix0aGlzLnJvdW5kaW5nPWkscj1lLnM8MD9yLm1pbnVzKHQpOnIucGx1cyh0KSk6cj10aGlzLmF0YW4oRChlLHQsbywxKSkscn1mdW5jdGlvbiBNYyhlKXtyZXR1cm4gbmV3IHRoaXMoZSkuY2JydCgpfWZ1bmN0aW9uIFJjKGUpe3JldHVybiBoKGU9bmV3IHRoaXMoZSksZS5lKzEsMil9ZnVuY3Rpb24gU2MoZSx0LHIpe3JldHVybiBuZXcgdGhpcyhlKS5jbGFtcCh0LHIpfWZ1bmN0aW9uIEljKGUpe2lmKCFlfHx0eXBlb2YgZSE9XCJvYmplY3RcIil0aHJvdyBFcnJvcihKcitcIk9iamVjdCBleHBlY3RlZFwiKTt2YXIgdCxyLG4saT1lLmRlZmF1bHRzPT09ITAsbz1bXCJwcmVjaXNpb25cIiwxLCRlLFwicm91bmRpbmdcIiwwLDgsXCJ0b0V4cE5lZ1wiLC1ndCwwLFwidG9FeHBQb3NcIiwwLGd0LFwibWF4RVwiLDAsZ3QsXCJtaW5FXCIsLWd0LDAsXCJtb2R1bG9cIiwwLDldO2Zvcih0PTA7dDxvLmxlbmd0aDt0Kz0zKWlmKHI9b1t0XSxpJiYodGhpc1tyXT14aVtyXSksKG49ZVtyXSkhPT12b2lkIDApaWYoZWUobik9PT1uJiZuPj1vW3QrMV0mJm48PW9bdCsyXSl0aGlzW3JdPW47ZWxzZSB0aHJvdyBFcnJvcihMZStyK1wiOiBcIituKTtpZihyPVwiY3J5cHRvXCIsaSYmKHRoaXNbcl09eGlbcl0pLChuPWVbcl0pIT09dm9pZCAwKWlmKG49PT0hMHx8bj09PSExfHxuPT09MHx8bj09PTEpaWYobilpZih0eXBlb2YgY3J5cHRvPFwidVwiJiZjcnlwdG8mJihjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzfHxjcnlwdG8ucmFuZG9tQnl0ZXMpKXRoaXNbcl09ITA7ZWxzZSB0aHJvdyBFcnJvcihDcyk7ZWxzZSB0aGlzW3JdPSExO2Vsc2UgdGhyb3cgRXJyb3IoTGUrcitcIjogXCIrbik7cmV0dXJuIHRoaXN9ZnVuY3Rpb24ga2MoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmNvcygpfWZ1bmN0aW9uIEZjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5jb3NoKCl9ZnVuY3Rpb24gRHMoZSl7dmFyIHQscixuO2Z1bmN0aW9uIGkobyl7dmFyIHMsYSxsLHU9dGhpcztpZighKHUgaW5zdGFuY2VvZiBpKSlyZXR1cm4gbmV3IGkobyk7aWYodS5jb25zdHJ1Y3Rvcj1pLFBzKG8pKXt1LnM9by5zLHc/IW8uZHx8by5lPmkubWF4RT8odS5lPU5hTix1LmQ9bnVsbCk6by5lPGkubWluRT8odS5lPTAsdS5kPVswXSk6KHUuZT1vLmUsdS5kPW8uZC5zbGljZSgpKToodS5lPW8uZSx1LmQ9by5kP28uZC5zbGljZSgpOm8uZCk7cmV0dXJufWlmKGw9dHlwZW9mIG8sbD09PVwibnVtYmVyXCIpe2lmKG89PT0wKXt1LnM9MS9vPDA/LTE6MSx1LmU9MCx1LmQ9WzBdO3JldHVybn1pZihvPDA/KG89LW8sdS5zPS0xKTp1LnM9MSxvPT09fn5vJiZvPDFlNyl7Zm9yKHM9MCxhPW87YT49MTA7YS89MTApcysrO3c/cz5pLm1heEU/KHUuZT1OYU4sdS5kPW51bGwpOnM8aS5taW5FPyh1LmU9MCx1LmQ9WzBdKToodS5lPXMsdS5kPVtvXSk6KHUuZT1zLHUuZD1bb10pO3JldHVybn1lbHNlIGlmKG8qMCE9PTApe298fCh1LnM9TmFOKSx1LmU9TmFOLHUuZD1udWxsO3JldHVybn1yZXR1cm4gd2kodSxvLnRvU3RyaW5nKCkpfWVsc2UgaWYobCE9PVwic3RyaW5nXCIpdGhyb3cgRXJyb3IoTGUrbyk7cmV0dXJuKGE9by5jaGFyQ29kZUF0KDApKT09PTQ1PyhvPW8uc2xpY2UoMSksdS5zPS0xKTooYT09PTQzJiYobz1vLnNsaWNlKDEpKSx1LnM9MSksTXMudGVzdChvKT93aSh1LG8pOnljKHUsbyl9aWYoaS5wcm90b3R5cGU9bSxpLlJPVU5EX1VQPTAsaS5ST1VORF9ET1dOPTEsaS5ST1VORF9DRUlMPTIsaS5ST1VORF9GTE9PUj0zLGkuUk9VTkRfSEFMRl9VUD00LGkuUk9VTkRfSEFMRl9ET1dOPTUsaS5ST1VORF9IQUxGX0VWRU49NixpLlJPVU5EX0hBTEZfQ0VJTD03LGkuUk9VTkRfSEFMRl9GTE9PUj04LGkuRVVDTElEPTksaS5jb25maWc9aS5zZXQ9SWMsaS5jbG9uZT1EcyxpLmlzRGVjaW1hbD1QcyxpLmFicz14YyxpLmFjb3M9YmMsaS5hY29zaD1FYyxpLmFkZD13YyxpLmFzaW49UGMsaS5hc2luaD12YyxpLmF0YW49VGMsaS5hdGFuaD1DYyxpLmF0YW4yPUFjLGkuY2JydD1NYyxpLmNlaWw9UmMsaS5jbGFtcD1TYyxpLmNvcz1rYyxpLmNvc2g9RmMsaS5kaXY9RGMsaS5leHA9T2MsaS5mbG9vcj1fYyxpLmh5cG90PU5jLGkubG49TGMsaS5sb2c9JGMsaS5sb2cxMD1WYyxpLmxvZzI9cWMsaS5tYXg9amMsaS5taW49QmMsaS5tb2Q9VWMsaS5tdWw9S2MsaS5wb3c9UWMsaS5yYW5kb209R2MsaS5yb3VuZD1KYyxpLnNpZ249SGMsaS5zaW49V2MsaS5zaW5oPXpjLGkuc3FydD1ZYyxpLnN1Yj1aYyxpLnN1bT1YYyxpLnRhbj1lcCxpLnRhbmg9dHAsaS50cnVuYz1ycCxlPT09dm9pZCAwJiYoZT17fSksZSYmZS5kZWZhdWx0cyE9PSEwKWZvcihuPVtcInByZWNpc2lvblwiLFwicm91bmRpbmdcIixcInRvRXhwTmVnXCIsXCJ0b0V4cFBvc1wiLFwibWF4RVwiLFwibWluRVwiLFwibW9kdWxvXCIsXCJjcnlwdG9cIl0sdD0wO3Q8bi5sZW5ndGg7KWUuaGFzT3duUHJvcGVydHkocj1uW3QrK10pfHwoZVtyXT10aGlzW3JdKTtyZXR1cm4gaS5jb25maWcoZSksaX1mdW5jdGlvbiBEYyhlLHQpe3JldHVybiBuZXcgdGhpcyhlKS5kaXYodCl9ZnVuY3Rpb24gT2MoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmV4cCgpfWZ1bmN0aW9uIF9jKGUpe3JldHVybiBoKGU9bmV3IHRoaXMoZSksZS5lKzEsMyl9ZnVuY3Rpb24gTmMoKXt2YXIgZSx0LHI9bmV3IHRoaXMoMCk7Zm9yKHc9ITEsZT0wO2U8YXJndW1lbnRzLmxlbmd0aDspaWYodD1uZXcgdGhpcyhhcmd1bWVudHNbZSsrXSksdC5kKXIuZCYmKHI9ci5wbHVzKHQudGltZXModCkpKTtlbHNle2lmKHQucylyZXR1cm4gdz0hMCxuZXcgdGhpcygxLzApO3I9dH1yZXR1cm4gdz0hMCxyLnNxcnQoKX1mdW5jdGlvbiBQcyhlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHplfHxlJiZlLnRvU3RyaW5nVGFnPT09QXN8fCExfWZ1bmN0aW9uIExjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5sbigpfWZ1bmN0aW9uICRjKGUsdCl7cmV0dXJuIG5ldyB0aGlzKGUpLmxvZyh0KX1mdW5jdGlvbiBxYyhlKXtyZXR1cm4gbmV3IHRoaXMoZSkubG9nKDIpfWZ1bmN0aW9uIFZjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5sb2coMTApfWZ1bmN0aW9uIGpjKCl7cmV0dXJuIElzKHRoaXMsYXJndW1lbnRzLFwibHRcIil9ZnVuY3Rpb24gQmMoKXtyZXR1cm4gSXModGhpcyxhcmd1bWVudHMsXCJndFwiKX1mdW5jdGlvbiBVYyhlLHQpe3JldHVybiBuZXcgdGhpcyhlKS5tb2QodCl9ZnVuY3Rpb24gS2MoZSx0KXtyZXR1cm4gbmV3IHRoaXMoZSkubXVsKHQpfWZ1bmN0aW9uIFFjKGUsdCl7cmV0dXJuIG5ldyB0aGlzKGUpLnBvdyh0KX1mdW5jdGlvbiBHYyhlKXt2YXIgdCxyLG4saSxvPTAscz1uZXcgdGhpcygxKSxhPVtdO2lmKGU9PT12b2lkIDA/ZT10aGlzLnByZWNpc2lvbjpzZShlLDEsJGUpLG49TWF0aC5jZWlsKGUvYiksdGhpcy5jcnlwdG8paWYoY3J5cHRvLmdldFJhbmRvbVZhbHVlcylmb3IodD1jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheShuKSk7bzxuOylpPXRbb10saT49NDI5ZTc/dFtvXT1jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF06YVtvKytdPWklMWU3O2Vsc2UgaWYoY3J5cHRvLnJhbmRvbUJ5dGVzKXtmb3IodD1jcnlwdG8ucmFuZG9tQnl0ZXMobio9NCk7bzxuOylpPXRbb10rKHRbbysxXTw8OCkrKHRbbysyXTw8MTYpKygodFtvKzNdJjEyNyk8PDI0KSxpPj0yMTRlNz9jcnlwdG8ucmFuZG9tQnl0ZXMoNCkuY29weSh0LG8pOihhLnB1c2goaSUxZTcpLG8rPTQpO289bi80fWVsc2UgdGhyb3cgRXJyb3IoQ3MpO2Vsc2UgZm9yKDtvPG47KWFbbysrXT1NYXRoLnJhbmRvbSgpKjFlN3wwO2ZvcihuPWFbLS1vXSxlJT1iLG4mJmUmJihpPWooMTAsYi1lKSxhW29dPShuL2l8MCkqaSk7YVtvXT09PTA7by0tKWEucG9wKCk7aWYobzwwKXI9MCxhPVswXTtlbHNle2ZvcihyPS0xO2FbMF09PT0wO3ItPWIpYS5zaGlmdCgpO2ZvcihuPTEsaT1hWzBdO2k+PTEwO2kvPTEwKW4rKztuPGImJihyLT1iLW4pfXJldHVybiBzLmU9cixzLmQ9YSxzfWZ1bmN0aW9uIEpjKGUpe3JldHVybiBoKGU9bmV3IHRoaXMoZSksZS5lKzEsdGhpcy5yb3VuZGluZyl9ZnVuY3Rpb24gSGMoZSl7cmV0dXJuIGU9bmV3IHRoaXMoZSksZS5kP2UuZFswXT9lLnM6MCplLnM6ZS5zfHxOYU59ZnVuY3Rpb24gV2MoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLnNpbigpfWZ1bmN0aW9uIHpjKGUpe3JldHVybiBuZXcgdGhpcyhlKS5zaW5oKCl9ZnVuY3Rpb24gWWMoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLnNxcnQoKX1mdW5jdGlvbiBaYyhlLHQpe3JldHVybiBuZXcgdGhpcyhlKS5zdWIodCl9ZnVuY3Rpb24gWGMoKXt2YXIgZT0wLHQ9YXJndW1lbnRzLHI9bmV3IHRoaXModFtlXSk7Zm9yKHc9ITE7ci5zJiYrK2U8dC5sZW5ndGg7KXI9ci5wbHVzKHRbZV0pO3JldHVybiB3PSEwLGgocix0aGlzLnByZWNpc2lvbix0aGlzLnJvdW5kaW5nKX1mdW5jdGlvbiBlcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkudGFuKCl9ZnVuY3Rpb24gdHAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLnRhbmgoKX1mdW5jdGlvbiBycChlKXtyZXR1cm4gaChlPW5ldyB0aGlzKGUpLGUuZSsxLDEpfW1bU3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpXT1tLnRvU3RyaW5nO21bU3ltYm9sLnRvU3RyaW5nVGFnXT1cIkRlY2ltYWxcIjt2YXIgemU9bS5jb25zdHJ1Y3Rvcj1Ecyh4aSk7S3I9bmV3IHplKEtyKTtRcj1uZXcgemUoUXIpO3ZhciBQZT16ZTtmdW5jdGlvbiBodChlKXtyZXR1cm4gemUuaXNEZWNpbWFsKGUpPyEwOmUhPT1udWxsJiZ0eXBlb2YgZT09XCJvYmplY3RcIiYmdHlwZW9mIGUucz09XCJudW1iZXJcIiYmdHlwZW9mIGUuZT09XCJudW1iZXJcIiYmdHlwZW9mIGUudG9GaXhlZD09XCJmdW5jdGlvblwiJiZBcnJheS5pc0FycmF5KGUuZCl9dmFyIEh0PWNsYXNze2NvbnN0cnVjdG9yKHQscixuLGksbyl7dGhpcy5tb2RlbE5hbWU9dCx0aGlzLm5hbWU9cix0aGlzLnR5cGVOYW1lPW4sdGhpcy5pc0xpc3Q9aSx0aGlzLmlzRW51bT1vfV90b0dyYXBoUUxJbnB1dFR5cGUoKXtsZXQgdD10aGlzLmlzTGlzdD9cIkxpc3RcIjpcIlwiLHI9dGhpcy5pc0VudW0/XCJFbnVtXCI6XCJcIjtyZXR1cm5gJHt0fSR7cn0ke3RoaXMudHlwZU5hbWV9RmllbGRSZWZJbnB1dDwke3RoaXMubW9kZWxOYW1lfT5gfX07ZnVuY3Rpb24geHQoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBIdH12YXIgenI9Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy52YWx1ZT10fXdyaXRlKHQpe3Qud3JpdGUodGhpcy52YWx1ZSl9bWFya0FzRXJyb3IoKXt0aGlzLnZhbHVlLm1hcmtBc0Vycm9yKCl9fTt2YXIgWXI9ZT0+ZSxacj17Ym9sZDpZcixyZWQ6WXIsZ3JlZW46WXIsZGltOllyLGVuYWJsZWQ6ITF9LE9zPXtib2xkOm5lLHJlZDptZSxncmVlbjpHZSxkaW06RmUsZW5hYmxlZDohMH0sYnQ9e3dyaXRlKGUpe2Uud3JpdGVMaW5lKFwiLFwiKX19O3ZhciB2ZT1jbGFzc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLmNvbnRlbnRzPXQ7dGhpcy5pc1VuZGVybGluZWQ9ITE7dGhpcy5jb2xvcj10PT50fXVuZGVybGluZSgpe3JldHVybiB0aGlzLmlzVW5kZXJsaW5lZD0hMCx0aGlzfXNldENvbG9yKHQpe3JldHVybiB0aGlzLmNvbG9yPXQsdGhpc313cml0ZSh0KXtsZXQgcj10LmdldEN1cnJlbnRMaW5lTGVuZ3RoKCk7dC53cml0ZSh0aGlzLmNvbG9yKHRoaXMuY29udGVudHMpKSx0aGlzLmlzVW5kZXJsaW5lZCYmdC5hZnRlck5leHROZXdsaW5lKCgpPT57dC53cml0ZShcIiBcIi5yZXBlYXQocikpLndyaXRlTGluZSh0aGlzLmNvbG9yKFwiflwiLnJlcGVhdCh0aGlzLmNvbnRlbnRzLmxlbmd0aCkpKX0pfX07dmFyIHFlPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5oYXNFcnJvcj0hMX1tYXJrQXNFcnJvcigpe3JldHVybiB0aGlzLmhhc0Vycm9yPSEwLHRoaXN9fTt2YXIgRXQ9Y2xhc3MgZXh0ZW5kcyBxZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyk7dGhpcy5pdGVtcz1bXX1hZGRJdGVtKHIpe3JldHVybiB0aGlzLml0ZW1zLnB1c2gobmV3IHpyKHIpKSx0aGlzfWdldEZpZWxkKHIpe3JldHVybiB0aGlzLml0ZW1zW3JdfWdldFByaW50V2lkdGgoKXtyZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGg9PT0wPzI6TWF0aC5tYXgoLi4udGhpcy5pdGVtcy5tYXAobj0+bi52YWx1ZS5nZXRQcmludFdpZHRoKCkpKSsyfXdyaXRlKHIpe2lmKHRoaXMuaXRlbXMubGVuZ3RoPT09MCl7dGhpcy53cml0ZUVtcHR5KHIpO3JldHVybn10aGlzLndyaXRlV2l0aEl0ZW1zKHIpfXdyaXRlRW1wdHkocil7bGV0IG49bmV3IHZlKFwiW11cIik7dGhpcy5oYXNFcnJvciYmbi5zZXRDb2xvcihyLmNvbnRleHQuY29sb3JzLnJlZCkudW5kZXJsaW5lKCksci53cml0ZShuKX13cml0ZVdpdGhJdGVtcyhyKXtsZXR7Y29sb3JzOm59PXIuY29udGV4dDtyLndyaXRlTGluZShcIltcIikud2l0aEluZGVudCgoKT0+ci53cml0ZUpvaW5lZChidCx0aGlzLml0ZW1zKS5uZXdMaW5lKCkpLndyaXRlKFwiXVwiKSx0aGlzLmhhc0Vycm9yJiZyLmFmdGVyTmV4dE5ld2xpbmUoKCk9PntyLndyaXRlTGluZShuLnJlZChcIn5cIi5yZXBlYXQodGhpcy5nZXRQcmludFdpZHRoKCkpKSl9KX19O3ZhciBfcz1cIjogXCIsWHI9Y2xhc3N7Y29uc3RydWN0b3IodCxyKXt0aGlzLm5hbWU9dDt0aGlzLnZhbHVlPXI7dGhpcy5oYXNFcnJvcj0hMX1tYXJrQXNFcnJvcigpe3RoaXMuaGFzRXJyb3I9ITB9Z2V0UHJpbnRXaWR0aCgpe3JldHVybiB0aGlzLm5hbWUubGVuZ3RoK3RoaXMudmFsdWUuZ2V0UHJpbnRXaWR0aCgpK19zLmxlbmd0aH13cml0ZSh0KXtsZXQgcj1uZXcgdmUodGhpcy5uYW1lKTt0aGlzLmhhc0Vycm9yJiZyLnVuZGVybGluZSgpLnNldENvbG9yKHQuY29udGV4dC5jb2xvcnMucmVkKSx0LndyaXRlKHIpLndyaXRlKF9zKS53cml0ZSh0aGlzLnZhbHVlKX19O3ZhciBRPWNsYXNzIGUgZXh0ZW5kcyBxZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyk7dGhpcy5maWVsZHM9e307dGhpcy5zdWdnZXN0aW9ucz1bXX1hZGRGaWVsZChyKXt0aGlzLmZpZWxkc1tyLm5hbWVdPXJ9YWRkU3VnZ2VzdGlvbihyKXt0aGlzLnN1Z2dlc3Rpb25zLnB1c2gocil9Z2V0RmllbGQocil7cmV0dXJuIHRoaXMuZmllbGRzW3JdfWdldERlZXBGaWVsZChyKXtsZXRbbiwuLi5pXT1yLG89dGhpcy5nZXRGaWVsZChuKTtpZighbylyZXR1cm47bGV0IHM9bztmb3IobGV0IGEgb2YgaSl7bGV0IGw7aWYocy52YWx1ZSBpbnN0YW5jZW9mIGU/bD1zLnZhbHVlLmdldEZpZWxkKGEpOnMudmFsdWUgaW5zdGFuY2VvZiBFdCYmKGw9cy52YWx1ZS5nZXRGaWVsZChOdW1iZXIoYSkpKSwhbClyZXR1cm47cz1sfXJldHVybiBzfWdldERlZXBGaWVsZFZhbHVlKHIpe3JldHVybiByLmxlbmd0aD09PTA/dGhpczp0aGlzLmdldERlZXBGaWVsZChyKT8udmFsdWV9aGFzRmllbGQocil7cmV0dXJuISF0aGlzLmdldEZpZWxkKHIpfXJlbW92ZUFsbEZpZWxkcygpe3RoaXMuZmllbGRzPXt9fXJlbW92ZUZpZWxkKHIpe2RlbGV0ZSB0aGlzLmZpZWxkc1tyXX1nZXRGaWVsZHMoKXtyZXR1cm4gdGhpcy5maWVsZHN9aXNFbXB0eSgpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykubGVuZ3RoPT09MH1nZXRGaWVsZFZhbHVlKHIpe3JldHVybiB0aGlzLmdldEZpZWxkKHIpPy52YWx1ZX1nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUocil7bGV0IG49dGhpcztmb3IobGV0IGkgb2Ygcil7aWYoIShuIGluc3RhbmNlb2YgZSkpcmV0dXJuO2xldCBvPW4uZ2V0U3ViU2VsZWN0aW9uVmFsdWUoaSk7aWYoIW8pcmV0dXJuO249b31yZXR1cm4gbn1nZXREZWVwU2VsZWN0aW9uUGFyZW50KHIpe2xldCBuPXRoaXMuZ2V0U2VsZWN0aW9uUGFyZW50KCk7aWYoIW4pcmV0dXJuO2xldCBpPW47Zm9yKGxldCBvIG9mIHIpe2xldCBzPWkudmFsdWUuZ2V0RmllbGRWYWx1ZShvKTtpZighc3x8IShzIGluc3RhbmNlb2YgZSkpcmV0dXJuO2xldCBhPXMuZ2V0U2VsZWN0aW9uUGFyZW50KCk7aWYoIWEpcmV0dXJuO2k9YX1yZXR1cm4gaX1nZXRTZWxlY3Rpb25QYXJlbnQoKXtsZXQgcj10aGlzLmdldEZpZWxkKFwic2VsZWN0XCIpO2lmKHI/LnZhbHVlIGluc3RhbmNlb2YgZSlyZXR1cm57a2luZDpcInNlbGVjdFwiLHZhbHVlOnIudmFsdWV9O2xldCBuPXRoaXMuZ2V0RmllbGQoXCJpbmNsdWRlXCIpO2lmKG4/LnZhbHVlIGluc3RhbmNlb2YgZSlyZXR1cm57a2luZDpcImluY2x1ZGVcIix2YWx1ZTpuLnZhbHVlfX1nZXRTdWJTZWxlY3Rpb25WYWx1ZShyKXtyZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25QYXJlbnQoKT8udmFsdWUuZmllbGRzW3JdLnZhbHVlfWdldFByaW50V2lkdGgoKXtsZXQgcj1PYmplY3QudmFsdWVzKHRoaXMuZmllbGRzKTtyZXR1cm4gci5sZW5ndGg9PTA/MjpNYXRoLm1heCguLi5yLm1hcChpPT5pLmdldFByaW50V2lkdGgoKSkpKzJ9d3JpdGUocil7bGV0IG49T2JqZWN0LnZhbHVlcyh0aGlzLmZpZWxkcyk7aWYobi5sZW5ndGg9PT0wJiZ0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aD09PTApe3RoaXMud3JpdGVFbXB0eShyKTtyZXR1cm59dGhpcy53cml0ZVdpdGhDb250ZW50cyhyLG4pfXdyaXRlRW1wdHkocil7bGV0IG49bmV3IHZlKFwie31cIik7dGhpcy5oYXNFcnJvciYmbi5zZXRDb2xvcihyLmNvbnRleHQuY29sb3JzLnJlZCkudW5kZXJsaW5lKCksci53cml0ZShuKX13cml0ZVdpdGhDb250ZW50cyhyLG4pe3Iud3JpdGVMaW5lKFwie1wiKS53aXRoSW5kZW50KCgpPT57ci53cml0ZUpvaW5lZChidCxbLi4ubiwuLi50aGlzLnN1Z2dlc3Rpb25zXSkubmV3TGluZSgpfSksci53cml0ZShcIn1cIiksdGhpcy5oYXNFcnJvciYmci5hZnRlck5leHROZXdsaW5lKCgpPT57ci53cml0ZUxpbmUoci5jb250ZXh0LmNvbG9ycy5yZWQoXCJ+XCIucmVwZWF0KHRoaXMuZ2V0UHJpbnRXaWR0aCgpKSkpfSl9fTt2YXIgRz1jbGFzcyBleHRlbmRzIHFle2NvbnN0cnVjdG9yKHIpe3N1cGVyKCk7dGhpcy50ZXh0PXJ9Z2V0UHJpbnRXaWR0aCgpe3JldHVybiB0aGlzLnRleHQubGVuZ3RofXdyaXRlKHIpe2xldCBuPW5ldyB2ZSh0aGlzLnRleHQpO3RoaXMuaGFzRXJyb3ImJm4udW5kZXJsaW5lKCkuc2V0Q29sb3Ioci5jb250ZXh0LmNvbG9ycy5yZWQpLHIud3JpdGUobil9fTt2YXIgdmk9Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy5lcnJvck1lc3NhZ2VzPVtdO3RoaXMuYXJndW1lbnRzPXR9d3JpdGUodCl7dC53cml0ZSh0aGlzLmFyZ3VtZW50cyl9YWRkRXJyb3JNZXNzYWdlKHQpe3RoaXMuZXJyb3JNZXNzYWdlcy5wdXNoKHQpfXJlbmRlckFsbE1lc3NhZ2VzKHQpe3JldHVybiB0aGlzLmVycm9yTWVzc2FnZXMubWFwKHI9PnIodCkpLmpvaW4oYFxuYCl9fTtmdW5jdGlvbiBlbihlKXtyZXR1cm4gbmV3IHZpKE5zKGUpKX1mdW5jdGlvbiBOcyhlKXtsZXQgdD1uZXcgUTtmb3IobGV0W3Isbl1vZiBPYmplY3QuZW50cmllcyhlKSl7bGV0IGk9bmV3IFhyKHIsTHMobikpO3QuYWRkRmllbGQoaSl9cmV0dXJuIHR9ZnVuY3Rpb24gTHMoZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpcmV0dXJuIG5ldyBHKEpTT04uc3RyaW5naWZ5KGUpKTtpZih0eXBlb2YgZT09XCJudW1iZXJcInx8dHlwZW9mIGU9PVwiYm9vbGVhblwiKXJldHVybiBuZXcgRyhTdHJpbmcoZSkpO2lmKHR5cGVvZiBlPT1cImJpZ2ludFwiKXJldHVybiBuZXcgRyhgJHtlfW5gKTtpZihlPT09bnVsbClyZXR1cm4gbmV3IEcoXCJudWxsXCIpO2lmKGU9PT12b2lkIDApcmV0dXJuIG5ldyBHKFwidW5kZWZpbmVkXCIpO2lmKGh0KGUpKXJldHVybiBuZXcgRyhgbmV3IFByaXNtYS5EZWNpbWFsKFwiJHtlLnRvRml4ZWQoKX1cIilgKTtpZihlIGluc3RhbmNlb2YgVWludDhBcnJheSlyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGUpP25ldyBHKGBCdWZmZXIuYWxsb2MoJHtlLmJ5dGVMZW5ndGh9KWApOm5ldyBHKGBuZXcgVWludDhBcnJheSgke2UuYnl0ZUxlbmd0aH0pYCk7aWYoZSBpbnN0YW5jZW9mIERhdGUpe2xldCB0PUJyKGUpP2UudG9JU09TdHJpbmcoKTpcIkludmFsaWQgRGF0ZVwiO3JldHVybiBuZXcgRyhgbmV3IERhdGUoXCIke3R9XCIpYCl9cmV0dXJuIGUgaW5zdGFuY2VvZiB4ZT9uZXcgRyhgUHJpc21hLiR7ZS5fZ2V0TmFtZSgpfWApOnh0KGUpP25ldyBHKGBwcmlzbWEuJHtsbyhlLm1vZGVsTmFtZSl9LiRmaWVsZHMuJHtlLm5hbWV9YCk6QXJyYXkuaXNBcnJheShlKT9pcChlKTp0eXBlb2YgZT09XCJvYmplY3RcIj9OcyhlKTpuZXcgRyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpfWZ1bmN0aW9uIGlwKGUpe2xldCB0PW5ldyBFdDtmb3IobGV0IHIgb2YgZSl0LmFkZEl0ZW0oTHMocikpO3JldHVybiB0fWZ1bmN0aW9uICRzKGUpe2lmKGU9PT12b2lkIDApcmV0dXJuXCJcIjtsZXQgdD1lbihlKTtyZXR1cm4gbmV3IG10KDAse2NvbG9yczpacn0pLndyaXRlKHQpLnRvU3RyaW5nKCl9dmFyIFd0PVwiPHVua25vd24+XCI7ZnVuY3Rpb24gcXMoZSl7dmFyIHQ9ZS5zcGxpdChgXG5gKTtyZXR1cm4gdC5yZWR1Y2UoZnVuY3Rpb24ocixuKXt2YXIgaT1hcChuKXx8dXAobil8fGRwKG4pfHx5cChuKXx8ZnAobik7cmV0dXJuIGkmJnIucHVzaChpKSxyfSxbXSl9dmFyIG9wPS9eXFxzKmF0ICguKj8pID9cXCgoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWUtZXh0ZW5zaW9ufG5hdGl2ZXxldmFsfHdlYnBhY2t8PGFub255bW91cz58XFwvfFthLXpdOlxcXFx8XFxcXFxcXFwpLio/KSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xcKT9cXHMqJC9pLHNwPS9cXCgoXFxTKikoPzo6KFxcZCspKSg/OjooXFxkKykpXFwpLztmdW5jdGlvbiBhcChlKXt2YXIgdD1vcC5leGVjKGUpO2lmKCF0KXJldHVybiBudWxsO3ZhciByPXRbMl0mJnRbMl0uaW5kZXhPZihcIm5hdGl2ZVwiKT09PTAsbj10WzJdJiZ0WzJdLmluZGV4T2YoXCJldmFsXCIpPT09MCxpPXNwLmV4ZWModFsyXSk7cmV0dXJuIG4mJmkhPW51bGwmJih0WzJdPWlbMV0sdFszXT1pWzJdLHRbNF09aVszXSkse2ZpbGU6cj9udWxsOnRbMl0sbWV0aG9kTmFtZTp0WzFdfHxXdCxhcmd1bWVudHM6cj9bdFsyXV06W10sbGluZU51bWJlcjp0WzNdPyt0WzNdOm51bGwsY29sdW1uOnRbNF0/K3RbNF06bnVsbH19dmFyIGxwPS9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT8uKykgKT9cXCg/KCg/OmZpbGV8bXMtYXBweHxodHRwcz98d2VicGFja3xibG9iKTouKj8pOihcXGQrKSg/OjooXFxkKykpP1xcKT9cXHMqJC9pO2Z1bmN0aW9uIHVwKGUpe3ZhciB0PWxwLmV4ZWMoZSk7cmV0dXJuIHQ/e2ZpbGU6dFsyXSxtZXRob2ROYW1lOnRbMV18fFd0LGFyZ3VtZW50czpbXSxsaW5lTnVtYmVyOit0WzNdLGNvbHVtbjp0WzRdPyt0WzRdOm51bGx9Om51bGx9dmFyIGNwPS9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCkoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWV8d2VicGFja3xyZXNvdXJjZXxcXFtuYXRpdmUpLio/fFteQF0qYnVuZGxlKSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xccyokL2kscHA9LyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2k7ZnVuY3Rpb24gZHAoZSl7dmFyIHQ9Y3AuZXhlYyhlKTtpZighdClyZXR1cm4gbnVsbDt2YXIgcj10WzNdJiZ0WzNdLmluZGV4T2YoXCIgPiBldmFsXCIpPi0xLG49cHAuZXhlYyh0WzNdKTtyZXR1cm4gciYmbiE9bnVsbCYmKHRbM109blsxXSx0WzRdPW5bMl0sdFs1XT1udWxsKSx7ZmlsZTp0WzNdLG1ldGhvZE5hbWU6dFsxXXx8V3QsYXJndW1lbnRzOnRbMl0/dFsyXS5zcGxpdChcIixcIik6W10sbGluZU51bWJlcjp0WzRdPyt0WzRdOm51bGwsY29sdW1uOnRbNV0/K3RbNV06bnVsbH19dmFyIG1wPS9eXFxzKig/OihbXkBdKikoPzpcXCgoLio/KVxcKSk/QCk/KFxcUy4qPyk6KFxcZCspKD86OihcXGQrKSk/XFxzKiQvaTtmdW5jdGlvbiBmcChlKXt2YXIgdD1tcC5leGVjKGUpO3JldHVybiB0P3tmaWxlOnRbM10sbWV0aG9kTmFtZTp0WzFdfHxXdCxhcmd1bWVudHM6W10sbGluZU51bWJlcjordFs0XSxjb2x1bW46dFs1XT8rdFs1XTpudWxsfTpudWxsfXZhciBncD0vXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/W15cXFxcL10rKD86IFxcW2FzIFxcUytcXF0pPykgKT9cXCg/KC4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7ZnVuY3Rpb24geXAoZSl7dmFyIHQ9Z3AuZXhlYyhlKTtyZXR1cm4gdD97ZmlsZTp0WzJdLG1ldGhvZE5hbWU6dFsxXXx8V3QsYXJndW1lbnRzOltdLGxpbmVOdW1iZXI6K3RbM10sY29sdW1uOnRbNF0/K3RbNF06bnVsbH06bnVsbH12YXIgVGk9Y2xhc3N7Z2V0TG9jYXRpb24oKXtyZXR1cm4gbnVsbH19LENpPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5fZXJyb3I9bmV3IEVycm9yfWdldExvY2F0aW9uKCl7bGV0IHQ9dGhpcy5fZXJyb3Iuc3RhY2s7aWYoIXQpcmV0dXJuIG51bGw7bGV0IG49cXModCkuZmluZChpPT57aWYoIWkuZmlsZSlyZXR1cm4hMTtsZXQgbz1uaShpLmZpbGUpO3JldHVybiBvIT09XCI8YW5vbnltb3VzPlwiJiYhby5pbmNsdWRlcyhcIkBwcmlzbWFcIikmJiFvLmluY2x1ZGVzKFwiL3BhY2thZ2VzL2NsaWVudC9zcmMvcnVudGltZS9cIikmJiFvLmVuZHNXaXRoKFwiL3J1bnRpbWUvYmluYXJ5LmpzXCIpJiYhby5lbmRzV2l0aChcIi9ydW50aW1lL2xpYnJhcnkuanNcIikmJiFvLmVuZHNXaXRoKFwiL3J1bnRpbWUvZWRnZS5qc1wiKSYmIW8uZW5kc1dpdGgoXCIvcnVudGltZS9lZGdlLWVzbS5qc1wiKSYmIW8uc3RhcnRzV2l0aChcImludGVybmFsL1wiKSYmIWkubWV0aG9kTmFtZS5pbmNsdWRlcyhcIm5ldyBcIikmJiFpLm1ldGhvZE5hbWUuaW5jbHVkZXMoXCJnZXRDYWxsU2l0ZVwiKSYmIWkubWV0aG9kTmFtZS5pbmNsdWRlcyhcIlByb3h5LlwiKSYmaS5tZXRob2ROYW1lLnNwbGl0KFwiLlwiKS5sZW5ndGg8NH0pO3JldHVybiFufHwhbi5maWxlP251bGw6e2ZpbGVOYW1lOm4uZmlsZSxsaW5lTnVtYmVyOm4ubGluZU51bWJlcixjb2x1bW5OdW1iZXI6bi5jb2x1bW59fX07ZnVuY3Rpb24gVmUoZSl7cmV0dXJuIGU9PT1cIm1pbmltYWxcIj9uZXcgVGk6bmV3IENpfXZhciBWcz17X2F2ZzohMCxfY291bnQ6ITAsX3N1bTohMCxfbWluOiEwLF9tYXg6ITB9O2Z1bmN0aW9uIHd0KGU9e30pe2xldCB0PXhwKGUpO3JldHVybiBPYmplY3QuZW50cmllcyh0KS5yZWR1Y2UoKG4sW2ksb10pPT4oVnNbaV0hPT12b2lkIDA/bi5zZWxlY3RbaV09e3NlbGVjdDpvfTpuW2ldPW8sbikse3NlbGVjdDp7fX0pfWZ1bmN0aW9uIHhwKGU9e30pe3JldHVybiB0eXBlb2YgZS5fY291bnQ9PVwiYm9vbGVhblwiP3suLi5lLF9jb3VudDp7X2FsbDplLl9jb3VudH19OmV9ZnVuY3Rpb24gdG4oZT17fSl7cmV0dXJuIHQ9Pih0eXBlb2YgZS5fY291bnQ9PVwiYm9vbGVhblwiJiYodC5fY291bnQ9dC5fY291bnQuX2FsbCksdCl9ZnVuY3Rpb24ganMoZSx0KXtsZXQgcj10bihlKTtyZXR1cm4gdCh7YWN0aW9uOlwiYWdncmVnYXRlXCIsdW5wYWNrZXI6cixhcmdzTWFwcGVyOnd0fSkoZSl9ZnVuY3Rpb24gYnAoZT17fSl7bGV0e3NlbGVjdDp0LC4uLnJ9PWU7cmV0dXJuIHR5cGVvZiB0PT1cIm9iamVjdFwiP3d0KHsuLi5yLF9jb3VudDp0fSk6d3Qoey4uLnIsX2NvdW50OntfYWxsOiEwfX0pfWZ1bmN0aW9uIEVwKGU9e30pe3JldHVybiB0eXBlb2YgZS5zZWxlY3Q9PVwib2JqZWN0XCI/dD0+dG4oZSkodCkuX2NvdW50OnQ9PnRuKGUpKHQpLl9jb3VudC5fYWxsfWZ1bmN0aW9uIEJzKGUsdCl7cmV0dXJuIHQoe2FjdGlvbjpcImNvdW50XCIsdW5wYWNrZXI6RXAoZSksYXJnc01hcHBlcjpicH0pKGUpfWZ1bmN0aW9uIHdwKGU9e30pe2xldCB0PXd0KGUpO2lmKEFycmF5LmlzQXJyYXkodC5ieSkpZm9yKGxldCByIG9mIHQuYnkpdHlwZW9mIHI9PVwic3RyaW5nXCImJih0LnNlbGVjdFtyXT0hMCk7ZWxzZSB0eXBlb2YgdC5ieT09XCJzdHJpbmdcIiYmKHQuc2VsZWN0W3QuYnldPSEwKTtyZXR1cm4gdH1mdW5jdGlvbiBQcChlPXt9KXtyZXR1cm4gdD0+KHR5cGVvZiBlPy5fY291bnQ9PVwiYm9vbGVhblwiJiZ0LmZvckVhY2gocj0+e3IuX2NvdW50PXIuX2NvdW50Ll9hbGx9KSx0KX1mdW5jdGlvbiBVcyhlLHQpe3JldHVybiB0KHthY3Rpb246XCJncm91cEJ5XCIsdW5wYWNrZXI6UHAoZSksYXJnc01hcHBlcjp3cH0pKGUpfWZ1bmN0aW9uIEtzKGUsdCxyKXtpZih0PT09XCJhZ2dyZWdhdGVcIilyZXR1cm4gbj0+anMobixyKTtpZih0PT09XCJjb3VudFwiKXJldHVybiBuPT5CcyhuLHIpO2lmKHQ9PT1cImdyb3VwQnlcIilyZXR1cm4gbj0+VXMobixyKX1mdW5jdGlvbiBRcyhlLHQpe2xldCByPXQuZmllbGRzLmZpbHRlcihpPT4haS5yZWxhdGlvbk5hbWUpLG49Y2kocixpPT5pLm5hbWUpO3JldHVybiBuZXcgUHJveHkoe30se2dldChpLG8pe2lmKG8gaW4gaXx8dHlwZW9mIG89PVwic3ltYm9sXCIpcmV0dXJuIGlbb107bGV0IHM9bltvXTtpZihzKXJldHVybiBuZXcgSHQoZSxvLHMudHlwZSxzLmlzTGlzdCxzLmtpbmQ9PT1cImVudW1cIil9LC4uLmpyKE9iamVjdC5rZXlzKG4pKX0pfXZhciBHcz1lPT5BcnJheS5pc0FycmF5KGUpP2U6ZS5zcGxpdChcIi5cIiksQWk9KGUsdCk9PkdzKHQpLnJlZHVjZSgocixuKT0+ciYmcltuXSxlKSxKcz0oZSx0LHIpPT5Hcyh0KS5yZWR1Y2VSaWdodCgobixpLG8scyk9Pk9iamVjdC5hc3NpZ24oe30sQWkoZSxzLnNsaWNlKDAsbykpLHtbaV06bn0pLHIpO2Z1bmN0aW9uIHZwKGUsdCl7cmV0dXJuIGU9PT12b2lkIDB8fHQ9PT12b2lkIDA/W106Wy4uLnQsXCJzZWxlY3RcIixlXX1mdW5jdGlvbiBUcChlLHQscil7cmV0dXJuIHQ9PT12b2lkIDA/ZT8/e306SnModCxyLGV8fCEwKX1mdW5jdGlvbiBNaShlLHQscixuLGksbyl7bGV0IGE9ZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbdF0uZmllbGRzLnJlZHVjZSgobCx1KT0+KHsuLi5sLFt1Lm5hbWVdOnV9KSx7fSk7cmV0dXJuIGw9PntsZXQgdT1WZShlLl9lcnJvckZvcm1hdCksYz12cChuLGkpLHA9VHAobCxvLGMpLGQ9cih7ZGF0YVBhdGg6YyxjYWxsc2l0ZTp1fSkocCksZj1DcChlLHQpO3JldHVybiBuZXcgUHJveHkoZCx7Z2V0KHksZyl7aWYoIWYuaW5jbHVkZXMoZykpcmV0dXJuIHlbZ107bGV0IFQ9W2FbZ10udHlwZSxyLGddLEM9W2MscF07cmV0dXJuIE1pKGUsLi4uVCwuLi5DKX0sLi4uanIoWy4uLmYsLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZCldKX0pfX1mdW5jdGlvbiBDcChlLHQpe3JldHVybiBlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1t0XS5maWVsZHMuZmlsdGVyKHI9PnIua2luZD09PVwib2JqZWN0XCIpLm1hcChyPT5yLm5hbWUpfXZhciBYcz1TKGlpKCkpO3ZhciBacz1TKHJlcXVpcmUoXCJmc1wiKSk7dmFyIEhzPXtrZXl3b3JkOkRlLGVudGl0eTpEZSx2YWx1ZTplPT5uZShvdChlKSkscHVuY3R1YXRpb246b3QsZGlyZWN0aXZlOkRlLGZ1bmN0aW9uOkRlLHZhcmlhYmxlOmU9Pm5lKG90KGUpKSxzdHJpbmc6ZT0+bmUoR2UoZSkpLGJvb2xlYW46aGUsbnVtYmVyOkRlLGNvbW1lbnQ6VHJ9O3ZhciBBcD1lPT5lLHJuPXt9LE1wPTAsdj17bWFudWFsOnJuLlByaXNtJiZybi5QcmlzbS5tYW51YWwsZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyOnJuLlByaXNtJiZybi5QcmlzbS5kaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIsdXRpbDp7ZW5jb2RlOmZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiB5ZSl7bGV0IHQ9ZTtyZXR1cm4gbmV3IHllKHQudHlwZSx2LnV0aWwuZW5jb2RlKHQuY29udGVudCksdC5hbGlhcyl9ZWxzZSByZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lLm1hcCh2LnV0aWwuZW5jb2RlKTplLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvXFx1MDBhMC9nLFwiIFwiKX0sdHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxvYmpJZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX2lkfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9faWRcIix7dmFsdWU6KytNcH0pLGUuX19pZH0sY2xvbmU6ZnVuY3Rpb24gZSh0LHIpe2xldCBuLGksbz12LnV0aWwudHlwZSh0KTtzd2l0Y2gocj1yfHx7fSxvKXtjYXNlXCJPYmplY3RcIjppZihpPXYudXRpbC5vYmpJZCh0KSxyW2ldKXJldHVybiByW2ldO249e30scltpXT1uO2ZvcihsZXQgcyBpbiB0KXQuaGFzT3duUHJvcGVydHkocykmJihuW3NdPWUodFtzXSxyKSk7cmV0dXJuIG47Y2FzZVwiQXJyYXlcIjpyZXR1cm4gaT12LnV0aWwub2JqSWQodCkscltpXT9yW2ldOihuPVtdLHJbaV09bix0LmZvckVhY2goZnVuY3Rpb24ocyxhKXtuW2FdPWUocyxyKX0pLG4pO2RlZmF1bHQ6cmV0dXJuIHR9fX0sbGFuZ3VhZ2VzOntleHRlbmQ6ZnVuY3Rpb24oZSx0KXtsZXQgcj12LnV0aWwuY2xvbmUodi5sYW5ndWFnZXNbZV0pO2ZvcihsZXQgbiBpbiB0KXJbbl09dFtuXTtyZXR1cm4gcn0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGUsdCxyLG4pe249bnx8di5sYW5ndWFnZXM7bGV0IGk9bltlXSxvPXt9O2ZvcihsZXQgYSBpbiBpKWlmKGkuaGFzT3duUHJvcGVydHkoYSkpe2lmKGE9PXQpZm9yKGxldCBsIGluIHIpci5oYXNPd25Qcm9wZXJ0eShsKSYmKG9bbF09cltsXSk7ci5oYXNPd25Qcm9wZXJ0eShhKXx8KG9bYV09aVthXSl9bGV0IHM9bltlXTtyZXR1cm4gbltlXT1vLHYubGFuZ3VhZ2VzLkRGUyh2Lmxhbmd1YWdlcyxmdW5jdGlvbihhLGwpe2w9PT1zJiZhIT1lJiYodGhpc1thXT1vKX0pLG99LERGUzpmdW5jdGlvbiBlKHQscixuLGkpe2k9aXx8e307bGV0IG89di51dGlsLm9iaklkO2ZvcihsZXQgcyBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkocykpe3IuY2FsbCh0LHMsdFtzXSxufHxzKTtsZXQgYT10W3NdLGw9di51dGlsLnR5cGUoYSk7bD09PVwiT2JqZWN0XCImJiFpW28oYSldPyhpW28oYSldPSEwLGUoYSxyLG51bGwsaSkpOmw9PT1cIkFycmF5XCImJiFpW28oYSldJiYoaVtvKGEpXT0hMCxlKGEscixzLGkpKX19fSxwbHVnaW5zOnt9LGhpZ2hsaWdodDpmdW5jdGlvbihlLHQscil7bGV0IG49e2NvZGU6ZSxncmFtbWFyOnQsbGFuZ3VhZ2U6cn07cmV0dXJuIHYuaG9va3MucnVuKFwiYmVmb3JlLXRva2VuaXplXCIsbiksbi50b2tlbnM9di50b2tlbml6ZShuLmNvZGUsbi5ncmFtbWFyKSx2Lmhvb2tzLnJ1bihcImFmdGVyLXRva2VuaXplXCIsbikseWUuc3RyaW5naWZ5KHYudXRpbC5lbmNvZGUobi50b2tlbnMpLG4ubGFuZ3VhZ2UpfSxtYXRjaEdyYW1tYXI6ZnVuY3Rpb24oZSx0LHIsbixpLG8scyl7Zm9yKGxldCBnIGluIHIpe2lmKCFyLmhhc093blByb3BlcnR5KGcpfHwhcltnXSljb250aW51ZTtpZihnPT1zKXJldHVybjtsZXQgUD1yW2ddO1A9di51dGlsLnR5cGUoUCk9PT1cIkFycmF5XCI/UDpbUF07Zm9yKGxldCBUPTA7VDxQLmxlbmd0aDsrK1Qpe2xldCBDPVBbVF0seD1DLmluc2lkZSxNPSEhQy5sb29rYmVoaW5kLGNlPSEhQy5ncmVlZHksSj0wLEtlPUMuYWxpYXM7aWYoY2UmJiFDLnBhdHRlcm4uZ2xvYmFsKXtsZXQgJD1DLnBhdHRlcm4udG9TdHJpbmcoKS5tYXRjaCgvW2ltdXldKiQvKVswXTtDLnBhdHRlcm49UmVnRXhwKEMucGF0dGVybi5zb3VyY2UsJCtcImdcIil9Qz1DLnBhdHRlcm58fEM7Zm9yKGxldCAkPW4sej1pOyQ8dC5sZW5ndGg7eis9dFskXS5sZW5ndGgsKyskKXtsZXQgQWU9dFskXTtpZih0Lmxlbmd0aD5lLmxlbmd0aClyZXR1cm47aWYoQWUgaW5zdGFuY2VvZiB5ZSljb250aW51ZTtpZihjZSYmJCE9dC5sZW5ndGgtMSl7Qy5sYXN0SW5kZXg9ejt2YXIgcD1DLmV4ZWMoZSk7aWYoIXApYnJlYWs7dmFyIGM9cC5pbmRleCsoTT9wWzFdLmxlbmd0aDowKSxkPXAuaW5kZXgrcFswXS5sZW5ndGgsYT0kLGw9ejtmb3IobGV0IGs9dC5sZW5ndGg7YTxrJiYobDxkfHwhdFthXS50eXBlJiYhdFthLTFdLmdyZWVkeSk7KythKWwrPXRbYV0ubGVuZ3RoLGM+PWwmJigrKyQsej1sKTtpZih0WyRdaW5zdGFuY2VvZiB5ZSljb250aW51ZTt1PWEtJCxBZT1lLnNsaWNlKHosbCkscC5pbmRleC09en1lbHNle0MubGFzdEluZGV4PTA7dmFyIHA9Qy5leGVjKEFlKSx1PTF9aWYoIXApe2lmKG8pYnJlYWs7Y29udGludWV9TSYmKEo9cFsxXT9wWzFdLmxlbmd0aDowKTt2YXIgYz1wLmluZGV4K0oscD1wWzBdLnNsaWNlKEopLGQ9YytwLmxlbmd0aCxmPUFlLnNsaWNlKDAsYykseT1BZS5zbGljZShkKTtsZXQgWT1bJCx1XTtmJiYoKyskLHorPWYubGVuZ3RoLFkucHVzaChmKSk7bGV0IHR0PW5ldyB5ZShnLHg/di50b2tlbml6ZShwLHgpOnAsS2UscCxjZSk7aWYoWS5wdXNoKHR0KSx5JiZZLnB1c2goeSksQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseSh0LFkpLHUhPTEmJnYubWF0Y2hHcmFtbWFyKGUsdCxyLCQseiwhMCxnKSxvKWJyZWFrfX19fSx0b2tlbml6ZTpmdW5jdGlvbihlLHQpe2xldCByPVtlXSxuPXQucmVzdDtpZihuKXtmb3IobGV0IGkgaW4gbil0W2ldPW5baV07ZGVsZXRlIHQucmVzdH1yZXR1cm4gdi5tYXRjaEdyYW1tYXIoZSxyLHQsMCwwLCExKSxyfSxob29rczp7YWxsOnt9LGFkZDpmdW5jdGlvbihlLHQpe2xldCByPXYuaG9va3MuYWxsO3JbZV09cltlXXx8W10scltlXS5wdXNoKHQpfSxydW46ZnVuY3Rpb24oZSx0KXtsZXQgcj12Lmhvb2tzLmFsbFtlXTtpZighKCFyfHwhci5sZW5ndGgpKWZvcih2YXIgbj0wLGk7aT1yW24rK107KWkodCl9fSxUb2tlbjp5ZX07di5sYW5ndWFnZXMuY2xpa2U9e2NvbW1lbnQ6W3twYXR0ZXJuOi8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9XSxzdHJpbmc6e3BhdHRlcm46LyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxncmVlZHk6ITB9LFwiY2xhc3MtbmFtZVwiOntwYXR0ZXJuOi8oKD86XFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrKXwoPzpjYXRjaFxccytcXCgpKVtcXHcuXFxcXF0rL2ksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9bLlxcXFxdL319LGtleXdvcmQ6L1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sYm9vbGVhbjovXFxiKD86dHJ1ZXxmYWxzZSlcXGIvLGZ1bmN0aW9uOi9cXHcrKD89XFwoKS8sbnVtYmVyOi9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxvcGVyYXRvcjovLS0/fFxcK1xcKz98IT0/PT98PD0/fD49P3w9PT89P3wmJj98XFx8XFx8P3xcXD98XFwqfFxcL3x+fFxcXnwlLyxwdW5jdHVhdGlvbjovW3t9W1xcXTsoKSwuOl0vfTt2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0PXYubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse1wiY2xhc3MtbmFtZVwiOlt2Lmxhbmd1YWdlcy5jbGlrZVtcImNsYXNzLW5hbWVcIl0se3BhdHRlcm46LyhefFteJFxcd1xceEEwLVxcdUZGRkZdKVtfJEEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXC4oPzpwcm90b3R5cGV8Y29uc3RydWN0b3IpKS8sbG9va2JlaGluZDohMH1dLGtleXdvcmQ6W3twYXR0ZXJuOi8oKD86Xnx9KVxccyopKD86Y2F0Y2h8ZmluYWxseSlcXGIvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi5dKVxcYig/OmFzfGFzeW5jKD89XFxzKig/OmZ1bmN0aW9uXFxifFxcKHxbJFxcd1xceEEwLVxcdUZGRkZdfCQpKXxhd2FpdHxicmVha3xjYXNlfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxsb29rYmVoaW5kOiEwfV0sbnVtYmVyOi9cXGIoPzooPzowW3hYXSg/OltcXGRBLUZhLWZdKD86X1tcXGRBLUZhLWZdKT8pK3wwW2JCXSg/OlswMV0oPzpfWzAxXSk/KSt8MFtvT10oPzpbMC03XSg/Ol9bMC03XSk/KSspbj98KD86XFxkKD86X1xcZCk/KStufE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiKD86XFxkKD86X1xcZCk/KStcXC4/KD86XFxkKD86X1xcZCk/KSp8XFxCXFwuKD86XFxkKD86X1xcZCk/KSspKD86W0VlXVsrLV0/KD86XFxkKD86X1xcZCk/KSspPy8sZnVuY3Rpb246L1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqKD86XFwuXFxzKig/OmFwcGx5fGJpbmR8Y2FsbClcXHMqKT9cXCgpLyxvcGVyYXRvcjovLVstPV0/fFxcK1srPV0/fCE9Pz0/fDw8Pz0/fD4+Pz4/PT98PSg/Oj09P3w+KT98JlsmPV0/fFxcfFt8PV0/fFxcKlxcKj89P3xcXC89P3x+fFxcXj0/fCU9P3xcXD98XFwuezN9L30pO3YubGFuZ3VhZ2VzLmphdmFzY3JpcHRbXCJjbGFzcy1uYW1lXCJdWzBdLnBhdHRlcm49LyhcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8bmV3KVxccyspW1xcdy5cXFxcXSsvO3YubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImphdmFzY3JpcHRcIixcImtleXdvcmRcIix7cmVnZXg6e3BhdHRlcm46LygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc10pXFxzKilcXC8oXFxbKD86W15cXF1cXFxcXFxyXFxuXXxcXFxcLikqXXxcXFxcLnxbXi9cXFxcXFxbXFxyXFxuXSkrXFwvW2dpbXl1c117MCw2fSg/PVxccyooJHxbXFxyXFxuLC47fSlcXF1dKSkvLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwfSxcImZ1bmN0aW9uLXZhcmlhYmxlXCI6e3BhdHRlcm46L1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqWz06XVxccyooPzphc3luY1xccyopPyg/OlxcYmZ1bmN0aW9uXFxifCg/OlxcKCg/OlteKCldfFxcKFteKCldKlxcKSkqXFwpfFtfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopXFxzKj0+KSkvLGFsaWFzOlwiZnVuY3Rpb25cIn0scGFyYW1ldGVyOlt7cGF0dGVybjovKGZ1bmN0aW9uKD86XFxzK1tfJEEtWmEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopP1xccypcXChcXHMqKSg/IVxccykoPzpbXigpXXxcXChbXigpXSpcXCkpKz8oPz1cXHMqXFwpKS8sbG9va2JlaGluZDohMCxpbnNpZGU6di5sYW5ndWFnZXMuamF2YXNjcmlwdH0se3BhdHRlcm46L1tfJGEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqPT4pL2ksaW5zaWRlOnYubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKVxccyo9PikvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOnYubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oKD86XFxifFxcc3xeKSg/ISg/OmFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKSg/IVskXFx3XFx4QTAtXFx1RkZGRl0pKSg/OltfJEEtWmEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSpcXHMqKVxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXClcXHMqXFx7KS8sbG9va2JlaGluZDohMCxpbnNpZGU6di5sYW5ndWFnZXMuamF2YXNjcmlwdH1dLGNvbnN0YW50Oi9cXGJbQS1aXSg/OltBLVpfXXxcXGR4PykqXFxiL30pO3YubGFuZ3VhZ2VzLm1hcmt1cCYmdi5sYW5ndWFnZXMubWFya3VwLnRhZy5hZGRJbmxpbmVkKFwic2NyaXB0XCIsXCJqYXZhc2NyaXB0XCIpO3YubGFuZ3VhZ2VzLmpzPXYubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7di5sYW5ndWFnZXMudHlwZXNjcmlwdD12Lmxhbmd1YWdlcy5leHRlbmQoXCJqYXZhc2NyaXB0XCIse2tleXdvcmQ6L1xcYig/OmFic3RyYWN0fGFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29uc3RydWN0b3J8Y29udGludWV8ZGVidWdnZXJ8ZGVjbGFyZXxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8aXN8a2V5b2Z8bGV0fG1vZHVsZXxuYW1lc3BhY2V8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVhZG9ubHl8cmV0dXJufHJlcXVpcmV8c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLGJ1aWx0aW46L1xcYig/OnN0cmluZ3xGdW5jdGlvbnxhbnl8bnVtYmVyfGJvb2xlYW58QXJyYXl8c3ltYm9sfGNvbnNvbGV8UHJvbWlzZXx1bmtub3dufG5ldmVyKVxcYi99KTt2Lmxhbmd1YWdlcy50cz12Lmxhbmd1YWdlcy50eXBlc2NyaXB0O2Z1bmN0aW9uIHllKGUsdCxyLG4saSl7dGhpcy50eXBlPWUsdGhpcy5jb250ZW50PXQsdGhpcy5hbGlhcz1yLHRoaXMubGVuZ3RoPShufHxcIlwiKS5sZW5ndGh8MCx0aGlzLmdyZWVkeT0hIWl9eWUuc3RyaW5naWZ5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR5cGVvZiBlPT1cInN0cmluZ1wiP2U6QXJyYXkuaXNBcnJheShlKT9lLm1hcChmdW5jdGlvbihyKXtyZXR1cm4geWUuc3RyaW5naWZ5KHIsdCl9KS5qb2luKFwiXCIpOlJwKGUudHlwZSkoZS5jb250ZW50KX07ZnVuY3Rpb24gUnAoZSl7cmV0dXJuIEhzW2VdfHxBcH1mdW5jdGlvbiBXcyhlKXtyZXR1cm4gU3AoZSx2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0KX1mdW5jdGlvbiBTcChlLHQpe3JldHVybiB2LnRva2VuaXplKGUsdCkubWFwKG49PnllLnN0cmluZ2lmeShuKSkuam9pbihcIlwiKX12YXIgenM9UyhlcygpKTtmdW5jdGlvbiBZcyhlKXtyZXR1cm4oMCx6cy5kZWZhdWx0KShlKX12YXIgbm49Y2xhc3MgZXtzdGF0aWMgcmVhZCh0KXtsZXQgcjt0cnl7cj1acy5kZWZhdWx0LnJlYWRGaWxlU3luYyh0LFwidXRmLThcIil9Y2F0Y2h7cmV0dXJuIG51bGx9cmV0dXJuIGUuZnJvbUNvbnRlbnQocil9c3RhdGljIGZyb21Db250ZW50KHQpe2xldCByPXQuc3BsaXQoL1xccj9cXG4vKTtyZXR1cm4gbmV3IGUoMSxyKX1jb25zdHJ1Y3Rvcih0LHIpe3RoaXMuZmlyc3RMaW5lTnVtYmVyPXQsdGhpcy5saW5lcz1yfWdldCBsYXN0TGluZU51bWJlcigpe3JldHVybiB0aGlzLmZpcnN0TGluZU51bWJlcit0aGlzLmxpbmVzLmxlbmd0aC0xfW1hcExpbmVBdCh0LHIpe2lmKHQ8dGhpcy5maXJzdExpbmVOdW1iZXJ8fHQ+dGhpcy5saW5lcy5sZW5ndGgrdGhpcy5maXJzdExpbmVOdW1iZXIpcmV0dXJuIHRoaXM7bGV0IG49dC10aGlzLmZpcnN0TGluZU51bWJlcixpPVsuLi50aGlzLmxpbmVzXTtyZXR1cm4gaVtuXT1yKGlbbl0pLG5ldyBlKHRoaXMuZmlyc3RMaW5lTnVtYmVyLGkpfW1hcExpbmVzKHQpe3JldHVybiBuZXcgZSh0aGlzLmZpcnN0TGluZU51bWJlcix0aGlzLmxpbmVzLm1hcCgocixuKT0+dChyLHRoaXMuZmlyc3RMaW5lTnVtYmVyK24pKSl9bGluZUF0KHQpe3JldHVybiB0aGlzLmxpbmVzW3QtdGhpcy5maXJzdExpbmVOdW1iZXJdfXByZXBlbmRTeW1ib2xBdCh0LHIpe3JldHVybiB0aGlzLm1hcExpbmVzKChuLGkpPT5pPT09dD9gJHtyfSAke259YDpgICAke259YCl9c2xpY2UodCxyKXtsZXQgbj10aGlzLmxpbmVzLnNsaWNlKHQtMSxyKS5qb2luKGBcbmApO3JldHVybiBuZXcgZSh0LFlzKG4pLnNwbGl0KGBcbmApKX1oaWdobGlnaHQoKXtsZXQgdD1Xcyh0aGlzLnRvU3RyaW5nKCkpO3JldHVybiBuZXcgZSh0aGlzLmZpcnN0TGluZU51bWJlcix0LnNwbGl0KGBcbmApKX10b1N0cmluZygpe3JldHVybiB0aGlzLmxpbmVzLmpvaW4oYFxuYCl9fTt2YXIgSXA9e3JlZDptZSxncmF5OlRyLGRpbTpGZSxib2xkOm5lLHVuZGVybGluZTp0ZSxoaWdobGlnaHRTb3VyY2U6ZT0+ZS5oaWdobGlnaHQoKX0sa3A9e3JlZDplPT5lLGdyYXk6ZT0+ZSxkaW06ZT0+ZSxib2xkOmU9PmUsdW5kZXJsaW5lOmU9PmUsaGlnaGxpZ2h0U291cmNlOmU9PmV9O2Z1bmN0aW9uIEZwKHtjYWxsc2l0ZTplLG1lc3NhZ2U6dCxvcmlnaW5hbE1ldGhvZDpyLGlzUGFuaWM6bixjYWxsQXJndW1lbnRzOml9LG8pe2xldCBzPXtmdW5jdGlvbk5hbWU6YHByaXNtYS4ke3J9KClgLG1lc3NhZ2U6dCxpc1BhbmljOm4/PyExLGNhbGxBcmd1bWVudHM6aX07aWYoIWV8fHR5cGVvZiB3aW5kb3c8XCJ1XCJ8fHByb2Nlc3MuZW52Lk5PREVfRU5WPT09XCJwcm9kdWN0aW9uXCIpcmV0dXJuIHM7bGV0IGE9ZS5nZXRMb2NhdGlvbigpO2lmKCFhfHwhYS5saW5lTnVtYmVyfHwhYS5jb2x1bW5OdW1iZXIpcmV0dXJuIHM7bGV0IGw9TWF0aC5tYXgoMSxhLmxpbmVOdW1iZXItMyksdT1ubi5yZWFkKGEuZmlsZU5hbWUpPy5zbGljZShsLGEubGluZU51bWJlciksYz11Py5saW5lQXQoYS5saW5lTnVtYmVyKTtpZih1JiZjKXtsZXQgcD1PcChjKSxkPURwKGMpO2lmKCFkKXJldHVybiBzO3MuZnVuY3Rpb25OYW1lPWAke2QuY29kZX0pYCxzLmxvY2F0aW9uPWEsbnx8KHU9dS5tYXBMaW5lQXQoYS5saW5lTnVtYmVyLHk9Pnkuc2xpY2UoMCxkLm9wZW5pbmdCcmFjZUluZGV4KSkpLHU9by5oaWdobGlnaHRTb3VyY2UodSk7bGV0IGY9U3RyaW5nKHUubGFzdExpbmVOdW1iZXIpLmxlbmd0aDtpZihzLmNvbnRleHRMaW5lcz11Lm1hcExpbmVzKCh5LGcpPT5vLmdyYXkoU3RyaW5nKGcpLnBhZFN0YXJ0KGYpKStcIiBcIit5KS5tYXBMaW5lcyh5PT5vLmRpbSh5KSkucHJlcGVuZFN5bWJvbEF0KGEubGluZU51bWJlcixvLmJvbGQoby5yZWQoXCJcXHUyMTkyXCIpKSksaSl7bGV0IHk9cCtmKzE7eSs9MixzLmNhbGxBcmd1bWVudHM9KDAsWHMuZGVmYXVsdCkoaSx5KS5zbGljZSh5KX19cmV0dXJuIHN9ZnVuY3Rpb24gRHAoZSl7bGV0IHQ9T2JqZWN0LmtleXMocGUuTW9kZWxBY3Rpb24pLmpvaW4oXCJ8XCIpLG49bmV3IFJlZ0V4cChTdHJpbmcucmF3YFxcLigke3R9KVxcKGApLmV4ZWMoZSk7aWYobil7bGV0IGk9bi5pbmRleCtuWzBdLmxlbmd0aCxvPWUubGFzdEluZGV4T2YoXCIgXCIsbi5pbmRleCkrMTtyZXR1cm57Y29kZTplLnNsaWNlKG8saSksb3BlbmluZ0JyYWNlSW5kZXg6aX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gT3AoZSl7bGV0IHQ9MDtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl7aWYoZS5jaGFyQXQocikhPT1cIiBcIilyZXR1cm4gdDt0Kyt9cmV0dXJuIHR9ZnVuY3Rpb24gX3Aoe2Z1bmN0aW9uTmFtZTplLGxvY2F0aW9uOnQsbWVzc2FnZTpyLGlzUGFuaWM6bixjb250ZXh0TGluZXM6aSxjYWxsQXJndW1lbnRzOm99LHMpe2xldCBhPVtcIlwiXSxsPXQ/XCIgaW5cIjpcIjpcIjtpZihuPyhhLnB1c2gocy5yZWQoYE9vcHMsIGFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQhIFRoaXMgaXMgJHtzLmJvbGQoXCJvbiB1c1wiKX0sIHlvdSBkaWQgbm90aGluZyB3cm9uZy5gKSksYS5wdXNoKHMucmVkKGBJdCBvY2N1cnJlZCBpbiB0aGUgJHtzLmJvbGQoYFxcYCR7ZX1cXGBgKX0gaW52b2NhdGlvbiR7bH1gKSkpOmEucHVzaChzLnJlZChgSW52YWxpZCAke3MuYm9sZChgXFxgJHtlfVxcYGApfSBpbnZvY2F0aW9uJHtsfWApKSx0JiZhLnB1c2gocy51bmRlcmxpbmUoTnAodCkpKSxpKXthLnB1c2goXCJcIik7bGV0IHU9W2kudG9TdHJpbmcoKV07byYmKHUucHVzaChvKSx1LnB1c2gocy5kaW0oXCIpXCIpKSksYS5wdXNoKHUuam9pbihcIlwiKSksbyYmYS5wdXNoKFwiXCIpfWVsc2UgYS5wdXNoKFwiXCIpLG8mJmEucHVzaChvKSxhLnB1c2goXCJcIik7cmV0dXJuIGEucHVzaChyKSxhLmpvaW4oYFxuYCl9ZnVuY3Rpb24gTnAoZSl7bGV0IHQ9W2UuZmlsZU5hbWVdO3JldHVybiBlLmxpbmVOdW1iZXImJnQucHVzaChTdHJpbmcoZS5saW5lTnVtYmVyKSksZS5jb2x1bW5OdW1iZXImJnQucHVzaChTdHJpbmcoZS5jb2x1bW5OdW1iZXIpKSx0LmpvaW4oXCI6XCIpfWZ1bmN0aW9uIFB0KGUpe2xldCB0PWUuc2hvd0NvbG9ycz9JcDprcCxyPUZwKGUsdCk7cmV0dXJuIF9wKHIsdCl9ZnVuY3Rpb24gZWEoZSx0LHIsbil7cmV0dXJuIGU9PT1wZS5Nb2RlbEFjdGlvbi5maW5kRmlyc3RPclRocm93fHxlPT09cGUuTW9kZWxBY3Rpb24uZmluZFVuaXF1ZU9yVGhyb3c/THAodCxyLG4pOm59ZnVuY3Rpb24gTHAoZSx0LHIpe3JldHVybiBhc3luYyBuPT57aWYoXCJyZWplY3RPbk5vdEZvdW5kXCJpbiBuLmFyZ3Mpe2xldCBvPVB0KHtvcmlnaW5hbE1ldGhvZDpuLmNsaWVudE1ldGhvZCxjYWxsc2l0ZTpuLmNhbGxzaXRlLG1lc3NhZ2U6XCIncmVqZWN0T25Ob3RGb3VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwb3J0ZWRcIn0pO3Rocm93IG5ldyBYKG8se2NsaWVudFZlcnNpb246dH0pfXJldHVybiBhd2FpdCByKG4pLmNhdGNoKG89Pnt0aHJvdyBvIGluc3RhbmNlb2YgVSYmby5jb2RlPT09XCJQMjAyNVwiP25ldyBNZShgTm8gJHtlfSBmb3VuZGAsdCk6b30pfX1mdW5jdGlvbiBUZShlKXtyZXR1cm4gZS5yZXBsYWNlKC9eLi8sdD0+dC50b0xvd2VyQ2FzZSgpKX12YXIgJHA9W1wiZmluZFVuaXF1ZVwiLFwiZmluZFVuaXF1ZU9yVGhyb3dcIixcImZpbmRGaXJzdFwiLFwiZmluZEZpcnN0T3JUaHJvd1wiLFwiY3JlYXRlXCIsXCJ1cGRhdGVcIixcInVwc2VydFwiLFwiZGVsZXRlXCJdLHFwPVtcImFnZ3JlZ2F0ZVwiLFwiY291bnRcIixcImdyb3VwQnlcIl07ZnVuY3Rpb24gUmkoZSx0KXtsZXQgcj1lLl9leHRlbnNpb25zLmdldEFsbE1vZGVsRXh0ZW5zaW9ucyh0KT8/e30sbj1bVnAoZSx0KSxCcChlLHQpLFF0KHIpLHJlKFwibmFtZVwiLCgpPT50KSxyZShcIiRuYW1lXCIsKCk9PnQpLHJlKFwiJHBhcmVudFwiLCgpPT5lLl9hcHBsaWVkUGFyZW50KV07cmV0dXJuIEVlKHt9LG4pfWZ1bmN0aW9uIFZwKGUsdCl7bGV0IHI9VGUodCksbj1PYmplY3Qua2V5cyhwZS5Nb2RlbEFjdGlvbikuY29uY2F0KFwiY291bnRcIik7cmV0dXJue2dldEtleXMoKXtyZXR1cm4gbn0sZ2V0UHJvcGVydHlWYWx1ZShpKXtsZXQgbz1pLHM9bD0+ZS5fcmVxdWVzdChsKTtzPWVhKG8sdCxlLl9jbGllbnRWZXJzaW9uLHMpO2xldCBhPWw9PnU9PntsZXQgYz1WZShlLl9lcnJvckZvcm1hdCk7cmV0dXJuIGUuX2NyZWF0ZVByaXNtYVByb21pc2UocD0+e2xldCBkPXthcmdzOnUsZGF0YVBhdGg6W10sYWN0aW9uOm8sbW9kZWw6dCxjbGllbnRNZXRob2Q6YCR7cn0uJHtpfWAsanNNb2RlbE5hbWU6cix0cmFuc2FjdGlvbjpwLGNhbGxzaXRlOmN9O3JldHVybiBzKHsuLi5kLC4uLmx9KX0pfTtyZXR1cm4gJHAuaW5jbHVkZXMobyk/TWkoZSx0LGEpOmpwKGkpP0tzKGUsaSxhKTphKHt9KX19fWZ1bmN0aW9uIGpwKGUpe3JldHVybiBxcC5pbmNsdWRlcyhlKX1mdW5jdGlvbiBCcChlLHQpe3JldHVybiBXZShyZShcImZpZWxkc1wiLCgpPT57bGV0IHI9ZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbdF07cmV0dXJuIFFzKHQscil9KSl9ZnVuY3Rpb24gdGEoZSl7cmV0dXJuIGUucmVwbGFjZSgvXi4vLHQ9PnQudG9VcHBlckNhc2UoKSl9dmFyIFNpPVN5bWJvbCgpO2Z1bmN0aW9uIHp0KGUpe2xldCB0PVtVcChlKSxyZShTaSwoKT0+ZSkscmUoXCIkcGFyZW50XCIsKCk9PmUuX2FwcGxpZWRQYXJlbnQpXSxyPWUuX2V4dGVuc2lvbnMuZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpO3JldHVybiByJiZ0LnB1c2goUXQocikpLEVlKGUsdCl9ZnVuY3Rpb24gVXAoZSl7bGV0IHQ9T2JqZWN0LmtleXMoZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHMpLHI9dC5tYXAoVGUpLG49Wy4uLm5ldyBTZXQodC5jb25jYXQocikpXTtyZXR1cm4gV2Uoe2dldEtleXMoKXtyZXR1cm4gbn0sZ2V0UHJvcGVydHlWYWx1ZShpKXtsZXQgbz10YShpKTtpZihlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tvXSE9PXZvaWQgMClyZXR1cm4gUmkoZSxvKTtpZihlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tpXSE9PXZvaWQgMClyZXR1cm4gUmkoZSxpKX0sZ2V0UHJvcGVydHlEZXNjcmlwdG9yKGkpe2lmKCFyLmluY2x1ZGVzKGkpKXJldHVybntlbnVtZXJhYmxlOiExfX19KX1mdW5jdGlvbiBvbihlKXtyZXR1cm4gZVtTaV0/ZVtTaV06ZX1mdW5jdGlvbiByYShlKXtpZih0eXBlb2YgZT09XCJmdW5jdGlvblwiKXJldHVybiBlKHRoaXMpO2xldCB0PW9uKHRoaXMpLHI9T2JqZWN0LmNyZWF0ZSh0LHtfZXh0ZW5zaW9uczp7dmFsdWU6dGhpcy5fZXh0ZW5zaW9ucy5hcHBlbmQoZSl9LF9hcHBsaWVkUGFyZW50Ont2YWx1ZTp0aGlzLGNvbmZpZ3VyYWJsZTohMH0sJHVzZTp7dmFsdWU6dm9pZCAwfSwkb246e3ZhbHVlOnZvaWQgMH19KTtyZXR1cm4genQocil9ZnVuY3Rpb24gbmEoe3Jlc3VsdDplLG1vZGVsTmFtZTp0LHNlbGVjdDpyLGV4dGVuc2lvbnM6bn0pe2xldCBpPW4uZ2V0QWxsQ29tcHV0ZWRGaWVsZHModCk7aWYoIWkpcmV0dXJuIGU7bGV0IG89W10scz1bXTtmb3IobGV0IGEgb2YgT2JqZWN0LnZhbHVlcyhpKSl7aWYocil7aWYoIXJbYS5uYW1lXSljb250aW51ZTtsZXQgbD1hLm5lZWRzLmZpbHRlcih1PT4hclt1XSk7bC5sZW5ndGg+MCYmcy5wdXNoKEd0KGwpKX1LcChlLGEubmVlZHMpJiZvLnB1c2goUXAoYSxFZShlLG8pKSl9cmV0dXJuIG8ubGVuZ3RoPjB8fHMubGVuZ3RoPjA/RWUoZSxbLi4ubywuLi5zXSk6ZX1mdW5jdGlvbiBLcChlLHQpe3JldHVybiB0LmV2ZXJ5KHI9PnVpKGUscikpfWZ1bmN0aW9uIFFwKGUsdCl7cmV0dXJuIFdlKHJlKGUubmFtZSwoKT0+ZS5jb21wdXRlKHQpKSl9ZnVuY3Rpb24gc24oe3Zpc2l0b3I6ZSxyZXN1bHQ6dCxhcmdzOnIscnVudGltZURhdGFNb2RlbDpuLG1vZGVsTmFtZTppfSl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKGxldCBzPTA7czx0Lmxlbmd0aDtzKyspdFtzXT1zbih7cmVzdWx0OnRbc10sYXJnczpyLG1vZGVsTmFtZTppLHJ1bnRpbWVEYXRhTW9kZWw6bix2aXNpdG9yOmV9KTtyZXR1cm4gdH1sZXQgbz1lKHQsaSxyKT8/dDtyZXR1cm4gci5pbmNsdWRlJiZpYSh7aW5jbHVkZU9yU2VsZWN0OnIuaW5jbHVkZSxyZXN1bHQ6byxwYXJlbnRNb2RlbE5hbWU6aSxydW50aW1lRGF0YU1vZGVsOm4sdmlzaXRvcjplfSksci5zZWxlY3QmJmlhKHtpbmNsdWRlT3JTZWxlY3Q6ci5zZWxlY3QscmVzdWx0Om8scGFyZW50TW9kZWxOYW1lOmkscnVudGltZURhdGFNb2RlbDpuLHZpc2l0b3I6ZX0pLG99ZnVuY3Rpb24gaWEoe2luY2x1ZGVPclNlbGVjdDplLHJlc3VsdDp0LHBhcmVudE1vZGVsTmFtZTpyLHJ1bnRpbWVEYXRhTW9kZWw6bix2aXNpdG9yOml9KXtmb3IobGV0W28sc11vZiBPYmplY3QuZW50cmllcyhlKSl7aWYoIXN8fHRbb109PW51bGwpY29udGludWU7bGV0IGw9bi5tb2RlbHNbcl0uZmllbGRzLmZpbmQoYz0+Yy5uYW1lPT09byk7aWYoIWx8fGwua2luZCE9PVwib2JqZWN0XCJ8fCFsLnJlbGF0aW9uTmFtZSljb250aW51ZTtsZXQgdT10eXBlb2Ygcz09XCJvYmplY3RcIj9zOnt9O3Rbb109c24oe3Zpc2l0b3I6aSxyZXN1bHQ6dFtvXSxhcmdzOnUsbW9kZWxOYW1lOmwudHlwZSxydW50aW1lRGF0YU1vZGVsOm59KX19ZnVuY3Rpb24gb2Eoe3Jlc3VsdDplLG1vZGVsTmFtZTp0LGFyZ3M6cixleHRlbnNpb25zOm4scnVudGltZURhdGFNb2RlbDppfSl7cmV0dXJuIG4uaXNFbXB0eSgpfHxlPT1udWxsfHx0eXBlb2YgZSE9XCJvYmplY3RcInx8IWkubW9kZWxzW3RdP2U6c24oe3Jlc3VsdDplLGFyZ3M6cj8/e30sbW9kZWxOYW1lOnQscnVudGltZURhdGFNb2RlbDppLHZpc2l0b3I6KHMsYSxsKT0+bmEoe3Jlc3VsdDpzLG1vZGVsTmFtZTpUZShhKSxzZWxlY3Q6bC5zZWxlY3QsZXh0ZW5zaW9uczpufSl9KX1mdW5jdGlvbiBzYShlKXtpZihlIGluc3RhbmNlb2Ygb2UpcmV0dXJuIEdwKGUpO2lmKEFycmF5LmlzQXJyYXkoZSkpe2xldCByPVtlWzBdXTtmb3IobGV0IG49MTtuPGUubGVuZ3RoO24rKylyW25dPVl0KGVbbl0pO3JldHVybiByfWxldCB0PXt9O2ZvcihsZXQgciBpbiBlKXRbcl09WXQoZVtyXSk7cmV0dXJuIHR9ZnVuY3Rpb24gR3AoZSl7cmV0dXJuIG5ldyBvZShlLnN0cmluZ3MsZS52YWx1ZXMpfWZ1bmN0aW9uIFl0KGUpe2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxlPT1udWxsfHxlIGluc3RhbmNlb2YgeGV8fHh0KGUpKXJldHVybiBlO2lmKGh0KGUpKXJldHVybiBuZXcgUGUoZS50b0ZpeGVkKCkpO2lmKGZ0KGUpKXJldHVybiBuZXcgRGF0ZSgrZSk7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXJldHVybiBlLnNsaWNlKDApO2lmKEFycmF5LmlzQXJyYXkoZSkpe2xldCB0PWUubGVuZ3RoLHI7Zm9yKHI9QXJyYXkodCk7dC0tOylyW3RdPVl0KGVbdF0pO3JldHVybiByfWlmKHR5cGVvZiBlPT1cIm9iamVjdFwiKXtsZXQgdD17fTtmb3IobGV0IHIgaW4gZSlyPT09XCJfX3Byb3RvX19cIj9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLHt2YWx1ZTpZdChlW3JdKSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbcl09WXQoZVtyXSk7cmV0dXJuIHR9SGUoZSxcIlVua25vd24gdmFsdWVcIil9ZnVuY3Rpb24gbGEoZSx0LHIsbj0wKXtyZXR1cm4gZS5fY3JlYXRlUHJpc21hUHJvbWlzZShpPT57bGV0IG89dC5jdXN0b21EYXRhUHJveHlGZXRjaDtyZXR1cm5cInRyYW5zYWN0aW9uXCJpbiB0JiZpIT09dm9pZCAwJiYodC50cmFuc2FjdGlvbj8ua2luZD09PVwiYmF0Y2hcIiYmdC50cmFuc2FjdGlvbi5sb2NrLnRoZW4oKSx0LnRyYW5zYWN0aW9uPWkpLG49PT1yLmxlbmd0aD9lLl9leGVjdXRlUmVxdWVzdCh0KTpyW25dKHttb2RlbDp0Lm1vZGVsLG9wZXJhdGlvbjp0Lm1vZGVsP3QuYWN0aW9uOnQuY2xpZW50TWV0aG9kLGFyZ3M6c2EodC5hcmdzPz97fSksX19pbnRlcm5hbFBhcmFtczp0LHF1ZXJ5OihzLGE9dCk9PntsZXQgbD1hLmN1c3RvbURhdGFQcm94eUZldGNoO3JldHVybiBhLmN1c3RvbURhdGFQcm94eUZldGNoPWRhKG8sbCksYS5hcmdzPXMsbGEoZSxhLHIsbisxKX19KX0pfWZ1bmN0aW9uIHVhKGUsdCl7bGV0e2pzTW9kZWxOYW1lOnIsYWN0aW9uOm4sY2xpZW50TWV0aG9kOml9PXQsbz1yP246aTtpZihlLl9leHRlbnNpb25zLmlzRW1wdHkoKSlyZXR1cm4gZS5fZXhlY3V0ZVJlcXVlc3QodCk7bGV0IHM9ZS5fZXh0ZW5zaW9ucy5nZXRBbGxRdWVyeUNhbGxiYWNrcyhyPz9cIiRub25lXCIsbyk7cmV0dXJuIGxhKGUsdCxzKX1mdW5jdGlvbiBjYShlKXtyZXR1cm4gdD0+e2xldCByPXtyZXF1ZXN0czp0fSxuPXRbMF0uZXh0ZW5zaW9ucy5nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCk7cmV0dXJuIG4ubGVuZ3RoP3BhKHIsbiwwLGUpOmUocil9fWZ1bmN0aW9uIHBhKGUsdCxyLG4pe2lmKHI9PT10Lmxlbmd0aClyZXR1cm4gbihlKTtsZXQgaT1lLmN1c3RvbURhdGFQcm94eUZldGNoLG89ZS5yZXF1ZXN0c1swXS50cmFuc2FjdGlvbjtyZXR1cm4gdFtyXSh7YXJnczp7cXVlcmllczplLnJlcXVlc3RzLm1hcChzPT4oe21vZGVsOnMubW9kZWxOYW1lLG9wZXJhdGlvbjpzLmFjdGlvbixhcmdzOnMuYXJnc30pKSx0cmFuc2FjdGlvbjpvP3tpc29sYXRpb25MZXZlbDpvLmtpbmQ9PT1cImJhdGNoXCI/by5pc29sYXRpb25MZXZlbDp2b2lkIDB9OnZvaWQgMH0sX19pbnRlcm5hbFBhcmFtczplLHF1ZXJ5KHMsYT1lKXtsZXQgbD1hLmN1c3RvbURhdGFQcm94eUZldGNoO3JldHVybiBhLmN1c3RvbURhdGFQcm94eUZldGNoPWRhKGksbCkscGEoYSx0LHIrMSxuKX19KX12YXIgYWE9ZT0+ZTtmdW5jdGlvbiBkYShlPWFhLHQ9YWEpe3JldHVybiByPT5lKHQocikpfWZ1bmN0aW9uIGZhKGUsdCxyKXtsZXQgbj1UZShyKTtyZXR1cm4hdC5yZXN1bHR8fCEodC5yZXN1bHQuJGFsbE1vZGVsc3x8dC5yZXN1bHRbbl0pP2U6SnAoey4uLmUsLi4ubWEodC5uYW1lLGUsdC5yZXN1bHQuJGFsbE1vZGVscyksLi4ubWEodC5uYW1lLGUsdC5yZXN1bHRbbl0pfSl9ZnVuY3Rpb24gSnAoZSl7bGV0IHQ9bmV3IGJlLHI9KG4saSk9PnQuZ2V0T3JDcmVhdGUobiwoKT0+aS5oYXMobik/W25dOihpLmFkZChuKSxlW25dP2Vbbl0ubmVlZHMuZmxhdE1hcChvPT5yKG8saSkpOltuXSkpO3JldHVybiBwdChlLG49Pih7Li4ubixuZWVkczpyKG4ubmFtZSxuZXcgU2V0KX0pKX1mdW5jdGlvbiBtYShlLHQscil7cmV0dXJuIHI/cHQociwoe25lZWRzOm4sY29tcHV0ZTppfSxvKT0+KHtuYW1lOm8sbmVlZHM6bj9PYmplY3Qua2V5cyhuKS5maWx0ZXIocz0+bltzXSk6W10sY29tcHV0ZTpIcCh0LG8saSl9KSk6e319ZnVuY3Rpb24gSHAoZSx0LHIpe2xldCBuPWU/Llt0XT8uY29tcHV0ZTtyZXR1cm4gbj9pPT5yKHsuLi5pLFt0XTpuKGkpfSk6cn1mdW5jdGlvbiBnYShlLHQpe2lmKCF0KXJldHVybiBlO2xldCByPXsuLi5lfTtmb3IobGV0IG4gb2YgT2JqZWN0LnZhbHVlcyh0KSlpZihlW24ubmFtZV0pZm9yKGxldCBpIG9mIG4ubmVlZHMpcltpXT0hMDtyZXR1cm4gcn12YXIgYW49Y2xhc3N7Y29uc3RydWN0b3IodCxyKXt0aGlzLmV4dGVuc2lvbj10O3RoaXMucHJldmlvdXM9cjt0aGlzLmNvbXB1dGVkRmllbGRzQ2FjaGU9bmV3IGJlO3RoaXMubW9kZWxFeHRlbnNpb25zQ2FjaGU9bmV3IGJlO3RoaXMucXVlcnlDYWxsYmFja3NDYWNoZT1uZXcgYmU7dGhpcy5jbGllbnRFeHRlbnNpb25zPVZ0KCgpPT50aGlzLmV4dGVuc2lvbi5jbGllbnQ/ey4uLnRoaXMucHJldmlvdXM/LmdldEFsbENsaWVudEV4dGVuc2lvbnMoKSwuLi50aGlzLmV4dGVuc2lvbi5jbGllbnR9OnRoaXMucHJldmlvdXM/LmdldEFsbENsaWVudEV4dGVuc2lvbnMoKSk7dGhpcy5iYXRjaENhbGxiYWNrcz1WdCgoKT0+e2xldCB0PXRoaXMucHJldmlvdXM/LmdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKT8/W10scj10aGlzLmV4dGVuc2lvbi5xdWVyeT8uJF9faW50ZXJuYWxCYXRjaDtyZXR1cm4gcj90LmNvbmNhdChyKTp0fSl9Z2V0QWxsQ29tcHV0ZWRGaWVsZHModCl7cmV0dXJuIHRoaXMuY29tcHV0ZWRGaWVsZHNDYWNoZS5nZXRPckNyZWF0ZSh0LCgpPT5mYSh0aGlzLnByZXZpb3VzPy5nZXRBbGxDb21wdXRlZEZpZWxkcyh0KSx0aGlzLmV4dGVuc2lvbix0KSl9Z2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpe3JldHVybiB0aGlzLmNsaWVudEV4dGVuc2lvbnMuZ2V0KCl9Z2V0QWxsTW9kZWxFeHRlbnNpb25zKHQpe3JldHVybiB0aGlzLm1vZGVsRXh0ZW5zaW9uc0NhY2hlLmdldE9yQ3JlYXRlKHQsKCk9PntsZXQgcj1UZSh0KTtyZXR1cm4hdGhpcy5leHRlbnNpb24ubW9kZWx8fCEodGhpcy5leHRlbnNpb24ubW9kZWxbcl18fHRoaXMuZXh0ZW5zaW9uLm1vZGVsLiRhbGxNb2RlbHMpP3RoaXMucHJldmlvdXM/LmdldEFsbE1vZGVsRXh0ZW5zaW9ucyh0KTp7Li4udGhpcy5wcmV2aW91cz8uZ2V0QWxsTW9kZWxFeHRlbnNpb25zKHQpLC4uLnRoaXMuZXh0ZW5zaW9uLm1vZGVsLiRhbGxNb2RlbHMsLi4udGhpcy5leHRlbnNpb24ubW9kZWxbcl19fSl9Z2V0QWxsUXVlcnlDYWxsYmFja3ModCxyKXtyZXR1cm4gdGhpcy5xdWVyeUNhbGxiYWNrc0NhY2hlLmdldE9yQ3JlYXRlKGAke3R9OiR7cn1gLCgpPT57bGV0IG49dGhpcy5wcmV2aW91cz8uZ2V0QWxsUXVlcnlDYWxsYmFja3ModCxyKT8/W10saT1bXSxvPXRoaXMuZXh0ZW5zaW9uLnF1ZXJ5O3JldHVybiFvfHwhKG9bdF18fG8uJGFsbE1vZGVsc3x8b1tyXXx8by4kYWxsT3BlcmF0aW9ucyk/bjoob1t0XSE9PXZvaWQgMCYmKG9bdF1bcl0hPT12b2lkIDAmJmkucHVzaChvW3RdW3JdKSxvW3RdLiRhbGxPcGVyYXRpb25zIT09dm9pZCAwJiZpLnB1c2gob1t0XS4kYWxsT3BlcmF0aW9ucykpLHQhPT1cIiRub25lXCImJm8uJGFsbE1vZGVscyE9PXZvaWQgMCYmKG8uJGFsbE1vZGVsc1tyXSE9PXZvaWQgMCYmaS5wdXNoKG8uJGFsbE1vZGVsc1tyXSksby4kYWxsTW9kZWxzLiRhbGxPcGVyYXRpb25zIT09dm9pZCAwJiZpLnB1c2goby4kYWxsTW9kZWxzLiRhbGxPcGVyYXRpb25zKSksb1tyXSE9PXZvaWQgMCYmaS5wdXNoKG9bcl0pLG8uJGFsbE9wZXJhdGlvbnMhPT12b2lkIDAmJmkucHVzaChvLiRhbGxPcGVyYXRpb25zKSxuLmNvbmNhdChpKSl9KX1nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCl7cmV0dXJuIHRoaXMuYmF0Y2hDYWxsYmFja3MuZ2V0KCl9fSxsbj1jbGFzcyBle2NvbnN0cnVjdG9yKHQpe3RoaXMuaGVhZD10fXN0YXRpYyBlbXB0eSgpe3JldHVybiBuZXcgZX1zdGF0aWMgc2luZ2xlKHQpe3JldHVybiBuZXcgZShuZXcgYW4odCkpfWlzRW1wdHkoKXtyZXR1cm4gdGhpcy5oZWFkPT09dm9pZCAwfWFwcGVuZCh0KXtyZXR1cm4gbmV3IGUobmV3IGFuKHQsdGhpcy5oZWFkKSl9Z2V0QWxsQ29tcHV0ZWRGaWVsZHModCl7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsQ29tcHV0ZWRGaWVsZHModCl9Z2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbENsaWVudEV4dGVuc2lvbnMoKX1nZXRBbGxNb2RlbEV4dGVuc2lvbnModCl7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsTW9kZWxFeHRlbnNpb25zKHQpfWdldEFsbFF1ZXJ5Q2FsbGJhY2tzKHQscil7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsUXVlcnlDYWxsYmFja3ModCxyKT8/W119Z2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcygpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKT8/W119fTt2YXIgeWE9TyhcInByaXNtYTpjbGllbnRcIiksaGE9e1ZlcmNlbDpcInZlcmNlbFwiLFwiTmV0bGlmeSBDSVwiOlwibmV0bGlmeVwifTtmdW5jdGlvbiB4YSh7cG9zdGluc3RhbGw6ZSxjaU5hbWU6dCxjbGllbnRWZXJzaW9uOnJ9KXtpZih5YShcImNoZWNrUGxhdGZvcm1DYWNoaW5nOnBvc3RpbnN0YWxsXCIsZSkseWEoXCJjaGVja1BsYXRmb3JtQ2FjaGluZzpjaU5hbWVcIix0KSxlPT09ITAmJnQmJnQgaW4gaGEpe2xldCBuPWBQcmlzbWEgaGFzIGRldGVjdGVkIHRoYXQgdGhpcyBwcm9qZWN0IHdhcyBidWlsdCBvbiAke3R9LCB3aGljaCBjYWNoZXMgZGVwZW5kZW5jaWVzLiBUaGlzIGxlYWRzIHRvIGFuIG91dGRhdGVkIFByaXNtYSBDbGllbnQgYmVjYXVzZSBQcmlzbWEncyBhdXRvLWdlbmVyYXRpb24gaXNuJ3QgdHJpZ2dlcmVkLiBUbyBmaXggdGhpcywgbWFrZSBzdXJlIHRvIHJ1biB0aGUgXFxgcHJpc21hIGdlbmVyYXRlXFxgIGNvbW1hbmQgZHVyaW5nIHRoZSBidWlsZCBwcm9jZXNzLlxuXG5MZWFybiBob3c6IGh0dHBzOi8vcHJpcy5seS9kLyR7aGFbdF19LWJ1aWxkYDt0aHJvdyBjb25zb2xlLmVycm9yKG4pLG5ldyBGKG4scil9fWZ1bmN0aW9uIGJhKGUsdCl7cmV0dXJuIGU/ZS5kYXRhc291cmNlcz9lLmRhdGFzb3VyY2VzOmUuZGF0YXNvdXJjZVVybD97W3RbMF1dOnt1cmw6ZS5kYXRhc291cmNlVXJsfX06e306e319ZnVuY3Rpb24gWnQoe2Vycm9yOmUsdXNlcl9mYWNpbmdfZXJyb3I6dH0scil7cmV0dXJuIHQuZXJyb3JfY29kZT9uZXcgVSh0Lm1lc3NhZ2Use2NvZGU6dC5lcnJvcl9jb2RlLGNsaWVudFZlcnNpb246cixtZXRhOnQubWV0YSxiYXRjaFJlcXVlc3RJZHg6dC5iYXRjaF9yZXF1ZXN0X2lkeH0pOm5ldyBLKGUse2NsaWVudFZlcnNpb246cixiYXRjaFJlcXVlc3RJZHg6dC5iYXRjaF9yZXF1ZXN0X2lkeH0pfXZhciB2dD1jbGFzc3t9O3ZhciBUYT1TKHJlcXVpcmUoXCJmc1wiKSksWHQ9UyhyZXF1aXJlKFwicGF0aFwiKSk7ZnVuY3Rpb24gdW4oZSl7bGV0e3J1bnRpbWVCaW5hcnlUYXJnZXQ6dH09ZTtyZXR1cm5gQWRkIFwiJHt0fVwiIHRvIFxcYGJpbmFyeVRhcmdldHNcXGAgaW4gdGhlIFwic2NoZW1hLnByaXNtYVwiIGZpbGUgYW5kIHJ1biBcXGBwcmlzbWEgZ2VuZXJhdGVcXGAgYWZ0ZXIgc2F2aW5nIGl0OlxuXG4ke1dwKGUpfWB9ZnVuY3Rpb24gV3AoZSl7bGV0e2dlbmVyYXRvcjp0LGdlbmVyYXRvckJpbmFyeVRhcmdldHM6cixydW50aW1lQmluYXJ5VGFyZ2V0Om59PWUsaT17ZnJvbUVudlZhcjpudWxsLHZhbHVlOm59LG89Wy4uLnIsaV07cmV0dXJuIHNpKHsuLi50LGJpbmFyeVRhcmdldHM6b30pfWZ1bmN0aW9uIGplKGUpe2xldHtydW50aW1lQmluYXJ5VGFyZ2V0OnR9PWU7cmV0dXJuYFByaXNtYSBDbGllbnQgY291bGQgbm90IGxvY2F0ZSB0aGUgUXVlcnkgRW5naW5lIGZvciBydW50aW1lIFwiJHt0fVwiLmB9ZnVuY3Rpb24gQmUoZSl7bGV0e3NlYXJjaGVkTG9jYXRpb25zOnR9PWU7cmV0dXJuYFRoZSBmb2xsb3dpbmcgbG9jYXRpb25zIGhhdmUgYmVlbiBzZWFyY2hlZDpcbiR7Wy4uLm5ldyBTZXQodCldLm1hcChpPT5gICAke2l9YCkuam9pbihgXG5gKX1gfWZ1bmN0aW9uIEVhKGUpe2xldHtydW50aW1lQmluYXJ5VGFyZ2V0OnR9PWU7cmV0dXJuYCR7amUoZSl9XG5cblRoaXMgaGFwcGVuZWQgYmVjYXVzZSBcXGBiaW5hcnlUYXJnZXRzXFxgIGhhdmUgYmVlbiBwaW5uZWQsIGJ1dCB0aGUgYWN0dWFsIGRlcGxveW1lbnQgYWxzbyByZXF1aXJlZCBcIiR7dH1cIi5cbiR7dW4oZSl9XG5cbiR7QmUoZSl9YH1mdW5jdGlvbiBjbihlKXtyZXR1cm5gV2Ugd291bGQgYXBwcmVjaWF0ZSBpZiB5b3UgY291bGQgdGFrZSB0aGUgdGltZSB0byBzaGFyZSBzb21lIGluZm9ybWF0aW9uIHdpdGggdXMuXG5QbGVhc2UgaGVscCB1cyBieSBhbnN3ZXJpbmcgYSBmZXcgcXVlc3Rpb25zOiBodHRwczovL3ByaXMubHkvJHtlfWB9ZnVuY3Rpb24gd2EoZSl7bGV0e3F1ZXJ5RW5naW5lTmFtZTp0fT1lO3JldHVybmAke2plKGUpfVxuXG5UaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidW5kbGVyIHRoYXQgaGFzIG5vdCBjb3BpZWQgXCIke3R9XCIgbmV4dCB0byB0aGUgcmVzdWx0aW5nIGJ1bmRsZS5cbkVuc3VyZSB0aGF0IFwiJHt0fVwiIGhhcyBiZWVuIGNvcGllZCBuZXh0IHRvIHRoZSBidW5kbGUgb3IgaW4gXCIke2UuZXhwZWN0ZWRMb2NhdGlvbn1cIi5cblxuJHtjbihcImVuZ2luZS1ub3QtZm91bmQtYnVuZGxlci1pbnZlc3RpZ2F0aW9uXCIpfVxuXG4ke0JlKGUpfWB9ZnVuY3Rpb24gUGEoZSl7bGV0e3J1bnRpbWVCaW5hcnlUYXJnZXQ6dCxnZW5lcmF0b3JCaW5hcnlUYXJnZXRzOnJ9PWUsbj1yLmZpbmQoaT0+aS5uYXRpdmUpO3JldHVybmAke2plKGUpfVxuXG5UaGlzIGhhcHBlbmVkIGJlY2F1c2UgUHJpc21hIENsaWVudCB3YXMgZ2VuZXJhdGVkIGZvciBcIiR7bj8udmFsdWU/P1widW5rbm93blwifVwiLCBidXQgdGhlIGFjdHVhbCBkZXBsb3ltZW50IHJlcXVpcmVkIFwiJHt0fVwiLlxuJHt1bihlKX1cblxuJHtCZShlKX1gfWZ1bmN0aW9uIHZhKGUpe2xldHtxdWVyeUVuZ2luZU5hbWU6dH09ZTtyZXR1cm5gJHtqZShlKX1cblxuVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IHRvb2xpbmcgdGhhdCBoYXMgbm90IGNvcGllZCBcIiR7dH1cIiB0byB0aGUgZGVwbG95bWVudCBmb2xkZXIuXG5FbnN1cmUgdGhhdCB5b3UgcmFuIFxcYHByaXNtYSBnZW5lcmF0ZVxcYCBhbmQgdGhhdCBcIiR7dH1cIiBoYXMgYmVlbiBjb3BpZWQgdG8gXCIke2UuZXhwZWN0ZWRMb2NhdGlvbn1cIi5cblxuJHtjbihcImVuZ2luZS1ub3QtZm91bmQtdG9vbGluZy1pbnZlc3RpZ2F0aW9uXCIpfVxuXG4ke0JlKGUpfWB9dmFyIHpwPU8oXCJwcmlzbWE6Y2xpZW50OmVuZ2luZXM6cmVzb2x2ZUVuZ2luZVBhdGhcIiksWXA9KCk9Pm5ldyBSZWdFeHAoXCJydW50aW1lW1xcXFxcXFxcL11saWJyYXJ5XFxcXC5tP2pzJFwiKTthc3luYyBmdW5jdGlvbiBDYShlLHQpe2xldCByPXtiaW5hcnk6cHJvY2Vzcy5lbnYuUFJJU01BX1FVRVJZX0VOR0lORV9CSU5BUlksbGlicmFyeTpwcm9jZXNzLmVudi5QUklTTUFfUVVFUllfRU5HSU5FX0xJQlJBUll9W2VdPz90LnByaXNtYVBhdGg7aWYociE9PXZvaWQgMClyZXR1cm4gcjtsZXR7ZW5naW5lUGF0aDpuLHNlYXJjaGVkTG9jYXRpb25zOml9PWF3YWl0IFpwKGUsdCk7aWYoenAoXCJlbmdpbmVQYXRoXCIsbiksbiE9PXZvaWQgMCYmZT09PVwiYmluYXJ5XCImJnRpKG4pLG4hPT12b2lkIDApcmV0dXJuIHQucHJpc21hUGF0aD1uO2xldCBvPWF3YWl0IHV0KCkscz10LmdlbmVyYXRvcj8uYmluYXJ5VGFyZ2V0cz8/W10sYT1zLnNvbWUoZD0+ZC5uYXRpdmUpLGw9IXMuc29tZShkPT5kLnZhbHVlPT09byksdT1fX2ZpbGVuYW1lLm1hdGNoKFlwKCkpPT09bnVsbCxjPXtzZWFyY2hlZExvY2F0aW9uczppLGdlbmVyYXRvckJpbmFyeVRhcmdldHM6cyxnZW5lcmF0b3I6dC5nZW5lcmF0b3IscnVudGltZUJpbmFyeVRhcmdldDpvLHF1ZXJ5RW5naW5lTmFtZTpBYShlLG8pLGV4cGVjdGVkTG9jYXRpb246WHQuZGVmYXVsdC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLHQuZGlybmFtZSl9LHA7dGhyb3cgYSYmbD9wPVBhKGMpOmw/cD1FYShjKTp1P3A9d2EoYyk6cD12YShjKSxuZXcgRihwLHQuY2xpZW50VmVyc2lvbil9YXN5bmMgZnVuY3Rpb24gWnAoZW5naW5lVHlwZSxjb25maWcpe2xldCBiaW5hcnlUYXJnZXQ9YXdhaXQgdXQoKSxzZWFyY2hlZExvY2F0aW9ucz1bXSxkaXJuYW1lPWV2YWwoXCJfX2Rpcm5hbWVcIiksc2VhcmNoTG9jYXRpb25zPVtjb25maWcuZGlybmFtZSxYdC5kZWZhdWx0LnJlc29sdmUoZGlybmFtZSxcIi4uXCIpLGNvbmZpZy5nZW5lcmF0b3I/Lm91dHB1dD8udmFsdWU/P2Rpcm5hbWUsWHQuZGVmYXVsdC5yZXNvbHZlKGRpcm5hbWUsXCIuLi8uLi8uLi8ucHJpc21hL2NsaWVudFwiKSxcIi90bXAvcHJpc21hLWVuZ2luZXNcIixjb25maWcuY3dkXTtfX2ZpbGVuYW1lLmluY2x1ZGVzKFwicmVzb2x2ZUVuZ2luZVBhdGhcIikmJnNlYXJjaExvY2F0aW9ucy5wdXNoKHJzKCkpO2ZvcihsZXQgZSBvZiBzZWFyY2hMb2NhdGlvbnMpe2xldCB0PUFhKGVuZ2luZVR5cGUsYmluYXJ5VGFyZ2V0KSxyPVh0LmRlZmF1bHQuam9pbihlLHQpO2lmKHNlYXJjaGVkTG9jYXRpb25zLnB1c2goZSksVGEuZGVmYXVsdC5leGlzdHNTeW5jKHIpKXJldHVybntlbmdpbmVQYXRoOnIsc2VhcmNoZWRMb2NhdGlvbnN9fXJldHVybntlbmdpbmVQYXRoOnZvaWQgMCxzZWFyY2hlZExvY2F0aW9uc319ZnVuY3Rpb24gQWEoZSx0KXtyZXR1cm4gZT09PVwibGlicmFyeVwiP2puKHQsXCJmc1wiKTpgcXVlcnktZW5naW5lLSR7dH0ke3Q9PT1cIndpbmRvd3NcIj9cIi5leGVcIjpcIlwifWB9ZnVuY3Rpb24gcG4oZSx0KXtyZXR1cm57YmF0Y2g6ZSx0cmFuc2FjdGlvbjp0Py5raW5kPT09XCJiYXRjaFwiP3tpc29sYXRpb25MZXZlbDp0Lm9wdGlvbnMuaXNvbGF0aW9uTGV2ZWx9OnZvaWQgMH19dmFyIElpPVMobGkoKSk7ZnVuY3Rpb24gTWEoZSl7cmV0dXJuIGU/ZS5yZXBsYWNlKC9cIi4qXCIvZywnXCJYXCInKS5yZXBsYWNlKC9bXFxzOlxcW10oWystXT8oWzAtOV0qWy5dKT9bMC05XSspL2csdD0+YCR7dFswXX01YCk6XCJcIn1mdW5jdGlvbiBSYShlKXtyZXR1cm4gZS5zcGxpdChgXG5gKS5tYXAodD0+dC5yZXBsYWNlKC9eXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKVxccyovLFwiXCIpLnJlcGxhY2UoL1xcK1xcZCtcXHMqbXMkLyxcIlwiKSkuam9pbihgXG5gKX12YXIgU2E9UyhjcygpKTtmdW5jdGlvbiBJYSh7dGl0bGU6ZSx1c2VyOnQ9XCJwcmlzbWFcIixyZXBvOnI9XCJwcmlzbWFcIix0ZW1wbGF0ZTpuPVwiYnVnX3JlcG9ydC5tZFwiLGJvZHk6aX0pe3JldHVybigwLFNhLmRlZmF1bHQpKHt1c2VyOnQscmVwbzpyLHRlbXBsYXRlOm4sdGl0bGU6ZSxib2R5Oml9KX1mdW5jdGlvbiBrYSh7dmVyc2lvbjplLHBsYXRmb3JtOnQsdGl0bGU6cixkZXNjcmlwdGlvbjpuLGVuZ2luZVZlcnNpb246aSxkYXRhYmFzZTpvLHF1ZXJ5OnN9KXtsZXQgYT1ibyg2ZTMtKHM/Lmxlbmd0aD8/MCkpLGw9UmEoKDAsSWkuZGVmYXVsdCkoYSkpLHU9bj9gIyBEZXNjcmlwdGlvblxuXFxgXFxgXFxgXG4ke259XG5cXGBcXGBcXGBgOlwiXCIsYz0oMCxJaS5kZWZhdWx0KShgSGkgUHJpc21hIFRlYW0hIE15IFByaXNtYSBDbGllbnQganVzdCBjcmFzaGVkLiBUaGlzIGlzIHRoZSByZXBvcnQ6XG4jIyBWZXJzaW9uc1xuXG58IE5hbWUgICAgICAgICAgICB8IFZlcnNpb24gICAgICAgICAgICB8XG58LS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS18XG58IE5vZGUgICAgICAgICAgICB8ICR7cHJvY2Vzcy52ZXJzaW9uPy5wYWRFbmQoMTkpfXwgXG58IE9TICAgICAgICAgICAgICB8ICR7dD8ucGFkRW5kKDE5KX18XG58IFByaXNtYSBDbGllbnQgICB8ICR7ZT8ucGFkRW5kKDE5KX18XG58IFF1ZXJ5IEVuZ2luZSAgICB8ICR7aT8ucGFkRW5kKDE5KX18XG58IERhdGFiYXNlICAgICAgICB8ICR7bz8ucGFkRW5kKDE5KX18XG5cbiR7dX1cblxuIyMgTG9nc1xuXFxgXFxgXFxgXG4ke2x9XG5cXGBcXGBcXGBcblxuIyMgQ2xpZW50IFNuaXBwZXRcblxcYFxcYFxcYHRzXG4vLyBQTEVBU0UgRklMTCBZT1VSIENPREUgU05JUFBFVCBIRVJFXG5cXGBcXGBcXGBcblxuIyMgU2NoZW1hXG5cXGBcXGBcXGBwcmlzbWFcbi8vIFBMRUFTRSBBREQgWU9VUiBTQ0hFTUEgSEVSRSBJRiBQT1NTSUJMRVxuXFxgXFxgXFxgXG5cbiMjIFByaXNtYSBFbmdpbmUgUXVlcnlcblxcYFxcYFxcYFxuJHtzP01hKHMpOlwiXCJ9XG5cXGBcXGBcXGBcbmApLHA9SWEoe3RpdGxlOnIsYm9keTpjfSk7cmV0dXJuYCR7cn1cblxuVGhpcyBpcyBhIG5vbi1yZWNvdmVyYWJsZSBlcnJvciB3aGljaCBwcm9iYWJseSBoYXBwZW5zIHdoZW4gdGhlIFByaXNtYSBRdWVyeSBFbmdpbmUgaGFzIGEgcGFuaWMuXG5cbiR7dGUocCl9XG5cbklmIHlvdSB3YW50IHRoZSBQcmlzbWEgdGVhbSB0byBsb29rIGludG8gaXQsIHBsZWFzZSBvcGVuIHRoZSBsaW5rIGFib3ZlIFxcdXsxRjY0Rn1cblRvIGluY3JlYXNlIHRoZSBjaGFuY2Ugb2Ygc3VjY2VzcywgcGxlYXNlIHBvc3QgeW91ciBzY2hlbWEgYW5kIGEgc25pcHBldCBvZlxuaG93IHlvdSB1c2VkIFByaXNtYSBDbGllbnQgaW4gdGhlIGlzc3VlLiBcbmB9ZnVuY3Rpb24gZG4oe2lubGluZURhdGFzb3VyY2VzOmUsb3ZlcnJpZGVEYXRhc291cmNlczp0LGVudjpyLGNsaWVudFZlcnNpb246bn0pe2xldCBpLG89T2JqZWN0LmtleXMoZSlbMF0scz1lW29dPy51cmwsYT10W29dPy51cmw7aWYobz09PXZvaWQgMD9pPXZvaWQgMDphP2k9YTpzPy52YWx1ZT9pPXMudmFsdWU6cz8uZnJvbUVudlZhciYmKGk9cltzLmZyb21FbnZWYXJdKSxzPy5mcm9tRW52VmFyIT09dm9pZCAwJiZpPT09dm9pZCAwKXRocm93IG5ldyBGKGBlcnJvcjogRW52aXJvbm1lbnQgdmFyaWFibGUgbm90IGZvdW5kOiAke3MuZnJvbUVudlZhcn0uYCxuKTtpZihpPT09dm9pZCAwKXRocm93IG5ldyBGKFwiZXJyb3I6IE1pc3NpbmcgVVJMIGVudmlyb25tZW50IHZhcmlhYmxlLCB2YWx1ZSwgb3Igb3ZlcnJpZGUuXCIsbik7cmV0dXJuIGl9dmFyIG1uPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IocixuKXtzdXBlcihyKTt0aGlzLmNsaWVudFZlcnNpb249bi5jbGllbnRWZXJzaW9uLHRoaXMuY2F1c2U9bi5jYXVzZX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVybiB0aGlzLm5hbWV9fTt2YXIgYWU9Y2xhc3MgZXh0ZW5kcyBtbntjb25zdHJ1Y3RvcihyLG4pe3N1cGVyKHIsbik7dGhpcy5pc1JldHJ5YWJsZT1uLmlzUmV0cnlhYmxlPz8hMH19O2Z1bmN0aW9uIFIoZSx0KXtyZXR1cm57Li4uZSxpc1JldHJ5YWJsZTp0fX12YXIgVHQ9Y2xhc3MgZXh0ZW5kcyBhZXtjb25zdHJ1Y3RvcihyKXtzdXBlcihcIlRoaXMgcmVxdWVzdCBtdXN0IGJlIHJldHJpZWRcIixSKHIsITApKTt0aGlzLm5hbWU9XCJGb3JjZWRSZXRyeUVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMDFcIn19O0UoVHQsXCJGb3JjZWRSZXRyeUVycm9yXCIpO3ZhciBZZT1jbGFzcyBleHRlbmRzIGFle2NvbnN0cnVjdG9yKHIsbil7c3VwZXIocixSKG4sITEpKTt0aGlzLm5hbWU9XCJJbnZhbGlkRGF0YXNvdXJjZUVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMDJcIn19O0UoWWUsXCJJbnZhbGlkRGF0YXNvdXJjZUVycm9yXCIpO3ZhciBaZT1jbGFzcyBleHRlbmRzIGFle2NvbnN0cnVjdG9yKHIsbil7c3VwZXIocixSKG4sITEpKTt0aGlzLm5hbWU9XCJOb3RJbXBsZW1lbnRlZFlldEVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMDRcIn19O0UoWmUsXCJOb3RJbXBsZW1lbnRlZFlldEVycm9yXCIpO3ZhciBMPWNsYXNzIGV4dGVuZHMgYWV7Y29uc3RydWN0b3IocixuKXtzdXBlcihyLG4pO3RoaXMucmVzcG9uc2U9bi5yZXNwb25zZTtsZXQgaT10aGlzLnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwicHJpc21hLXJlcXVlc3QtaWRcIik7aWYoaSl7bGV0IG89YChUaGUgcmVxdWVzdCBpZCB3YXM6ICR7aX0pYDt0aGlzLm1lc3NhZ2U9dGhpcy5tZXNzYWdlK1wiIFwiK299fX07dmFyIFhlPWNsYXNzIGV4dGVuZHMgTHtjb25zdHJ1Y3RvcihyKXtzdXBlcihcIlNjaGVtYSBuZWVkcyB0byBiZSB1cGxvYWRlZFwiLFIociwhMCkpO3RoaXMubmFtZT1cIlNjaGVtYU1pc3NpbmdFcnJvclwiO3RoaXMuY29kZT1cIlA1MDA1XCJ9fTtFKFhlLFwiU2NoZW1hTWlzc2luZ0Vycm9yXCIpO3ZhciBraT1cIlRoaXMgcmVxdWVzdCBjb3VsZCBub3QgYmUgdW5kZXJzdG9vZCBieSB0aGUgc2VydmVyXCIsZXI9Y2xhc3MgZXh0ZW5kcyBMe2NvbnN0cnVjdG9yKHIsbixpKXtzdXBlcihufHxraSxSKHIsITEpKTt0aGlzLm5hbWU9XCJCYWRSZXF1ZXN0RXJyb3JcIjt0aGlzLmNvZGU9XCJQNTAwMFwiO2kmJih0aGlzLmNvZGU9aSl9fTtFKGVyLFwiQmFkUmVxdWVzdEVycm9yXCIpO3ZhciB0cj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuKXtzdXBlcihcIkVuZ2luZSBub3Qgc3RhcnRlZDogaGVhbHRoY2hlY2sgdGltZW91dFwiLFIociwhMCkpO3RoaXMubmFtZT1cIkhlYWx0aGNoZWNrVGltZW91dEVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMTNcIjt0aGlzLmxvZ3M9bn19O0UodHIsXCJIZWFsdGhjaGVja1RpbWVvdXRFcnJvclwiKTt2YXIgcnI9Y2xhc3MgZXh0ZW5kcyBMe2NvbnN0cnVjdG9yKHIsbixpKXtzdXBlcihuLFIociwhMCkpO3RoaXMubmFtZT1cIkVuZ2luZVN0YXJ0dXBFcnJvclwiO3RoaXMuY29kZT1cIlA1MDE0XCI7dGhpcy5sb2dzPWl9fTtFKHJyLFwiRW5naW5lU3RhcnR1cEVycm9yXCIpO3ZhciBucj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3Iocil7c3VwZXIoXCJFbmdpbmUgdmVyc2lvbiBpcyBub3Qgc3VwcG9ydGVkXCIsUihyLCExKSk7dGhpcy5uYW1lPVwiRW5naW5lVmVyc2lvbk5vdFN1cHBvcnRlZEVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMTJcIn19O0UobnIsXCJFbmdpbmVWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3JcIik7dmFyIEZpPVwiUmVxdWVzdCB0aW1lZCBvdXRcIixpcj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuPUZpKXtzdXBlcihuLFIociwhMSkpO3RoaXMubmFtZT1cIkdhdGV3YXlUaW1lb3V0RXJyb3JcIjt0aGlzLmNvZGU9XCJQNTAwOVwifX07RShpcixcIkdhdGV3YXlUaW1lb3V0RXJyb3JcIik7dmFyIFhwPVwiSW50ZXJhY3RpdmUgdHJhbnNhY3Rpb24gZXJyb3JcIixvcj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuPVhwKXtzdXBlcihuLFIociwhMSkpO3RoaXMubmFtZT1cIkludGVyYWN0aXZlVHJhbnNhY3Rpb25FcnJvclwiO3RoaXMuY29kZT1cIlA1MDE1XCJ9fTtFKG9yLFwiSW50ZXJhY3RpdmVUcmFuc2FjdGlvbkVycm9yXCIpO3ZhciBlZD1cIlJlcXVlc3QgcGFyYW1ldGVycyBhcmUgaW52YWxpZFwiLHNyPWNsYXNzIGV4dGVuZHMgTHtjb25zdHJ1Y3RvcihyLG49ZWQpe3N1cGVyKG4sUihyLCExKSk7dGhpcy5uYW1lPVwiSW52YWxpZFJlcXVlc3RFcnJvclwiO3RoaXMuY29kZT1cIlA1MDExXCJ9fTtFKHNyLFwiSW52YWxpZFJlcXVlc3RFcnJvclwiKTt2YXIgRGk9XCJSZXF1ZXN0ZWQgcmVzb3VyY2UgZG9lcyBub3QgZXhpc3RcIixhcj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuPURpKXtzdXBlcihuLFIociwhMSkpO3RoaXMubmFtZT1cIk5vdEZvdW5kRXJyb3JcIjt0aGlzLmNvZGU9XCJQNTAwM1wifX07RShhcixcIk5vdEZvdW5kRXJyb3JcIik7dmFyIE9pPVwiVW5rbm93biBzZXJ2ZXIgZXJyb3JcIixDdD1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuLGkpe3N1cGVyKG58fE9pLFIociwhMCkpO3RoaXMubmFtZT1cIlNlcnZlckVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMDZcIjt0aGlzLmxvZ3M9aX19O0UoQ3QsXCJTZXJ2ZXJFcnJvclwiKTt2YXIgX2k9XCJVbmF1dGhvcml6ZWQsIGNoZWNrIHlvdXIgY29ubmVjdGlvbiBzdHJpbmdcIixscj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuPV9pKXtzdXBlcihuLFIociwhMSkpO3RoaXMubmFtZT1cIlVuYXV0aG9yaXplZEVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMDdcIn19O0UobHIsXCJVbmF1dGhvcml6ZWRFcnJvclwiKTt2YXIgTmk9XCJVc2FnZSBleGNlZWRlZCwgcmV0cnkgYWdhaW4gbGF0ZXJcIix1cj1jbGFzcyBleHRlbmRzIEx7Y29uc3RydWN0b3IocixuPU5pKXtzdXBlcihuLFIociwhMCkpO3RoaXMubmFtZT1cIlVzYWdlRXhjZWVkZWRFcnJvclwiO3RoaXMuY29kZT1cIlA1MDA4XCJ9fTtFKHVyLFwiVXNhZ2VFeGNlZWRlZEVycm9yXCIpO2FzeW5jIGZ1bmN0aW9uIHRkKGUpe2xldCB0O3RyeXt0PWF3YWl0IGUudGV4dCgpfWNhdGNoe3JldHVybnt0eXBlOlwiRW1wdHlFcnJvclwifX10cnl7bGV0IHI9SlNPTi5wYXJzZSh0KTtpZih0eXBlb2Ygcj09XCJzdHJpbmdcIilzd2l0Y2gocil7Y2FzZVwiSW50ZXJuYWxEYXRhUHJveHlFcnJvclwiOnJldHVybnt0eXBlOlwiRGF0YVByb3h5RXJyb3JcIixib2R5OnJ9O2RlZmF1bHQ6cmV0dXJue3R5cGU6XCJVbmtub3duVGV4dEVycm9yXCIsYm9keTpyfX1pZih0eXBlb2Ygcj09XCJvYmplY3RcIiYmciE9PW51bGwpe2lmKFwiaXNfcGFuaWNcImluIHImJlwibWVzc2FnZVwiaW4gciYmXCJlcnJvcl9jb2RlXCJpbiByKXJldHVybnt0eXBlOlwiUXVlcnlFbmdpbmVFcnJvclwiLGJvZHk6cn07aWYoXCJFbmdpbmVOb3RTdGFydGVkXCJpbiByfHxcIkludGVyYWN0aXZlVHJhbnNhY3Rpb25NaXNyb3V0ZWRcImluIHJ8fFwiSW52YWxpZFJlcXVlc3RFcnJvclwiaW4gcil7bGV0IG49T2JqZWN0LnZhbHVlcyhyKVswXS5yZWFzb247cmV0dXJuIHR5cGVvZiBuPT1cInN0cmluZ1wiJiYhW1wiU2NoZW1hTWlzc2luZ1wiLFwiRW5naW5lVmVyc2lvbk5vdFN1cHBvcnRlZFwiXS5pbmNsdWRlcyhuKT97dHlwZTpcIlVua25vd25Kc29uRXJyb3JcIixib2R5OnJ9Ont0eXBlOlwiRGF0YVByb3h5RXJyb3JcIixib2R5OnJ9fX1yZXR1cm57dHlwZTpcIlVua25vd25Kc29uRXJyb3JcIixib2R5OnJ9fWNhdGNoe3JldHVybiB0PT09XCJcIj97dHlwZTpcIkVtcHR5RXJyb3JcIn06e3R5cGU6XCJVbmtub3duVGV4dEVycm9yXCIsYm9keTp0fX19YXN5bmMgZnVuY3Rpb24gY3IoZSx0KXtpZihlLm9rKXJldHVybjtsZXQgcj17Y2xpZW50VmVyc2lvbjp0LHJlc3BvbnNlOmV9LG49YXdhaXQgdGQoZSk7aWYobi50eXBlPT09XCJRdWVyeUVuZ2luZUVycm9yXCIpdGhyb3cgbmV3IFUobi5ib2R5Lm1lc3NhZ2Use2NvZGU6bi5ib2R5LmVycm9yX2NvZGUsY2xpZW50VmVyc2lvbjp0fSk7aWYobi50eXBlPT09XCJEYXRhUHJveHlFcnJvclwiKXtpZihuLmJvZHk9PT1cIkludGVybmFsRGF0YVByb3h5RXJyb3JcIil0aHJvdyBuZXcgQ3QocixcIkludGVybmFsIERhdGEgUHJveHkgZXJyb3JcIik7aWYoXCJFbmdpbmVOb3RTdGFydGVkXCJpbiBuLmJvZHkpe2lmKG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbj09PVwiU2NoZW1hTWlzc2luZ1wiKXJldHVybiBuZXcgWGUocik7aWYobi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uPT09XCJFbmdpbmVWZXJzaW9uTm90U3VwcG9ydGVkXCIpdGhyb3cgbmV3IG5yKHIpO2lmKFwiRW5naW5lU3RhcnR1cEVycm9yXCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHttc2c6aSxsb2dzOm99PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5FbmdpbmVTdGFydHVwRXJyb3I7dGhyb3cgbmV3IHJyKHIsaSxvKX1pZihcIktub3duRW5naW5lU3RhcnR1cEVycm9yXCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHttc2c6aSxlcnJvcl9jb2RlOm99PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5Lbm93bkVuZ2luZVN0YXJ0dXBFcnJvcjt0aHJvdyBuZXcgRihpLHQsbyl9aWYoXCJIZWFsdGhjaGVja1RpbWVvdXRcImluIG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbil7bGV0e2xvZ3M6aX09bi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uLkhlYWx0aGNoZWNrVGltZW91dDt0aHJvdyBuZXcgdHIocixpKX19aWYoXCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkXCJpbiBuLmJvZHkpe2xldCBpPXtJRFBhcnNlRXJyb3I6XCJDb3VsZCBub3QgcGFyc2UgaW50ZXJhY3RpdmUgdHJhbnNhY3Rpb24gSURcIixOb1F1ZXJ5RW5naW5lRm91bmRFcnJvcjpcIkNvdWxkIG5vdCBmaW5kIFF1ZXJ5IEVuZ2luZSBmb3IgdGhlIHNwZWNpZmllZCBob3N0IGFuZCB0cmFuc2FjdGlvbiBJRFwiLFRyYW5zYWN0aW9uU3RhcnRFcnJvcjpcIkNvdWxkIG5vdCBzdGFydCBpbnRlcmFjdGl2ZSB0cmFuc2FjdGlvblwifTt0aHJvdyBuZXcgb3IocixpW24uYm9keS5JbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkLnJlYXNvbl0pfWlmKFwiSW52YWxpZFJlcXVlc3RFcnJvclwiaW4gbi5ib2R5KXRocm93IG5ldyBzcihyLG4uYm9keS5JbnZhbGlkUmVxdWVzdEVycm9yLnJlYXNvbil9aWYoZS5zdGF0dXM9PT00MDF8fGUuc3RhdHVzPT09NDAzKXRocm93IG5ldyBscihyLEF0KF9pLG4pKTtpZihlLnN0YXR1cz09PTQwNClyZXR1cm4gbmV3IGFyKHIsQXQoRGksbikpO2lmKGUuc3RhdHVzPT09NDI5KXRocm93IG5ldyB1cihyLEF0KE5pLG4pKTtpZihlLnN0YXR1cz09PTUwNCl0aHJvdyBuZXcgaXIocixBdChGaSxuKSk7aWYoZS5zdGF0dXM+PTUwMCl0aHJvdyBuZXcgQ3QocixBdChPaSxuKSk7aWYoZS5zdGF0dXM+PTQwMCl0aHJvdyBuZXcgZXIocixBdChraSxuKSl9ZnVuY3Rpb24gQXQoZSx0KXtyZXR1cm4gdC50eXBlPT09XCJFbXB0eUVycm9yXCI/ZTpgJHtlfTogJHtKU09OLnN0cmluZ2lmeSh0KX1gfWZ1bmN0aW9uIEZhKGUpe2xldCB0PU1hdGgucG93KDIsZSkqNTAscj1NYXRoLmNlaWwoTWF0aC5yYW5kb20oKSp0KS1NYXRoLmNlaWwodC8yKSxuPXQrcjtyZXR1cm4gbmV3IFByb21pc2UoaT0+c2V0VGltZW91dCgoKT0+aShuKSxuKSl9ZnVuY3Rpb24gRGEoZSl7aWYoISFlLmdlbmVyYXRvcj8ucHJldmlld0ZlYXR1cmVzLnNvbWUocj0+ci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwibWV0cmljc1wiKSkpdGhyb3cgbmV3IEYoXCJUaGUgYG1ldHJpY3NgIHByZXZpZXcgZmVhdHVyZSBpcyBub3QgeWV0IGF2YWlsYWJsZSB3aXRoIEFjY2VsZXJhdGUuXFxuUGxlYXNlIHJlbW92ZSBgbWV0cmljc2AgZnJvbSB0aGUgYHByZXZpZXdGZWF0dXJlc2AgaW4geW91ciBzY2hlbWEuXFxuXFxuTW9yZSBpbmZvcm1hdGlvbiBhYm91dCBBY2NlbGVyYXRlOiBodHRwczovL3ByaXMubHkvZC9hY2NlbGVyYXRlXCIsZS5jbGllbnRWZXJzaW9uKX12YXIgT2E9e1wiQHByaXNtYS9kZWJ1Z1wiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZW5naW5lcy12ZXJzaW9uXCI6XCI1LjUuMS0xLmFlYmMwNDZjZThiODhlYmJjYjQ1ZWZlMzFjYmU3ZDA2ZmQ2YWJjMGFcIixcIkBwcmlzbWEvZmV0Y2gtZW5naW5lXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9nZXQtcGxhdGZvcm1cIjpcIndvcmtzcGFjZToqXCIsXCJAc3djL2NvcmVcIjpcIjEuMy45NVwiLFwiQHN3Yy9qZXN0XCI6XCIwLjIuMjlcIixcIkB0eXBlcy9qZXN0XCI6XCIyOS41LjVcIixcIkB0eXBlcy9ub2RlXCI6XCIxOC4xOC4zXCIsZXhlY2E6XCI1LjEuMVwiLGplc3Q6XCIyOS43LjBcIix0eXBlc2NyaXB0OlwiNS4yLjJcIn07dmFyIHByPWNsYXNzIGV4dGVuZHMgYWV7Y29uc3RydWN0b3IocixuKXtzdXBlcihgQ2Fubm90IGZldGNoIGRhdGEgZnJvbSBzZXJ2aWNlOlxuJHtyfWAsUihuLCEwKSk7dGhpcy5uYW1lPVwiUmVxdWVzdEVycm9yXCI7dGhpcy5jb2RlPVwiUDUwMTBcIn19O0UocHIsXCJSZXF1ZXN0RXJyb3JcIik7YXN5bmMgZnVuY3Rpb24gZXQoZSx0LHI9bj0+bil7bGV0IG49dC5jbGllbnRWZXJzaW9uO3RyeXtyZXR1cm4gdHlwZW9mIGZldGNoPT1cImZ1bmN0aW9uXCI/YXdhaXQgcihmZXRjaCkoZSx0KTphd2FpdCByKExpKShlLHQpfWNhdGNoKGkpe2NvbnNvbGUubG9nKGUpO2xldCBvPWkubWVzc2FnZT8/XCJVbmtub3duIGVycm9yXCI7dGhyb3cgbmV3IHByKG8se2NsaWVudFZlcnNpb246bn0pfX1mdW5jdGlvbiBuZChlKXtyZXR1cm57Li4uZS5oZWFkZXJzLFwiQ29udGVudC1UeXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCJ9fWZ1bmN0aW9uIGlkKGUpe3JldHVybnttZXRob2Q6ZS5tZXRob2QsaGVhZGVyczpuZChlKX19ZnVuY3Rpb24gb2QoZSx0KXtyZXR1cm57dGV4dDooKT0+UHJvbWlzZS5yZXNvbHZlKEJ1ZmZlci5jb25jYXQoZSkudG9TdHJpbmcoKSksanNvbjooKT0+UHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+SlNPTi5wYXJzZShCdWZmZXIuY29uY2F0KGUpLnRvU3RyaW5nKCkpKSxvazp0LnN0YXR1c0NvZGU+PTIwMCYmdC5zdGF0dXNDb2RlPD0yOTksc3RhdHVzOnQuc3RhdHVzQ29kZSx1cmw6dC51cmwsaGVhZGVyczpuZXcgJGkodC5oZWFkZXJzKX19YXN5bmMgZnVuY3Rpb24gTGkoZSx0PXt9KXtsZXQgcj1zZChcImh0dHBzXCIpLG49aWQodCksaT1bXSx7b3JpZ2luOm99PW5ldyBVUkwoZSk7cmV0dXJuIG5ldyBQcm9taXNlKChzLGEpPT57bGV0IGw9ci5yZXF1ZXN0KGUsbix1PT57bGV0e3N0YXR1c0NvZGU6YyxoZWFkZXJzOntsb2NhdGlvbjpwfX09dTtjPj0zMDEmJmM8PTM5OSYmcCYmKHAuc3RhcnRzV2l0aChcImh0dHBcIik9PT0hMT9zKExpKGAke299JHtwfWAsdCkpOnMoTGkocCx0KSkpLHUub24oXCJkYXRhXCIsZD0+aS5wdXNoKGQpKSx1Lm9uKFwiZW5kXCIsKCk9PnMob2QoaSx1KSkpLHUub24oXCJlcnJvclwiLGEpfSk7bC5vbihcImVycm9yXCIsYSksbC5lbmQodC5ib2R5Pz9cIlwiKX0pfXZhciBzZD10eXBlb2YgcmVxdWlyZTxcInVcIj9yZXF1aXJlOigpPT57fSwkaT1jbGFzc3tjb25zdHJ1Y3Rvcih0PXt9KXt0aGlzLmhlYWRlcnM9bmV3IE1hcDtmb3IobGV0W3Isbl1vZiBPYmplY3QuZW50cmllcyh0KSlpZih0eXBlb2Ygbj09XCJzdHJpbmdcIil0aGlzLmhlYWRlcnMuc2V0KHIsbik7ZWxzZSBpZihBcnJheS5pc0FycmF5KG4pKWZvcihsZXQgaSBvZiBuKXRoaXMuaGVhZGVycy5zZXQocixpKX1hcHBlbmQodCxyKXt0aGlzLmhlYWRlcnMuc2V0KHQscil9ZGVsZXRlKHQpe3RoaXMuaGVhZGVycy5kZWxldGUodCl9Z2V0KHQpe3JldHVybiB0aGlzLmhlYWRlcnMuZ2V0KHQpPz9udWxsfWhhcyh0KXtyZXR1cm4gdGhpcy5oZWFkZXJzLmhhcyh0KX1zZXQodCxyKXt0aGlzLmhlYWRlcnMuc2V0KHQscil9Zm9yRWFjaCh0LHIpe2ZvcihsZXRbbixpXW9mIHRoaXMuaGVhZGVycyl0LmNhbGwocixpLG4sdGhpcyl9fTt2YXIgYWQ9L15bMS05XVswLTldKlxcLlswLTldK1xcLlswLTldKyQvLF9hPU8oXCJwcmlzbWE6Y2xpZW50OmRhdGFwcm94eUVuZ2luZVwiKTthc3luYyBmdW5jdGlvbiBsZChlLHQpe2xldCByPU9hW1wiQHByaXNtYS9lbmdpbmVzLXZlcnNpb25cIl0sbj10LmNsaWVudFZlcnNpb24/P1widW5rbm93blwiO2lmKHByb2Nlc3MuZW52LlBSSVNNQV9DTElFTlRfREFUQV9QUk9YWV9DTElFTlRfVkVSU0lPTilyZXR1cm4gcHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OO2lmKGUuaW5jbHVkZXMoXCJhY2NlbGVyYXRlXCIpJiZuIT09XCIwLjAuMFwiJiZuIT09XCJpbi1tZW1vcnlcIilyZXR1cm4gbjtsZXRbaSxvXT1uPy5zcGxpdChcIi1cIik/P1tdO2lmKG89PT12b2lkIDAmJmFkLnRlc3QoaSkpcmV0dXJuIGk7aWYobyE9PXZvaWQgMHx8bj09PVwiMC4wLjBcInx8bj09PVwiaW4tbWVtb3J5XCIpe2lmKGUuc3RhcnRzV2l0aChcImxvY2FsaG9zdFwiKXx8ZS5zdGFydHNXaXRoKFwiMTI3LjAuMC4xXCIpKXJldHVyblwiMC4wLjBcIjtsZXRbc109ci5zcGxpdChcIi1cIik/P1tdLFthLGwsdV09cy5zcGxpdChcIi5cIiksYz11ZChgPD0ke2F9LiR7bH0uJHt1fWApLHA9YXdhaXQgZXQoYyx7Y2xpZW50VmVyc2lvbjpufSk7aWYoIXAub2spdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggc3RhYmxlIFByaXNtYSB2ZXJzaW9uLCB1bnBrZy5jb20gc3RhdHVzICR7cC5zdGF0dXN9ICR7cC5zdGF0dXNUZXh0fSwgcmVzcG9uc2UgYm9keTogJHthd2FpdCBwLnRleHQoKXx8XCI8ZW1wdHkgYm9keT5cIn1gKTtsZXQgZD1hd2FpdCBwLnRleHQoKTtfYShcImxlbmd0aCBvZiBib2R5IGZldGNoZWQgZnJvbSB1bnBrZy5jb21cIixkLmxlbmd0aCk7bGV0IGY7dHJ5e2Y9SlNPTi5wYXJzZShkKX1jYXRjaCh5KXt0aHJvdyBjb25zb2xlLmVycm9yKFwiSlNPTi5wYXJzZSBlcnJvcjogYm9keSBmZXRjaGVkIGZyb20gdW5wa2cuY29tOiBcIixkKSx5fXJldHVybiBmLnZlcnNpb259dGhyb3cgbmV3IFplKFwiT25seSBgbWFqb3IubWlub3IucGF0Y2hgIHZlcnNpb25zIGFyZSBzdXBwb3J0ZWQgYnkgQWNjZWxlcmF0ZS5cIix7Y2xpZW50VmVyc2lvbjpufSl9YXN5bmMgZnVuY3Rpb24gTmEoZSx0KXtsZXQgcj1hd2FpdCBsZChlLHQpO3JldHVybiBfYShcInZlcnNpb25cIixyKSxyfWZ1bmN0aW9uIHVkKGUpe3JldHVybiBlbmNvZGVVUkkoYGh0dHBzOi8vdW5wa2cuY29tL3ByaXNtYUAke2V9L3BhY2thZ2UuanNvbmApfXZhciBMYT0zLHFpPU8oXCJwcmlzbWE6Y2xpZW50OmRhdGFwcm94eUVuZ2luZVwiKSxWaT1jbGFzc3tjb25zdHJ1Y3Rvcih7YXBpS2V5OnQsdHJhY2luZ0hlbHBlcjpyLGxvZ0xldmVsOm4sbG9nUXVlcmllczppLGVuZ2luZUhhc2g6b30pe3RoaXMuYXBpS2V5PXQsdGhpcy50cmFjaW5nSGVscGVyPXIsdGhpcy5sb2dMZXZlbD1uLHRoaXMubG9nUXVlcmllcz1pLHRoaXMuZW5naW5lSGFzaD1vfWJ1aWxkKHt0cmFjZXBhcmVudDp0LGludGVyYWN0aXZlVHJhbnNhY3Rpb246cn09e30pe2xldCBuPXtBdXRob3JpemF0aW9uOmBCZWFyZXIgJHt0aGlzLmFwaUtleX1gLFwiUHJpc21hLUVuZ2luZS1IYXNoXCI6dGhpcy5lbmdpbmVIYXNofTt0aGlzLnRyYWNpbmdIZWxwZXIuaXNFbmFibGVkKCkmJihuLnRyYWNlcGFyZW50PXQ/P3RoaXMudHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpKSxyJiYobltcIlgtdHJhbnNhY3Rpb24taWRcIl09ci5pZCk7bGV0IGk9dGhpcy5idWlsZENhcHR1cmVTZXR0aW5ncygpO3JldHVybiBpLmxlbmd0aD4wJiYobltcIlgtY2FwdHVyZS10ZWxlbWV0cnlcIl09aS5qb2luKFwiLCBcIikpLG59YnVpbGRDYXB0dXJlU2V0dGluZ3MoKXtsZXQgdD1bXTtyZXR1cm4gdGhpcy50cmFjaW5nSGVscGVyLmlzRW5hYmxlZCgpJiZ0LnB1c2goXCJ0cmFjaW5nXCIpLHRoaXMubG9nTGV2ZWwmJnQucHVzaCh0aGlzLmxvZ0xldmVsKSx0aGlzLmxvZ1F1ZXJpZXMmJnQucHVzaChcInF1ZXJ5XCIpLHR9fSxkcj1jbGFzcyBleHRlbmRzIHZ0e2NvbnN0cnVjdG9yKHIpe3N1cGVyKCk7RGEociksdGhpcy5jb25maWc9cix0aGlzLmVudj17Li4udGhpcy5jb25maWcuZW52LC4uLnByb2Nlc3MuZW52fSx0aGlzLmlubGluZVNjaGVtYT1yLmlubGluZVNjaGVtYSx0aGlzLmlubGluZURhdGFzb3VyY2VzPXIuaW5saW5lRGF0YXNvdXJjZXMsdGhpcy5pbmxpbmVTY2hlbWFIYXNoPXIuaW5saW5lU2NoZW1hSGFzaCx0aGlzLmNsaWVudFZlcnNpb249ci5jbGllbnRWZXJzaW9uLHRoaXMuZW5naW5lSGFzaD1yLmVuZ2luZVZlcnNpb24sdGhpcy5sb2dFbWl0dGVyPXIubG9nRW1pdHRlcix0aGlzLnRyYWNpbmdIZWxwZXI9dGhpcy5jb25maWcudHJhY2luZ0hlbHBlcn1hcGlLZXkoKXtyZXR1cm4gdGhpcy5oZWFkZXJCdWlsZGVyLmFwaUtleX12ZXJzaW9uKCl7cmV0dXJuIHRoaXMuZW5naW5lSGFzaH1hc3luYyBzdGFydCgpe3RoaXMuc3RhcnRQcm9taXNlIT09dm9pZCAwJiZhd2FpdCB0aGlzLnN0YXJ0UHJvbWlzZSx0aGlzLnN0YXJ0UHJvbWlzZT0oYXN5bmMoKT0+e2xldFtyLG5dPXRoaXMuZXh0cmFjdEhvc3RBbmRBcGlLZXkoKTt0aGlzLmhvc3Q9cix0aGlzLmhlYWRlckJ1aWxkZXI9bmV3IFZpKHthcGlLZXk6bix0cmFjaW5nSGVscGVyOnRoaXMudHJhY2luZ0hlbHBlcixsb2dMZXZlbDp0aGlzLmNvbmZpZy5sb2dMZXZlbCxsb2dRdWVyaWVzOnRoaXMuY29uZmlnLmxvZ1F1ZXJpZXMsZW5naW5lSGFzaDp0aGlzLmVuZ2luZUhhc2h9KSx0aGlzLnJlbW90ZUNsaWVudFZlcnNpb249YXdhaXQgTmEocix0aGlzLmNvbmZpZykscWkoXCJob3N0XCIsdGhpcy5ob3N0KX0pKCksYXdhaXQgdGhpcy5zdGFydFByb21pc2V9YXN5bmMgc3RvcCgpe31wcm9wYWdhdGVSZXNwb25zZUV4dGVuc2lvbnMocil7cj8ubG9ncz8ubGVuZ3RoJiZyLmxvZ3MuZm9yRWFjaChuPT57c3dpdGNoKG4ubGV2ZWwpe2Nhc2VcImRlYnVnXCI6Y2FzZVwiZXJyb3JcIjpjYXNlXCJ0cmFjZVwiOmNhc2VcIndhcm5cIjpjYXNlXCJpbmZvXCI6YnJlYWs7Y2FzZVwicXVlcnlcIjp7bGV0IGk9dHlwZW9mIG4uYXR0cmlidXRlcy5xdWVyeT09XCJzdHJpbmdcIj9uLmF0dHJpYnV0ZXMucXVlcnk6XCJcIjtpZighdGhpcy50cmFjaW5nSGVscGVyLmlzRW5hYmxlZCgpKXtsZXRbb109aS5zcGxpdChcIi8qIHRyYWNlcGFyZW50XCIpO2k9b310aGlzLmxvZ0VtaXR0ZXIuZW1pdChcInF1ZXJ5XCIse3F1ZXJ5OmksdGltZXN0YW1wOm4udGltZXN0YW1wLGR1cmF0aW9uOm4uYXR0cmlidXRlcy5kdXJhdGlvbl9tcyxwYXJhbXM6bi5hdHRyaWJ1dGVzLnBhcmFtcyx0YXJnZXQ6bi5hdHRyaWJ1dGVzLnRhcmdldH0pfX19KSxyPy50cmFjZXM/Lmxlbmd0aCYmdGhpcy50cmFjaW5nSGVscGVyLmNyZWF0ZUVuZ2luZVNwYW4oe3NwYW46ITAsc3BhbnM6ci50cmFjZXN9KX1vbihyLG4pe2lmKHI9PT1cImJlZm9yZUV4aXRcIil0aHJvdyBuZXcgRXJyb3IoJ1wiYmVmb3JlRXhpdFwiIGhvb2sgaXMgbm90IGFwcGxpY2FibGUgdG8gdGhlIHJlbW90ZSBxdWVyeSBlbmdpbmUnKTt0aGlzLmxvZ0VtaXR0ZXIub24ocixuKX1hc3luYyB1cmwocil7cmV0dXJuIGF3YWl0IHRoaXMuc3RhcnQoKSxgaHR0cHM6Ly8ke3RoaXMuaG9zdH0vJHt0aGlzLnJlbW90ZUNsaWVudFZlcnNpb259LyR7dGhpcy5pbmxpbmVTY2hlbWFIYXNofS8ke3J9YH1hc3luYyB1cGxvYWRTY2hlbWEoKXtsZXQgcj17bmFtZTpcInNjaGVtYVVwbG9hZFwiLGludGVybmFsOiEwfTtyZXR1cm4gdGhpcy50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHIsYXN5bmMoKT0+e2xldCBuPWF3YWl0IGV0KGF3YWl0IHRoaXMudXJsKFwic2NoZW1hXCIpLHttZXRob2Q6XCJQVVRcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCgpLGJvZHk6dGhpcy5pbmxpbmVTY2hlbWEsY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudFZlcnNpb259KTtuLm9rfHxxaShcInNjaGVtYSByZXNwb25zZSBzdGF0dXNcIixuLnN0YXR1cyk7bGV0IGk9YXdhaXQgY3Iobix0aGlzLmNsaWVudFZlcnNpb24pO2lmKGkpdGhyb3cgdGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJ3YXJuXCIse21lc3NhZ2U6YEVycm9yIHdoaWxlIHVwbG9hZGluZyBzY2hlbWE6ICR7aS5tZXNzYWdlfWB9KSxpO3RoaXMubG9nRW1pdHRlci5lbWl0KFwiaW5mb1wiLHttZXNzYWdlOmBTY2hlbWEgKHJlKXVwbG9hZGVkIChoYXNoOiAke3RoaXMuaW5saW5lU2NoZW1hSGFzaH0pYH0pfSl9cmVxdWVzdChyLHt0cmFjZXBhcmVudDpuLGludGVyYWN0aXZlVHJhbnNhY3Rpb246aSxjdXN0b21EYXRhUHJveHlGZXRjaDpvfSl7cmV0dXJuIHRoaXMucmVxdWVzdEludGVybmFsKHtib2R5OnIsdHJhY2VwYXJlbnQ6bixpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOmksY3VzdG9tRGF0YVByb3h5RmV0Y2g6b30pfWFzeW5jIHJlcXVlc3RCYXRjaChyLHt0cmFjZXBhcmVudDpuLHRyYW5zYWN0aW9uOmksY3VzdG9tRGF0YVByb3h5RmV0Y2g6b30pe2xldCBzPWk/LmtpbmQ9PT1cIml0eFwiP2kub3B0aW9uczp2b2lkIDAsYT1wbihyLGkpLHtiYXRjaFJlc3VsdDpsLGVsYXBzZWQ6dX09YXdhaXQgdGhpcy5yZXF1ZXN0SW50ZXJuYWwoe2JvZHk6YSxjdXN0b21EYXRhUHJveHlGZXRjaDpvLGludGVyYWN0aXZlVHJhbnNhY3Rpb246cyx0cmFjZXBhcmVudDpufSk7cmV0dXJuIGwubWFwKGM9PlwiZXJyb3JzXCJpbiBjJiZjLmVycm9ycy5sZW5ndGg+MD9adChjLmVycm9yc1swXSx0aGlzLmNsaWVudFZlcnNpb24pOntkYXRhOmMsZWxhcHNlZDp1fSl9cmVxdWVzdEludGVybmFsKHtib2R5OnIsdHJhY2VwYXJlbnQ6bixjdXN0b21EYXRhUHJveHlGZXRjaDppLGludGVyYWN0aXZlVHJhbnNhY3Rpb246b30pe3JldHVybiB0aGlzLndpdGhSZXRyeSh7YWN0aW9uR2VydW5kOlwicXVlcnlpbmdcIixjYWxsYmFjazphc3luYyh7bG9nSHR0cENhbGw6c30pPT57bGV0IGE9bz9gJHtvLnBheWxvYWQuZW5kcG9pbnR9L2dyYXBocWxgOmF3YWl0IHRoaXMudXJsKFwiZ3JhcGhxbFwiKTtzKGEpO2xldCBsPWF3YWl0IGV0KGEse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6bixpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOm99KSxib2R5OkpTT04uc3RyaW5naWZ5KHIpLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSxpKTtsLm9rfHxxaShcImdyYXBocWwgcmVzcG9uc2Ugc3RhdHVzXCIsbC5zdGF0dXMpLGF3YWl0IHRoaXMuaGFuZGxlRXJyb3IoYXdhaXQgY3IobCx0aGlzLmNsaWVudFZlcnNpb24pKTtsZXQgdT1hd2FpdCBsLmpzb24oKSxjPXUuZXh0ZW5zaW9ucztpZihjJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhjKSx1LmVycm9ycyl0aHJvdyB1LmVycm9ycy5sZW5ndGg9PT0xP1p0KHUuZXJyb3JzWzBdLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pOm5ldyBLKHUuZXJyb3JzLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtyZXR1cm4gdX19KX1hc3luYyB0cmFuc2FjdGlvbihyLG4saSl7bGV0IG89e3N0YXJ0Olwic3RhcnRpbmdcIixjb21taXQ6XCJjb21taXR0aW5nXCIscm9sbGJhY2s6XCJyb2xsaW5nIGJhY2tcIn07cmV0dXJuIHRoaXMud2l0aFJldHJ5KHthY3Rpb25HZXJ1bmQ6YCR7b1tyXX0gdHJhbnNhY3Rpb25gLGNhbGxiYWNrOmFzeW5jKHtsb2dIdHRwQ2FsbDpzfSk9PntpZihyPT09XCJzdGFydFwiKXtsZXQgYT1KU09OLnN0cmluZ2lmeSh7bWF4X3dhaXQ6aT8ubWF4V2FpdD8/MmUzLHRpbWVvdXQ6aT8udGltZW91dD8/NWUzLGlzb2xhdGlvbl9sZXZlbDppPy5pc29sYXRpb25MZXZlbH0pLGw9YXdhaXQgdGhpcy51cmwoXCJ0cmFuc2FjdGlvbi9zdGFydFwiKTtzKGwpO2xldCB1PWF3YWl0IGV0KGwse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6bi50cmFjZXBhcmVudH0pLGJvZHk6YSxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pO2F3YWl0IHRoaXMuaGFuZGxlRXJyb3IoYXdhaXQgY3IodSx0aGlzLmNsaWVudFZlcnNpb24pKTtsZXQgYz1hd2FpdCB1Lmpzb24oKSxwPWMuZXh0ZW5zaW9ucztwJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhwKTtsZXQgZD1jLmlkLGY9Y1tcImRhdGEtcHJveHlcIl0uZW5kcG9pbnQ7cmV0dXJue2lkOmQscGF5bG9hZDp7ZW5kcG9pbnQ6Zn19fWVsc2V7bGV0IGE9YCR7aS5wYXlsb2FkLmVuZHBvaW50fS8ke3J9YDtzKGEpO2xldCBsPWF3YWl0IGV0KGEse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6bi50cmFjZXBhcmVudH0pLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSk7YXdhaXQgdGhpcy5oYW5kbGVFcnJvcihhd2FpdCBjcihsLHRoaXMuY2xpZW50VmVyc2lvbikpO2xldCBjPShhd2FpdCBsLmpzb24oKSkuZXh0ZW5zaW9ucztjJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhjKTtyZXR1cm59fX0pfWV4dHJhY3RIb3N0QW5kQXBpS2V5KCl7bGV0IHI9e2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSxuPU9iamVjdC5rZXlzKHRoaXMuaW5saW5lRGF0YXNvdXJjZXMpWzBdLGk9ZG4oe2lubGluZURhdGFzb3VyY2VzOnRoaXMuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczp0aGlzLmNvbmZpZy5vdmVycmlkZURhdGFzb3VyY2VzLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9uLGVudjp0aGlzLmVudn0pLG87dHJ5e289bmV3IFVSTChpKX1jYXRjaHt0aHJvdyBuZXcgWWUoYEVycm9yIHZhbGlkYXRpbmcgZGF0YXNvdXJjZSBcXGAke259XFxgOiB0aGUgVVJMIG11c3Qgc3RhcnQgd2l0aCB0aGUgcHJvdG9jb2wgXFxgcHJpc21hOi8vXFxgYCxyKX1sZXR7cHJvdG9jb2w6cyxob3N0OmEsc2VhcmNoUGFyYW1zOmx9PW87aWYocyE9PVwicHJpc21hOlwiKXRocm93IG5ldyBZZShgRXJyb3IgdmFsaWRhdGluZyBkYXRhc291cmNlIFxcYCR7bn1cXGA6IHRoZSBVUkwgbXVzdCBzdGFydCB3aXRoIHRoZSBwcm90b2NvbCBcXGBwcmlzbWE6Ly9cXGBgLHIpO2xldCB1PWwuZ2V0KFwiYXBpX2tleVwiKTtpZih1PT09bnVsbHx8dS5sZW5ndGg8MSl0aHJvdyBuZXcgWWUoYEVycm9yIHZhbGlkYXRpbmcgZGF0YXNvdXJjZSBcXGAke259XFxgOiB0aGUgVVJMIG11c3QgY29udGFpbiBhIHZhbGlkIEFQSSBrZXlgLHIpO3JldHVyblthLHVdfW1ldHJpY3MoKXt0aHJvdyBuZXcgWmUoXCJNZXRyaWNzIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBmb3IgQWNjZWxlcmF0ZVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pfWFzeW5jIHdpdGhSZXRyeShyKXtmb3IobGV0IG49MDs7bisrKXtsZXQgaT1vPT57dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJpbmZvXCIse21lc3NhZ2U6YENhbGxpbmcgJHtvfSAobj0ke259KWB9KX07dHJ5e3JldHVybiBhd2FpdCByLmNhbGxiYWNrKHtsb2dIdHRwQ2FsbDppfSl9Y2F0Y2gobyl7aWYoIShvIGluc3RhbmNlb2YgYWUpfHwhby5pc1JldHJ5YWJsZSl0aHJvdyBvO2lmKG4+PUxhKXRocm93IG8gaW5zdGFuY2VvZiBUdD9vLmNhdXNlOm87dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJ3YXJuXCIse21lc3NhZ2U6YEF0dGVtcHQgJHtuKzF9LyR7TGF9IGZhaWxlZCBmb3IgJHtyLmFjdGlvbkdlcnVuZH06ICR7by5tZXNzYWdlPz9cIih1bmtub3duKVwifWB9KTtsZXQgcz1hd2FpdCBGYShuKTt0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcIndhcm5cIix7bWVzc2FnZTpgUmV0cnlpbmcgYWZ0ZXIgJHtzfW1zYH0pfX19YXN5bmMgaGFuZGxlRXJyb3Iocil7aWYociBpbnN0YW5jZW9mIFhlKXRocm93IGF3YWl0IHRoaXMudXBsb2FkU2NoZW1hKCksbmV3IFR0KHtjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbixjYXVzZTpyfSk7aWYocil0aHJvdyByfX07dmFyIEJhPVMocmVxdWlyZShcImZzXCIpKTtmdW5jdGlvbiAkYShlKXtpZihlPy5raW5kPT09XCJpdHhcIilyZXR1cm4gZS5vcHRpb25zLmlkfXZhciBCaT1TKHJlcXVpcmUoXCJvc1wiKSkscWE9UyhyZXF1aXJlKFwicGF0aFwiKSk7dmFyIGppPVN5bWJvbChcIlByaXNtYUxpYnJhcnlFbmdpbmVDYWNoZVwiKTtmdW5jdGlvbiBjZCgpe2xldCBlPWdsb2JhbFRoaXM7cmV0dXJuIGVbamldPT09dm9pZCAwJiYoZVtqaV09e30pLGVbamldfWZ1bmN0aW9uIHBkKGUpe2xldCB0PWNkKCk7aWYodFtlXSE9PXZvaWQgMClyZXR1cm4gdFtlXTtsZXQgcj1xYS5kZWZhdWx0LnRvTmFtZXNwYWNlZFBhdGgoZSksbj17ZXhwb3J0czp7fX0saT0wO3JldHVybiBwcm9jZXNzLnBsYXRmb3JtIT09XCJ3aW4zMlwiJiYoaT1CaS5kZWZhdWx0LmNvbnN0YW50cy5kbG9wZW4uUlRMRF9MQVpZfEJpLmRlZmF1bHQuY29uc3RhbnRzLmRsb3Blbi5SVExEX0RFRVBCSU5EKSxwcm9jZXNzLmRsb3BlbihuLHIsaSksdFtlXT1uLmV4cG9ydHMsbi5leHBvcnRzfXZhciBmbj1jbGFzc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLmNvbmZpZz10fWFzeW5jIGxvYWRMaWJyYXJ5KCl7bGV0IHQ9YXdhaXQgSm4oKSxyPWF3YWl0IENhKFwibGlicmFyeVwiLHRoaXMuY29uZmlnKTt0cnl7cmV0dXJuIHRoaXMuY29uZmlnLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oe25hbWU6XCJsb2FkTGlicmFyeVwiLGludGVybmFsOiEwfSwoKT0+cGQocikpfWNhdGNoKG4pe2xldCBpPXJpKHtlOm4scGxhdGZvcm1JbmZvOnQsaWQ6cn0pO3Rocm93IG5ldyBGKGksdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbil9fX07dmFyIGRkPVwiUDIwMzZcIixDZT1PKFwicHJpc21hOmNsaWVudDpsaWJyYXJ5RW5naW5lXCIpO2Z1bmN0aW9uIG1kKGUpe3JldHVybiBlLml0ZW1fdHlwZT09PVwicXVlcnlcIiYmXCJxdWVyeVwiaW4gZX1mdW5jdGlvbiBmZChlKXtyZXR1cm5cImxldmVsXCJpbiBlP2UubGV2ZWw9PT1cImVycm9yXCImJmUubWVzc2FnZT09PVwiUEFOSUNcIjohMX12YXIgVmE9Wy4uLkhuLFwibmF0aXZlXCJdLGphPTAsbXI9Y2xhc3MgZXh0ZW5kcyB2dHtjb25zdHJ1Y3RvcihyLG49bmV3IGZuKHIpKXtzdXBlcigpO3RyeXt0aGlzLmRhdGFtb2RlbD1CYS5kZWZhdWx0LnJlYWRGaWxlU3luYyhyLmRhdGFtb2RlbFBhdGgsXCJ1dGYtOFwiKX1jYXRjaChzKXt0aHJvdyBzLnN0YWNrLm1hdGNoKC9cXC9cXC5uZXh0fFxcL25leHRAfFxcL25leHRcXC8vKT9uZXcgRihgWW91ciBzY2hlbWEucHJpc21hIGNvdWxkIG5vdCBiZSBmb3VuZCwgYW5kIHdlIGRldGVjdGVkIHRoYXQgeW91IGFyZSB1c2luZyBOZXh0LmpzLlxuRmluZCBvdXQgd2h5IGFuZCBsZWFybiBob3cgdG8gZml4IHRoaXM6IGh0dHBzOi8vcHJpcy5seS9kL3NjaGVtYS1ub3QtZm91bmQtbmV4dGpzYCxyLmNsaWVudFZlcnNpb24pOnIuaXNCdW5kbGVkPT09ITA/bmV3IEYoXCJQcmlzbWEgQ2xpZW50IGNvdWxkIG5vdCBmaW5kIGl0cyBgc2NoZW1hLnByaXNtYWAuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1bmRsaW5nIHN0ZXAsIHdoaWNoIGxlYWRzIHRvIGBzY2hlbWEucHJpc21hYCBub3QgYmVpbmcgY29waWVkIG5lYXIgdGhlIHJlc3VsdGluZyBidW5kbGUuIFdlIHdvdWxkIGFwcHJlY2lhdGUgaWYgeW91IGNvdWxkIHRha2UgdGhlIHRpbWUgdG8gc2hhcmUgc29tZSBpbmZvcm1hdGlvbiB3aXRoIHVzLlxcblBsZWFzZSBoZWxwIHVzIGJ5IGFuc3dlcmluZyBhIGZldyBxdWVzdGlvbnM6IGh0dHBzOi8vcHJpcy5seS9idW5kbGVyLWludmVzdGlnYXRpb24tZXJyb3JcIixyLmNsaWVudFZlcnNpb24pOnN9dGhpcy5jb25maWc9cix0aGlzLmxpYnJhcnlTdGFydGVkPSExLHRoaXMubG9nUXVlcmllcz1yLmxvZ1F1ZXJpZXM/PyExLHRoaXMubG9nTGV2ZWw9ci5sb2dMZXZlbD8/XCJlcnJvclwiLHRoaXMubGlicmFyeUxvYWRlcj1uLHRoaXMubG9nRW1pdHRlcj1yLmxvZ0VtaXR0ZXIsci5lbmFibGVEZWJ1Z0xvZ3MmJih0aGlzLmxvZ0xldmVsPVwiZGVidWdcIik7bGV0IGk9T2JqZWN0LmtleXMoci5vdmVycmlkZURhdGFzb3VyY2VzKVswXSxvPXIub3ZlcnJpZGVEYXRhc291cmNlc1tpXT8udXJsO2khPT12b2lkIDAmJm8hPT12b2lkIDAmJih0aGlzLmRhdGFzb3VyY2VPdmVycmlkZXM9e1tpXTpvfSksdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2U9dGhpcy5pbnN0YW50aWF0ZUxpYnJhcnkoKSx0aGlzLmNoZWNrRm9yVG9vTWFueUVuZ2luZXMoKX1jaGVja0ZvclRvb01hbnlFbmdpbmVzKCl7amE9PT0xMCYmY29uc29sZS53YXJuKGAke2hlKFwid2FybihwcmlzbWEtY2xpZW50KVwiKX0gVGhpcyBpcyB0aGUgMTB0aCBpbnN0YW5jZSBvZiBQcmlzbWEgQ2xpZW50IGJlaW5nIHN0YXJ0ZWQuIE1ha2Ugc3VyZSB0aGlzIGlzIGludGVudGlvbmFsLmApfWFzeW5jIHRyYW5zYWN0aW9uKHIsbixpKXthd2FpdCB0aGlzLnN0YXJ0KCk7bGV0IG89SlNPTi5zdHJpbmdpZnkobikscztpZihyPT09XCJzdGFydFwiKXtsZXQgbD1KU09OLnN0cmluZ2lmeSh7bWF4X3dhaXQ6aT8ubWF4V2FpdD8/MmUzLHRpbWVvdXQ6aT8udGltZW91dD8/NWUzLGlzb2xhdGlvbl9sZXZlbDppPy5pc29sYXRpb25MZXZlbH0pO3M9YXdhaXQgdGhpcy5lbmdpbmU/LnN0YXJ0VHJhbnNhY3Rpb24obCxvKX1lbHNlIHI9PT1cImNvbW1pdFwiP3M9YXdhaXQgdGhpcy5lbmdpbmU/LmNvbW1pdFRyYW5zYWN0aW9uKGkuaWQsbyk6cj09PVwicm9sbGJhY2tcIiYmKHM9YXdhaXQgdGhpcy5lbmdpbmU/LnJvbGxiYWNrVHJhbnNhY3Rpb24oaS5pZCxvKSk7bGV0IGE9dGhpcy5wYXJzZUVuZ2luZVJlc3BvbnNlKHMpO2lmKGEuZXJyb3JfY29kZSl0aHJvdyBuZXcgVShhLm1lc3NhZ2Use2NvZGU6YS5lcnJvcl9jb2RlLGNsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbixtZXRhOmEubWV0YX0pO3JldHVybiBhfWFzeW5jIGluc3RhbnRpYXRlTGlicmFyeSgpe2lmKENlKFwiaW50ZXJuYWxTZXR1cFwiKSx0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZSlyZXR1cm4gdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2U7Vm4oKSx0aGlzLnBsYXRmb3JtPWF3YWl0IHRoaXMuZ2V0UGxhdGZvcm0oKSxhd2FpdCB0aGlzLmxvYWRFbmdpbmUoKSx0aGlzLnZlcnNpb24oKX1hc3luYyBnZXRQbGF0Zm9ybSgpe2lmKHRoaXMucGxhdGZvcm0pcmV0dXJuIHRoaXMucGxhdGZvcm07bGV0IHI9YXdhaXQgdXQoKTtpZighVmEuaW5jbHVkZXMocikpdGhyb3cgbmV3IEYoYFVua25vd24gJHttZShcIlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWVwiKX0gJHttZShuZShyKSl9LiBQb3NzaWJsZSBiaW5hcnlUYXJnZXRzOiAke0dlKFZhLmpvaW4oXCIsIFwiKSl9IG9yIGEgcGF0aCB0byB0aGUgcXVlcnkgZW5naW5lIGxpYnJhcnkuXG5Zb3UgbWF5IGhhdmUgdG8gcnVuICR7R2UoXCJwcmlzbWEgZ2VuZXJhdGVcIil9IGZvciB5b3VyIGNoYW5nZXMgdG8gdGFrZSBlZmZlY3QuYCx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uKTtyZXR1cm4gcn1wYXJzZUVuZ2luZVJlc3BvbnNlKHIpe2lmKCFyKXRocm93IG5ldyBLKFwiUmVzcG9uc2UgZnJvbSB0aGUgRW5naW5lIHdhcyBlbXB0eVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTt0cnl7cmV0dXJuIEpTT04ucGFyc2Uocil9Y2F0Y2h7dGhyb3cgbmV3IEsoXCJVbmFibGUgdG8gSlNPTi5wYXJzZSByZXNwb25zZSBmcm9tIGVuZ2luZVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KX19YXN5bmMgbG9hZEVuZ2luZSgpe2lmKCF0aGlzLmVuZ2luZSl7dGhpcy5RdWVyeUVuZ2luZUNvbnN0cnVjdG9yfHwodGhpcy5saWJyYXJ5PWF3YWl0IHRoaXMubGlicmFyeUxvYWRlci5sb2FkTGlicmFyeSgpLHRoaXMuUXVlcnlFbmdpbmVDb25zdHJ1Y3Rvcj10aGlzLmxpYnJhcnkuUXVlcnlFbmdpbmUpO3RyeXtsZXQgcj1uZXcgV2Vha1JlZih0aGlzKSx7YWRhcHRlcjpufT10aGlzLmNvbmZpZztuJiZDZShcIlVzaW5nIGRyaXZlciBhZGFwdGVyOiAlT1wiLG4pLHRoaXMuZW5naW5lPW5ldyB0aGlzLlF1ZXJ5RW5naW5lQ29uc3RydWN0b3Ioe2RhdGFtb2RlbDp0aGlzLmRhdGFtb2RlbCxlbnY6cHJvY2Vzcy5lbnYsbG9nUXVlcmllczp0aGlzLmNvbmZpZy5sb2dRdWVyaWVzPz8hMSxpZ25vcmVFbnZWYXJFcnJvcnM6ITAsZGF0YXNvdXJjZU92ZXJyaWRlczp0aGlzLmRhdGFzb3VyY2VPdmVycmlkZXM/P3t9LGxvZ0xldmVsOnRoaXMubG9nTGV2ZWwsY29uZmlnRGlyOnRoaXMuY29uZmlnLmN3ZCxlbmdpbmVQcm90b2NvbDpcImpzb25cIn0saT0+e3IuZGVyZWYoKT8ubG9nZ2VyKGkpfSxuKSxqYSsrfWNhdGNoKHIpe2xldCBuPXIsaT10aGlzLnBhcnNlSW5pdEVycm9yKG4ubWVzc2FnZSk7dGhyb3cgdHlwZW9mIGk9PVwic3RyaW5nXCI/bjpuZXcgRihpLm1lc3NhZ2UsdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbixpLmVycm9yX2NvZGUpfX19bG9nZ2VyKHIpe2xldCBuPXRoaXMucGFyc2VFbmdpbmVSZXNwb25zZShyKTtpZihuKXtpZihcInNwYW5cImluIG4pe3RoaXMuY29uZmlnLnRyYWNpbmdIZWxwZXIuY3JlYXRlRW5naW5lU3BhbihuKTtyZXR1cm59bi5sZXZlbD1uPy5sZXZlbC50b0xvd2VyQ2FzZSgpPz9cInVua25vd25cIixtZChuKT90aGlzLmxvZ0VtaXR0ZXIuZW1pdChcInF1ZXJ5XCIse3RpbWVzdGFtcDpuZXcgRGF0ZSxxdWVyeTpuLnF1ZXJ5LHBhcmFtczpuLnBhcmFtcyxkdXJhdGlvbjpOdW1iZXIobi5kdXJhdGlvbl9tcyksdGFyZ2V0Om4ubW9kdWxlX3BhdGh9KTpmZChuKT90aGlzLmxvZ2dlclJ1c3RQYW5pYz1uZXcgdWUodGhpcy5nZXRFcnJvck1lc3NhZ2VXaXRoTGluayhgJHtuLm1lc3NhZ2V9OiAke24ucmVhc29ufSBpbiAke24uZmlsZX06JHtuLmxpbmV9OiR7bi5jb2x1bW59YCksdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbik6dGhpcy5sb2dFbWl0dGVyLmVtaXQobi5sZXZlbCx7dGltZXN0YW1wOm5ldyBEYXRlLG1lc3NhZ2U6bi5tZXNzYWdlLHRhcmdldDpuLm1vZHVsZV9wYXRofSl9fWdldEVycm9yTWVzc2FnZVdpdGhMaW5rKHIpe3JldHVybiBrYSh7cGxhdGZvcm06dGhpcy5wbGF0Zm9ybSx0aXRsZTpyLHZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbixlbmdpbmVWZXJzaW9uOnRoaXMudmVyc2lvbkluZm8/LmNvbW1pdCxkYXRhYmFzZTp0aGlzLmNvbmZpZy5hY3RpdmVQcm92aWRlcixxdWVyeTp0aGlzLmxhc3RRdWVyeX0pfXBhcnNlSW5pdEVycm9yKHIpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShyKX1jYXRjaHt9cmV0dXJuIHJ9cGFyc2VSZXF1ZXN0RXJyb3Iocil7dHJ5e3JldHVybiBKU09OLnBhcnNlKHIpfWNhdGNoe31yZXR1cm4gcn1vbihyLG4pe2lmKHI9PT1cImJlZm9yZUV4aXRcIil0aHJvdyBuZXcgRXJyb3IoJ1wiYmVmb3JlRXhpdFwiIGhvb2sgaXMgbm90IGFwcGxpY2FibGUgdG8gdGhlIGxpYnJhcnkgZW5naW5lIHNpbmNlIFByaXNtYSA1LjAuMCwgaXQgaXMgb25seSByZWxldmFudCBhbmQgaW1wbGVtZW50ZWQgZm9yIHRoZSBiaW5hcnkgZW5naW5lLiBQbGVhc2UgYWRkIHlvdXIgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGBwcm9jZXNzYCBvYmplY3QgZGlyZWN0bHkgaW5zdGVhZC4nKTt0aGlzLmxvZ0VtaXR0ZXIub24ocixuKX1hc3luYyBzdGFydCgpe2lmKGF3YWl0IHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlLGF3YWl0IHRoaXMubGlicmFyeVN0b3BwaW5nUHJvbWlzZSx0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2UpcmV0dXJuIENlKGBsaWJyYXJ5IGFscmVhZHkgc3RhcnRpbmcsIHRoaXMubGlicmFyeVN0YXJ0ZWQ6ICR7dGhpcy5saWJyYXJ5U3RhcnRlZH1gKSx0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2U7aWYodGhpcy5saWJyYXJ5U3RhcnRlZClyZXR1cm47bGV0IHI9YXN5bmMoKT0+e0NlKFwibGlicmFyeSBzdGFydGluZ1wiKTt0cnl7bGV0IG49e3RyYWNlcGFyZW50OnRoaXMuY29uZmlnLnRyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKX07YXdhaXQgdGhpcy5lbmdpbmU/LmNvbm5lY3QoSlNPTi5zdHJpbmdpZnkobikpLHRoaXMubGlicmFyeVN0YXJ0ZWQ9ITAsQ2UoXCJsaWJyYXJ5IHN0YXJ0ZWRcIil9Y2F0Y2gobil7bGV0IGk9dGhpcy5wYXJzZUluaXRFcnJvcihuLm1lc3NhZ2UpO3Rocm93IHR5cGVvZiBpPT1cInN0cmluZ1wiP246bmV3IEYoaS5tZXNzYWdlLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24saS5lcnJvcl9jb2RlKX1maW5hbGx5e3RoaXMubGlicmFyeVN0YXJ0aW5nUHJvbWlzZT12b2lkIDB9fTtyZXR1cm4gdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlPXRoaXMuY29uZmlnLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oXCJjb25uZWN0XCIsciksdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlfWFzeW5jIHN0b3AoKXtpZihhd2FpdCB0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2UsYXdhaXQgdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2UsdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlKXJldHVybiBDZShcImxpYnJhcnkgaXMgYWxyZWFkeSBzdG9wcGluZ1wiKSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2U7aWYoIXRoaXMubGlicmFyeVN0YXJ0ZWQpcmV0dXJuO2xldCByPWFzeW5jKCk9Pnthd2FpdCBuZXcgUHJvbWlzZShpPT5zZXRUaW1lb3V0KGksNSkpLENlKFwibGlicmFyeSBzdG9wcGluZ1wiKTtsZXQgbj17dHJhY2VwYXJlbnQ6dGhpcy5jb25maWcudHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpfTthd2FpdCB0aGlzLmVuZ2luZT8uZGlzY29ubmVjdChKU09OLnN0cmluZ2lmeShuKSksdGhpcy5saWJyYXJ5U3RhcnRlZD0hMSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2U9dm9pZCAwLENlKFwibGlicmFyeSBzdG9wcGVkXCIpfTtyZXR1cm4gdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlPXRoaXMuY29uZmlnLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oXCJkaXNjb25uZWN0XCIsciksdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlfXZlcnNpb24oKXtyZXR1cm4gdGhpcy52ZXJzaW9uSW5mbz10aGlzLmxpYnJhcnk/LnZlcnNpb24oKSx0aGlzLnZlcnNpb25JbmZvPy52ZXJzaW9uPz9cInVua25vd25cIn1kZWJ1Z1BhbmljKHIpe3JldHVybiB0aGlzLmxpYnJhcnk/LmRlYnVnUGFuaWMocil9YXN5bmMgcmVxdWVzdChyLHt0cmFjZXBhcmVudDpuLGludGVyYWN0aXZlVHJhbnNhY3Rpb246aX0pe0NlKGBzZW5kaW5nIHJlcXVlc3QsIHRoaXMubGlicmFyeVN0YXJ0ZWQ6ICR7dGhpcy5saWJyYXJ5U3RhcnRlZH1gKTtsZXQgbz1KU09OLnN0cmluZ2lmeSh7dHJhY2VwYXJlbnQ6bn0pLHM9SlNPTi5zdHJpbmdpZnkocik7dHJ5e2F3YWl0IHRoaXMuc3RhcnQoKSx0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZT10aGlzLmVuZ2luZT8ucXVlcnkocyxvLGk/LmlkKSx0aGlzLmxhc3RRdWVyeT1zO2xldCBhPXRoaXMucGFyc2VFbmdpbmVSZXNwb25zZShhd2FpdCB0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZSk7aWYoYS5lcnJvcnMpdGhyb3cgYS5lcnJvcnMubGVuZ3RoPT09MT90aGlzLmJ1aWxkUXVlcnlFcnJvcihhLmVycm9yc1swXSk6bmV3IEsoSlNPTi5zdHJpbmdpZnkoYS5lcnJvcnMpLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtpZih0aGlzLmxvZ2dlclJ1c3RQYW5pYyl0aHJvdyB0aGlzLmxvZ2dlclJ1c3RQYW5pYztyZXR1cm57ZGF0YTphLGVsYXBzZWQ6MH19Y2F0Y2goYSl7aWYoYSBpbnN0YW5jZW9mIEYpdGhyb3cgYTtpZihhLmNvZGU9PT1cIkdlbmVyaWNGYWlsdXJlXCImJmEubWVzc2FnZT8uc3RhcnRzV2l0aChcIlBBTklDOlwiKSl0aHJvdyBuZXcgdWUodGhpcy5nZXRFcnJvck1lc3NhZ2VXaXRoTGluayhhLm1lc3NhZ2UpLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pO2xldCBsPXRoaXMucGFyc2VSZXF1ZXN0RXJyb3IoYS5tZXNzYWdlKTt0aHJvdyB0eXBlb2YgbD09XCJzdHJpbmdcIj9hOm5ldyBLKGAke2wubWVzc2FnZX1cbiR7bC5iYWNrdHJhY2V9YCx7Y2xpZW50VmVyc2lvbjp0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9ufSl9fWFzeW5jIHJlcXVlc3RCYXRjaChyLHt0cmFuc2FjdGlvbjpuLHRyYWNlcGFyZW50Oml9KXtDZShcInJlcXVlc3RCYXRjaFwiKTtsZXQgbz1wbihyLG4pO2F3YWl0IHRoaXMuc3RhcnQoKSx0aGlzLmxhc3RRdWVyeT1KU09OLnN0cmluZ2lmeShvKSx0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZT10aGlzLmVuZ2luZS5xdWVyeSh0aGlzLmxhc3RRdWVyeSxKU09OLnN0cmluZ2lmeSh7dHJhY2VwYXJlbnQ6aX0pLCRhKG4pKTtsZXQgcz1hd2FpdCB0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZSxhPXRoaXMucGFyc2VFbmdpbmVSZXNwb25zZShzKTtpZihhLmVycm9ycyl0aHJvdyBhLmVycm9ycy5sZW5ndGg9PT0xP3RoaXMuYnVpbGRRdWVyeUVycm9yKGEuZXJyb3JzWzBdKTpuZXcgSyhKU09OLnN0cmluZ2lmeShhLmVycm9ycykse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pO2xldHtiYXRjaFJlc3VsdDpsLGVycm9yczp1fT1hO2lmKEFycmF5LmlzQXJyYXkobCkpcmV0dXJuIGwubWFwKGM9PmMuZXJyb3JzJiZjLmVycm9ycy5sZW5ndGg+MD90aGlzLmxvZ2dlclJ1c3RQYW5pYz8/dGhpcy5idWlsZFF1ZXJ5RXJyb3IoYy5lcnJvcnNbMF0pOntkYXRhOmMsZWxhcHNlZDowfSk7dGhyb3cgdSYmdS5sZW5ndGg9PT0xP25ldyBFcnJvcih1WzBdLmVycm9yKTpuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoYSkpfWJ1aWxkUXVlcnlFcnJvcihyKXtpZihyLnVzZXJfZmFjaW5nX2Vycm9yLmlzX3BhbmljKXJldHVybiBuZXcgdWUodGhpcy5nZXRFcnJvck1lc3NhZ2VXaXRoTGluayhyLnVzZXJfZmFjaW5nX2Vycm9yLm1lc3NhZ2UpLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pO2lmKHIudXNlcl9mYWNpbmdfZXJyb3IuZXJyb3JfY29kZT09PWRkJiZ0aGlzLmNvbmZpZy5hZGFwdGVyKXtsZXQgbj1yLnVzZXJfZmFjaW5nX2Vycm9yLm1ldGE/LmlkO19yKHR5cGVvZiBuPT1cIm51bWJlclwiLFwiTWFsZm9ybWVkIGV4dGVybmFsIEpTIGVycm9yIHJlY2VpdmVkIGZyb20gdGhlIGVuZ2luZVwiKTtsZXQgaT10aGlzLmNvbmZpZy5hZGFwdGVyLmVycm9yUmVnaXN0cnkuY29uc3VtZUVycm9yKG4pO3JldHVybiBfcihpLFwiRXh0ZXJuYWwgZXJyb3Igd2l0aCByZXBvcnRlZCBpZCB3YXMgbm90IHJlZ2lzdGVyZWRcIiksaS5lcnJvcn1yZXR1cm4gWnQocix0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uKX1hc3luYyBtZXRyaWNzKHIpe2F3YWl0IHRoaXMuc3RhcnQoKTtsZXQgbj1hd2FpdCB0aGlzLmVuZ2luZS5tZXRyaWNzKEpTT04uc3RyaW5naWZ5KHIpKTtyZXR1cm4gci5mb3JtYXQ9PT1cInByb21ldGhldXNcIj9uOnRoaXMucGFyc2VFbmdpbmVSZXNwb25zZShuKX19O2Z1bmN0aW9uIFVhKGUsdCl7bGV0IHI7dHJ5e3I9ZG4oe2lubGluZURhdGFzb3VyY2VzOnQuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczp0Lm92ZXJyaWRlRGF0YXNvdXJjZXMsZW52OnsuLi50LmVudiwuLi5wcm9jZXNzLmVudn0sY2xpZW50VmVyc2lvbjp0LmNsaWVudFZlcnNpb259KX1jYXRjaHt9ZS5ub0VuZ2luZSE9PSEwJiZyPy5zdGFydHNXaXRoKFwicHJpc21hOi8vXCIpJiZxdChcInJlY29tbWVuZC0tbm8tZW5naW5lXCIsXCJJbiBwcm9kdWN0aW9uLCB3ZSByZWNvbW1lbmQgdXNpbmcgYHByaXNtYSBnZW5lcmF0ZSAtLW5vLWVuZ2luZWAgKFNlZTogYHByaXNtYSBnZW5lcmF0ZSAtLWhlbHBgKVwiKTtsZXQgbj1abih0LmdlbmVyYXRvcik7aWYocj8uc3RhcnRzV2l0aChcInByaXNtYTovL1wiKXx8ZS5ub0VuZ2luZSlyZXR1cm4gbmV3IGRyKHQpO2lmKG49PT1cImxpYnJhcnlcIilyZXR1cm4gbmV3IG1yKHQpO3Rocm93XCJiaW5hcnlcIixuZXcgWChcIkludmFsaWQgY2xpZW50IGVuZ2luZSB0eXBlLCBwbGVhc2UgdXNlIGBsaWJyYXJ5YCBvciBgYmluYXJ5YFwiLHtjbGllbnRWZXJzaW9uOnQuY2xpZW50VmVyc2lvbn0pfWZ1bmN0aW9uIGduKHtnZW5lcmF0b3I6ZX0pe3JldHVybiBlPy5wcmV2aWV3RmVhdHVyZXM/P1tdfXZhciBXYT1TKFVpKCkpO2Z1bmN0aW9uIEphKGUsdCl7bGV0IHI9SGEoZSksbj1nZChyKSxpPWhkKG4pO2k/eW4oaSx0KTp0LmFkZEVycm9yTWVzc2FnZSgoKT0+XCJVbmtub3duIGVycm9yXCIpfWZ1bmN0aW9uIEhhKGUpe3JldHVybiBlLmVycm9ycy5mbGF0TWFwKHQ9PnQua2luZD09PVwiVW5pb25cIj9IYSh0KTpbdF0pfWZ1bmN0aW9uIGdkKGUpe2xldCB0PW5ldyBNYXAscj1bXTtmb3IobGV0IG4gb2YgZSl7aWYobi5raW5kIT09XCJJbnZhbGlkQXJndW1lbnRUeXBlXCIpe3IucHVzaChuKTtjb250aW51ZX1sZXQgaT1gJHtuLnNlbGVjdGlvblBhdGguam9pbihcIi5cIil9OiR7bi5hcmd1bWVudFBhdGguam9pbihcIi5cIil9YCxvPXQuZ2V0KGkpO28/dC5zZXQoaSx7Li4ubixhcmd1bWVudDp7Li4ubi5hcmd1bWVudCx0eXBlTmFtZXM6eWQoby5hcmd1bWVudC50eXBlTmFtZXMsbi5hcmd1bWVudC50eXBlTmFtZXMpfX0pOnQuc2V0KGksbil9cmV0dXJuIHIucHVzaCguLi50LnZhbHVlcygpKSxyfWZ1bmN0aW9uIHlkKGUsdCl7cmV0dXJuWy4uLm5ldyBTZXQoZS5jb25jYXQodCkpXX1mdW5jdGlvbiBoZChlKXtyZXR1cm4gcGkoZSwodCxyKT0+e2xldCBuPVFhKHQpLGk9UWEocik7cmV0dXJuIG4hPT1pP24taTpHYSh0KS1HYShyKX0pfWZ1bmN0aW9uIFFhKGUpe2xldCB0PTA7cmV0dXJuIEFycmF5LmlzQXJyYXkoZS5zZWxlY3Rpb25QYXRoKSYmKHQrPWUuc2VsZWN0aW9uUGF0aC5sZW5ndGgpLEFycmF5LmlzQXJyYXkoZS5hcmd1bWVudFBhdGgpJiYodCs9ZS5hcmd1bWVudFBhdGgubGVuZ3RoKSx0fWZ1bmN0aW9uIEdhKGUpe3N3aXRjaChlLmtpbmQpe2Nhc2VcIkludmFsaWRBcmd1bWVudFZhbHVlXCI6Y2FzZVwiVmFsdWVUb29MYXJnZVwiOnJldHVybiAyMDtjYXNlXCJJbnZhbGlkQXJndW1lbnRUeXBlXCI6cmV0dXJuIDEwO2Nhc2VcIlJlcXVpcmVkQXJndW1lbnRNaXNzaW5nXCI6cmV0dXJuLTEwO2RlZmF1bHQ6cmV0dXJuIDB9fXZhciBTZT1jbGFzc3tjb25zdHJ1Y3Rvcih0LHIpe3RoaXMubmFtZT10O3RoaXMudmFsdWU9cjt0aGlzLmlzUmVxdWlyZWQ9ITF9bWFrZVJlcXVpcmVkKCl7cmV0dXJuIHRoaXMuaXNSZXF1aXJlZD0hMCx0aGlzfXdyaXRlKHQpe2xldHtjb2xvcnM6e2dyZWVuOnJ9fT10LmNvbnRleHQ7dC5hZGRNYXJnaW5TeW1ib2wocih0aGlzLmlzUmVxdWlyZWQ/XCIrXCI6XCI/XCIpKSx0LndyaXRlKHIodGhpcy5uYW1lKSksdGhpcy5pc1JlcXVpcmVkfHx0LndyaXRlKHIoXCI/XCIpKSx0LndyaXRlKHIoXCI6IFwiKSksdHlwZW9mIHRoaXMudmFsdWU9PVwic3RyaW5nXCI/dC53cml0ZShyKHRoaXMudmFsdWUpKTp0LndyaXRlKHRoaXMudmFsdWUpfX07dmFyIGhuPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5maWVsZHM9W119YWRkRmllbGQodCxyKXtyZXR1cm4gdGhpcy5maWVsZHMucHVzaCh7d3JpdGUobil7bGV0e2dyZWVuOmksZGltOm99PW4uY29udGV4dC5jb2xvcnM7bi53cml0ZShpKG8oYCR7dH06ICR7cn1gKSkpLmFkZE1hcmdpblN5bWJvbChpKG8oXCIrXCIpKSl9fSksdGhpc313cml0ZSh0KXtsZXR7Y29sb3JzOntncmVlbjpyfX09dC5jb250ZXh0O3Qud3JpdGVMaW5lKHIoXCJ7XCIpKS53aXRoSW5kZW50KCgpPT57dC53cml0ZUpvaW5lZChidCx0aGlzLmZpZWxkcykubmV3TGluZSgpfSkud3JpdGUocihcIn1cIikpLmFkZE1hcmdpblN5bWJvbChyKFwiK1wiKSl9fTtmdW5jdGlvbiB5bihlLHQpe3N3aXRjaChlLmtpbmQpe2Nhc2VcIkluY2x1ZGVBbmRTZWxlY3RcIjp4ZChlLHQpO2JyZWFrO2Nhc2VcIkluY2x1ZGVPblNjYWxhclwiOmJkKGUsdCk7YnJlYWs7Y2FzZVwiRW1wdHlTZWxlY3Rpb25cIjpFZChlLHQpO2JyZWFrO2Nhc2VcIlVua25vd25TZWxlY3Rpb25GaWVsZFwiOndkKGUsdCk7YnJlYWs7Y2FzZVwiVW5rbm93bkFyZ3VtZW50XCI6UGQoZSx0KTticmVhaztjYXNlXCJVbmtub3duSW5wdXRGaWVsZFwiOnZkKGUsdCk7YnJlYWs7Y2FzZVwiUmVxdWlyZWRBcmd1bWVudE1pc3NpbmdcIjpUZChlLHQpO2JyZWFrO2Nhc2VcIkludmFsaWRBcmd1bWVudFR5cGVcIjpDZChlLHQpO2JyZWFrO2Nhc2VcIkludmFsaWRBcmd1bWVudFZhbHVlXCI6QWQoZSx0KTticmVhaztjYXNlXCJWYWx1ZVRvb0xhcmdlXCI6TWQoZSx0KTticmVhaztjYXNlXCJTb21lRmllbGRzTWlzc2luZ1wiOlJkKGUsdCk7YnJlYWs7Y2FzZVwiVG9vTWFueUZpZWxkc0dpdmVuXCI6U2QoZSx0KTticmVhaztjYXNlXCJVbmlvblwiOkphKGUsdCk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWQ6IFwiK2Uua2luZCl9fWZ1bmN0aW9uIHhkKGUsdCl7bGV0IHI9dC5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk7ciYmciBpbnN0YW5jZW9mIFEmJihyLmdldEZpZWxkKFwiaW5jbHVkZVwiKT8ubWFya0FzRXJyb3IoKSxyLmdldEZpZWxkKFwic2VsZWN0XCIpPy5tYXJrQXNFcnJvcigpKSx0LmFkZEVycm9yTWVzc2FnZShuPT5gUGxlYXNlICR7bi5ib2xkKFwiZWl0aGVyXCIpfSB1c2UgJHtuLmdyZWVuKFwiYGluY2x1ZGVgXCIpfSBvciAke24uZ3JlZW4oXCJgc2VsZWN0YFwiKX0sIGJ1dCAke24ucmVkKFwibm90IGJvdGhcIil9IGF0IHRoZSBzYW1lIHRpbWUuYCl9ZnVuY3Rpb24gYmQoZSx0KXtsZXRbcixuXT14bihlLnNlbGVjdGlvblBhdGgpLGk9ZS5vdXRwdXRUeXBlLG89dC5hcmd1bWVudHMuZ2V0RGVlcFNlbGVjdGlvblBhcmVudChyKT8udmFsdWU7aWYobyYmKG8uZ2V0RmllbGQobik/Lm1hcmtBc0Vycm9yKCksaSkpZm9yKGxldCBzIG9mIGkuZmllbGRzKXMuaXNSZWxhdGlvbiYmby5hZGRTdWdnZXN0aW9uKG5ldyBTZShzLm5hbWUsXCJ0cnVlXCIpKTt0LmFkZEVycm9yTWVzc2FnZShzPT57bGV0IGE9YEludmFsaWQgc2NhbGFyIGZpZWxkICR7cy5yZWQoYFxcYCR7bn1cXGBgKX0gZm9yICR7cy5ib2xkKFwiaW5jbHVkZVwiKX0gc3RhdGVtZW50YDtyZXR1cm4gaT9hKz1gIG9uIG1vZGVsICR7cy5ib2xkKGkubmFtZSl9LiAke2ZyKHMpfWA6YSs9XCIuXCIsYSs9YFxuTm90ZSB0aGF0ICR7cy5ib2xkKFwiaW5jbHVkZVwiKX0gc3RhdGVtZW50cyBvbmx5IGFjY2VwdCByZWxhdGlvbiBmaWVsZHMuYCxhfSl9ZnVuY3Rpb24gRWQoZSx0KXtsZXQgcj1lLm91dHB1dFR5cGUsbj10LmFyZ3VtZW50cy5nZXREZWVwU2VsZWN0aW9uUGFyZW50KGUuc2VsZWN0aW9uUGF0aCk/LnZhbHVlLGk9bj8uaXNFbXB0eSgpPz8hMTtuJiYobi5yZW1vdmVBbGxGaWVsZHMoKSxaYShuLHIpKSx0LmFkZEVycm9yTWVzc2FnZShvPT5pP2BUaGUgJHtvLnJlZChcImBzZWxlY3RgXCIpfSBzdGF0ZW1lbnQgZm9yIHR5cGUgJHtvLmJvbGQoci5uYW1lKX0gbXVzdCBub3QgYmUgZW1wdHkuICR7ZnIobyl9YDpgVGhlICR7by5yZWQoXCJgc2VsZWN0YFwiKX0gc3RhdGVtZW50IGZvciB0eXBlICR7by5ib2xkKHIubmFtZSl9IG5lZWRzICR7by5ib2xkKFwiYXQgbGVhc3Qgb25lIHRydXRoeSB2YWx1ZVwiKX0uYCl9ZnVuY3Rpb24gd2QoZSx0KXtsZXRbcixuXT14bihlLnNlbGVjdGlvblBhdGgpLGk9dC5hcmd1bWVudHMuZ2V0RGVlcFNlbGVjdGlvblBhcmVudChyKTtpJiYoaS52YWx1ZS5nZXRGaWVsZChuKT8ubWFya0FzRXJyb3IoKSxaYShpLnZhbHVlLGUub3V0cHV0VHlwZSkpLHQuYWRkRXJyb3JNZXNzYWdlKG89PntsZXQgcz1bYFVua25vd24gZmllbGQgJHtvLnJlZChgXFxgJHtufVxcYGApfWBdO3JldHVybiBpJiZzLnB1c2goYGZvciAke28uYm9sZChpLmtpbmQpfSBzdGF0ZW1lbnRgKSxzLnB1c2goYG9uIG1vZGVsICR7by5ib2xkKGBcXGAke2Uub3V0cHV0VHlwZS5uYW1lfVxcYGApfS5gKSxzLnB1c2goZnIobykpLHMuam9pbihcIiBcIil9KX1mdW5jdGlvbiBQZChlLHQpe2xldCByPWUuYXJndW1lbnRQYXRoWzBdLG49dC5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk7biBpbnN0YW5jZW9mIFEmJihuLmdldEZpZWxkKHIpPy5tYXJrQXNFcnJvcigpLElkKG4sZS5hcmd1bWVudHMpKSx0LmFkZEVycm9yTWVzc2FnZShpPT56YShpLHIsZS5hcmd1bWVudHMubWFwKG89Pm8ubmFtZSkpKX1mdW5jdGlvbiB2ZChlLHQpe2xldFtyLG5dPXhuKGUuYXJndW1lbnRQYXRoKSxpPXQuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpO2lmKGkgaW5zdGFuY2VvZiBRKXtpLmdldERlZXBGaWVsZChlLmFyZ3VtZW50UGF0aCk/Lm1hcmtBc0Vycm9yKCk7bGV0IG89aS5nZXREZWVwRmllbGRWYWx1ZShyKTtvIGluc3RhbmNlb2YgUSYmWGEobyxlLmlucHV0VHlwZSl9dC5hZGRFcnJvck1lc3NhZ2Uobz0+emEobyxuLGUuaW5wdXRUeXBlLmZpZWxkcy5tYXAocz0+cy5uYW1lKSkpfWZ1bmN0aW9uIHphKGUsdCxyKXtsZXQgbj1bYFVua25vd24gYXJndW1lbnQgXFxgJHtlLnJlZCh0KX1cXGAuYF0saT1GZCh0LHIpO3JldHVybiBpJiZuLnB1c2goYERpZCB5b3UgbWVhbiBcXGAke2UuZ3JlZW4oaSl9XFxgP2ApLHIubGVuZ3RoPjAmJm4ucHVzaChmcihlKSksbi5qb2luKFwiIFwiKX1mdW5jdGlvbiBUZChlLHQpe2xldCByO3QuYWRkRXJyb3JNZXNzYWdlKGw9PnI/LnZhbHVlIGluc3RhbmNlb2YgRyYmci52YWx1ZS50ZXh0PT09XCJudWxsXCI/YEFyZ3VtZW50IFxcYCR7bC5ncmVlbihvKX1cXGAgbXVzdCBub3QgYmUgJHtsLnJlZChcIm51bGxcIil9LmA6YEFyZ3VtZW50IFxcYCR7bC5ncmVlbihvKX1cXGAgaXMgbWlzc2luZy5gKTtsZXQgbj10LmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKTtpZighKG4gaW5zdGFuY2VvZiBRKSlyZXR1cm47bGV0W2ksb109eG4oZS5hcmd1bWVudFBhdGgpLHM9bmV3IGhuLGE9bi5nZXREZWVwRmllbGRWYWx1ZShpKTtpZihhIGluc3RhbmNlb2YgUSlpZihyPWEuZ2V0RmllbGQobyksciYmYS5yZW1vdmVGaWVsZChvKSxlLmlucHV0VHlwZXMubGVuZ3RoPT09MSYmZS5pbnB1dFR5cGVzWzBdLmtpbmQ9PT1cIm9iamVjdFwiKXtmb3IobGV0IGwgb2YgZS5pbnB1dFR5cGVzWzBdLmZpZWxkcylzLmFkZEZpZWxkKGwubmFtZSxsLnR5cGVOYW1lcy5qb2luKFwiIHwgXCIpKTthLmFkZFN1Z2dlc3Rpb24obmV3IFNlKG8scykubWFrZVJlcXVpcmVkKCkpfWVsc2V7bGV0IGw9ZS5pbnB1dFR5cGVzLm1hcChZYSkuam9pbihcIiB8IFwiKTthLmFkZFN1Z2dlc3Rpb24obmV3IFNlKG8sbCkubWFrZVJlcXVpcmVkKCkpfX1mdW5jdGlvbiBZYShlKXtyZXR1cm4gZS5raW5kPT09XCJsaXN0XCI/YCR7WWEoZS5lbGVtZW50VHlwZSl9W11gOmUubmFtZX1mdW5jdGlvbiBDZChlLHQpe2xldCByPWUuYXJndW1lbnQubmFtZSxuPXQuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpO24gaW5zdGFuY2VvZiBRJiZuLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKT8ubWFya0FzRXJyb3IoKSx0LmFkZEVycm9yTWVzc2FnZShpPT57bGV0IG89Ym4oXCJvclwiLGUuYXJndW1lbnQudHlwZU5hbWVzLm1hcChzPT5pLmdyZWVuKHMpKSk7cmV0dXJuYEFyZ3VtZW50IFxcYCR7aS5ib2xkKHIpfVxcYDogSW52YWxpZCB2YWx1ZSBwcm92aWRlZC4gRXhwZWN0ZWQgJHtvfSwgcHJvdmlkZWQgJHtpLnJlZChlLmluZmVycmVkVHlwZSl9LmB9KX1mdW5jdGlvbiBBZChlLHQpe2xldCByPWUuYXJndW1lbnQubmFtZSxuPXQuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpO24gaW5zdGFuY2VvZiBRJiZuLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKT8ubWFya0FzRXJyb3IoKSx0LmFkZEVycm9yTWVzc2FnZShpPT57bGV0IG89W2BJbnZhbGlkIHZhbHVlIGZvciBhcmd1bWVudCBcXGAke2kuYm9sZChyKX1cXGBgXTtpZihlLnVuZGVybHlpbmdFcnJvciYmby5wdXNoKGA6ICR7ZS51bmRlcmx5aW5nRXJyb3J9YCksby5wdXNoKFwiLlwiKSxlLmFyZ3VtZW50LnR5cGVOYW1lcy5sZW5ndGg+MCl7bGV0IHM9Ym4oXCJvclwiLGUuYXJndW1lbnQudHlwZU5hbWVzLm1hcChhPT5pLmdyZWVuKGEpKSk7by5wdXNoKGAgRXhwZWN0ZWQgJHtzfS5gKX1yZXR1cm4gby5qb2luKFwiXCIpfSl9ZnVuY3Rpb24gTWQoZSx0KXtsZXQgcj1lLmFyZ3VtZW50Lm5hbWUsbj10LmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKSxpO2lmKG4gaW5zdGFuY2VvZiBRKXtsZXQgcz1uLmdldERlZXBGaWVsZChlLmFyZ3VtZW50UGF0aCk/LnZhbHVlO3M/Lm1hcmtBc0Vycm9yKCkscyBpbnN0YW5jZW9mIEcmJihpPXMudGV4dCl9dC5hZGRFcnJvck1lc3NhZ2Uobz0+e2xldCBzPVtcIlVuYWJsZSB0byBmaXQgdmFsdWVcIl07cmV0dXJuIGkmJnMucHVzaChvLnJlZChpKSkscy5wdXNoKGBpbnRvIGEgNjQtYml0IHNpZ25lZCBpbnRlZ2VyIGZvciBmaWVsZCBcXGAke28uYm9sZChyKX1cXGBgKSxzLmpvaW4oXCIgXCIpfSl9ZnVuY3Rpb24gUmQoZSx0KXtsZXQgcj1lLmFyZ3VtZW50UGF0aFtlLmFyZ3VtZW50UGF0aC5sZW5ndGgtMV0sbj10LmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKTtpZihuIGluc3RhbmNlb2YgUSl7bGV0IGk9bi5nZXREZWVwRmllbGRWYWx1ZShlLmFyZ3VtZW50UGF0aCk7aSBpbnN0YW5jZW9mIFEmJlhhKGksZS5pbnB1dFR5cGUpfXQuYWRkRXJyb3JNZXNzYWdlKGk9PntsZXQgbz1bYEFyZ3VtZW50IFxcYCR7aS5ib2xkKHIpfVxcYCBvZiB0eXBlICR7aS5ib2xkKGUuaW5wdXRUeXBlLm5hbWUpfSBuZWVkc2BdO3JldHVybiBlLmNvbnN0cmFpbnRzLm1pbkZpZWxkQ291bnQ9PT0xP2UuY29uc3RyYWludHMucmVxdWlyZWRGaWVsZHM/by5wdXNoKGAke2kuZ3JlZW4oXCJhdCBsZWFzdCBvbmUgb2ZcIil9ICR7Ym4oXCJvclwiLGUuY29uc3RyYWludHMucmVxdWlyZWRGaWVsZHMubWFwKHM9PmBcXGAke2kuYm9sZChzKX1cXGBgKSl9IGFyZ3VtZW50cy5gKTpvLnB1c2goYCR7aS5ncmVlbihcImF0IGxlYXN0IG9uZVwiKX0gYXJndW1lbnQuYCk6by5wdXNoKGAke2kuZ3JlZW4oYGF0IGxlYXN0ICR7ZS5jb25zdHJhaW50cy5taW5GaWVsZENvdW50fWApfSBhcmd1bWVudHMuYCksby5wdXNoKGZyKGkpKSxvLmpvaW4oXCIgXCIpfSl9ZnVuY3Rpb24gU2QoZSx0KXtsZXQgcj1lLmFyZ3VtZW50UGF0aFtlLmFyZ3VtZW50UGF0aC5sZW5ndGgtMV0sbj10LmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKSxpPVtdO2lmKG4gaW5zdGFuY2VvZiBRKXtsZXQgbz1uLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKTtvIGluc3RhbmNlb2YgUSYmKG8ubWFya0FzRXJyb3IoKSxpPU9iamVjdC5rZXlzKG8uZ2V0RmllbGRzKCkpKX10LmFkZEVycm9yTWVzc2FnZShvPT57bGV0IHM9W2BBcmd1bWVudCBcXGAke28uYm9sZChyKX1cXGAgb2YgdHlwZSAke28uYm9sZChlLmlucHV0VHlwZS5uYW1lKX0gbmVlZHNgXTtyZXR1cm4gZS5jb25zdHJhaW50cy5taW5GaWVsZENvdW50PT09MSYmZS5jb25zdHJhaW50cy5tYXhGaWVsZENvdW50PT0xP3MucHVzaChgJHtvLmdyZWVuKFwiZXhhY3RseSBvbmVcIil9IGFyZ3VtZW50LGApOmUuY29uc3RyYWludHMubWF4RmllbGRDb3VudD09MT9zLnB1c2goYCR7by5ncmVlbihcImF0IG1vc3Qgb25lXCIpfSBhcmd1bWVudCxgKTpzLnB1c2goYCR7by5ncmVlbihgYXQgbW9zdCAke2UuY29uc3RyYWludHMubWF4RmllbGRDb3VudH1gKX0gYXJndW1lbnRzLGApLHMucHVzaChgYnV0IHlvdSBwcm92aWRlZCAke2JuKFwiYW5kXCIsaS5tYXAoYT0+by5yZWQoYSkpKX0uIFBsZWFzZSBjaG9vc2VgKSxlLmNvbnN0cmFpbnRzLm1heEZpZWxkQ291bnQ9PT0xP3MucHVzaChcIm9uZS5cIik6cy5wdXNoKGAke2UuY29uc3RyYWludHMubWF4RmllbGRDb3VudH0uYCkscy5qb2luKFwiIFwiKX0pfWZ1bmN0aW9uIFphKGUsdCl7Zm9yKGxldCByIG9mIHQuZmllbGRzKWUuaGFzRmllbGQoci5uYW1lKXx8ZS5hZGRTdWdnZXN0aW9uKG5ldyBTZShyLm5hbWUsXCJ0cnVlXCIpKX1mdW5jdGlvbiBJZChlLHQpe2ZvcihsZXQgciBvZiB0KWUuaGFzRmllbGQoci5uYW1lKXx8ZS5hZGRTdWdnZXN0aW9uKG5ldyBTZShyLm5hbWUsci50eXBlTmFtZXMuam9pbihcIiB8IFwiKSkpfWZ1bmN0aW9uIFhhKGUsdCl7aWYodC5raW5kPT09XCJvYmplY3RcIilmb3IobGV0IHIgb2YgdC5maWVsZHMpZS5oYXNGaWVsZChyLm5hbWUpfHxlLmFkZFN1Z2dlc3Rpb24obmV3IFNlKHIubmFtZSxyLnR5cGVOYW1lcy5qb2luKFwiIHwgXCIpKSl9ZnVuY3Rpb24geG4oZSl7bGV0IHQ9Wy4uLmVdLHI9dC5wb3AoKTtpZighcil0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIGVtcHR5IHBhdGhcIik7cmV0dXJuW3Qscl19ZnVuY3Rpb24gZnIoe2dyZWVuOmUsZW5hYmxlZDp0fSl7cmV0dXJuXCJBdmFpbGFibGUgb3B0aW9ucyBhcmUgXCIrKHQ/YGxpc3RlZCBpbiAke2UoXCJncmVlblwiKX1gOlwibWFya2VkIHdpdGggP1wiKStcIi5cIn1mdW5jdGlvbiBibihlLHQpe2lmKHQubGVuZ3RoPT09MSlyZXR1cm4gdFswXTtsZXQgcj1bLi4udF0sbj1yLnBvcCgpO3JldHVybmAke3Iuam9pbihcIiwgXCIpfSAke2V9ICR7bn1gfXZhciBrZD0zO2Z1bmN0aW9uIEZkKGUsdCl7bGV0IHI9MS8wLG47Zm9yKGxldCBpIG9mIHQpe2xldCBvPSgwLFdhLmRlZmF1bHQpKGUsaSk7bz5rZHx8bzxyJiYocj1vLG49aSl9cmV0dXJuIG59ZnVuY3Rpb24gRW4oe2FyZ3M6ZSxlcnJvcnM6dCxlcnJvckZvcm1hdDpyLGNhbGxzaXRlOm4sb3JpZ2luYWxNZXRob2Q6aSxjbGllbnRWZXJzaW9uOm99KXtsZXQgcz1lbihlKTtmb3IobGV0IHAgb2YgdCl5bihwLHMpO2xldCBhPXI9PT1cInByZXR0eVwiP09zOlpyLGw9cy5yZW5kZXJBbGxNZXNzYWdlcyhhKSx1PW5ldyBtdCgwLHtjb2xvcnM6YX0pLndyaXRlKHMpLnRvU3RyaW5nKCksYz1QdCh7bWVzc2FnZTpsLGNhbGxzaXRlOm4sb3JpZ2luYWxNZXRob2Q6aSxzaG93Q29sb3JzOnI9PT1cInByZXR0eVwiLGNhbGxBcmd1bWVudHM6dX0pO3Rocm93IG5ldyBYKGMse2NsaWVudFZlcnNpb246b30pfXZhciBEZD17ZmluZFVuaXF1ZTpcImZpbmRVbmlxdWVcIixmaW5kVW5pcXVlT3JUaHJvdzpcImZpbmRVbmlxdWVPclRocm93XCIsZmluZEZpcnN0OlwiZmluZEZpcnN0XCIsZmluZEZpcnN0T3JUaHJvdzpcImZpbmRGaXJzdE9yVGhyb3dcIixmaW5kTWFueTpcImZpbmRNYW55XCIsY291bnQ6XCJhZ2dyZWdhdGVcIixjcmVhdGU6XCJjcmVhdGVPbmVcIixjcmVhdGVNYW55OlwiY3JlYXRlTWFueVwiLHVwZGF0ZTpcInVwZGF0ZU9uZVwiLHVwZGF0ZU1hbnk6XCJ1cGRhdGVNYW55XCIsdXBzZXJ0OlwidXBzZXJ0T25lXCIsZGVsZXRlOlwiZGVsZXRlT25lXCIsZGVsZXRlTWFueTpcImRlbGV0ZU1hbnlcIixleGVjdXRlUmF3OlwiZXhlY3V0ZVJhd1wiLHF1ZXJ5UmF3OlwicXVlcnlSYXdcIixhZ2dyZWdhdGU6XCJhZ2dyZWdhdGVcIixncm91cEJ5OlwiZ3JvdXBCeVwiLHJ1bkNvbW1hbmRSYXc6XCJydW5Db21tYW5kUmF3XCIsZmluZFJhdzpcImZpbmRSYXdcIixhZ2dyZWdhdGVSYXc6XCJhZ2dyZWdhdGVSYXdcIn07ZnVuY3Rpb24gZWwoe21vZGVsTmFtZTplLGFjdGlvbjp0LGFyZ3M6cixydW50aW1lRGF0YU1vZGVsOm4sZXh0ZW5zaW9uczppLGNhbGxzaXRlOm8sY2xpZW50TWV0aG9kOnMsZXJyb3JGb3JtYXQ6YSxjbGllbnRWZXJzaW9uOmx9KXtsZXQgdT1uZXcgS2koe3J1bnRpbWVEYXRhTW9kZWw6bixtb2RlbE5hbWU6ZSxhY3Rpb246dCxyb290QXJnczpyLGNhbGxzaXRlOm8sZXh0ZW5zaW9uczppLHNlbGVjdGlvblBhdGg6W10sYXJndW1lbnRQYXRoOltdLG9yaWdpbmFsTWV0aG9kOnMsZXJyb3JGb3JtYXQ6YSxjbGllbnRWZXJzaW9uOmx9KTtyZXR1cm57bW9kZWxOYW1lOmUsYWN0aW9uOkRkW3RdLHF1ZXJ5OlFpKHIsdSl9fWZ1bmN0aW9uIFFpKHtzZWxlY3Q6ZSxpbmNsdWRlOnQsLi4ucn09e30sbil7cmV0dXJue2FyZ3VtZW50czpybChyLG4pLHNlbGVjdGlvbjpPZChlLHQsbil9fWZ1bmN0aW9uIE9kKGUsdCxyKXtyZXR1cm4gZSYmdCYmci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkluY2x1ZGVBbmRTZWxlY3RcIixzZWxlY3Rpb25QYXRoOnIuZ2V0U2VsZWN0aW9uUGF0aCgpfSksZT9MZChlLHIpOl9kKHIsdCl9ZnVuY3Rpb24gX2QoZSx0KXtsZXQgcj17fTtyZXR1cm4gZS5tb2RlbCYmIWUuaXNSYXdBY3Rpb24oKSYmKHIuJGNvbXBvc2l0ZXM9ITAsci4kc2NhbGFycz0hMCksdCYmTmQocix0LGUpLHJ9ZnVuY3Rpb24gTmQoZSx0LHIpe2ZvcihsZXRbbixpXW9mIE9iamVjdC5lbnRyaWVzKHQpKXtsZXQgbz1yLmZpbmRGaWVsZChuKTtvJiZvPy5raW5kIT09XCJvYmplY3RcIiYmci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkluY2x1ZGVPblNjYWxhclwiLHNlbGVjdGlvblBhdGg6ci5nZXRTZWxlY3Rpb25QYXRoKCkuY29uY2F0KG4pLG91dHB1dFR5cGU6ci5nZXRPdXRwdXRUeXBlRGVzY3JpcHRpb24oKX0pLGk9PT0hMD9lW25dPSEwOnR5cGVvZiBpPT1cIm9iamVjdFwiJiYoZVtuXT1RaShpLHIubmVzdFNlbGVjdGlvbihuKSkpfX1mdW5jdGlvbiBMZChlLHQpe2xldCByPXt9LG49dC5nZXRDb21wdXRlZEZpZWxkcygpLGk9Z2EoZSxuKTtmb3IobGV0W28sc11vZiBPYmplY3QuZW50cmllcyhpKSl7bGV0IGE9dC5maW5kRmllbGQobyk7bj8uW29dJiYhYXx8KHM9PT0hMD9yW29dPSEwOnR5cGVvZiBzPT1cIm9iamVjdFwiJiYocltvXT1RaShzLHQubmVzdFNlbGVjdGlvbihvKSkpKX1yZXR1cm4gcn1mdW5jdGlvbiB0bChlLHQpe2lmKGU9PT1udWxsKXJldHVybiBudWxsO2lmKHR5cGVvZiBlPT1cInN0cmluZ1wifHx0eXBlb2YgZT09XCJudW1iZXJcInx8dHlwZW9mIGU9PVwiYm9vbGVhblwiKXJldHVybiBlO2lmKHR5cGVvZiBlPT1cImJpZ2ludFwiKXJldHVybnskdHlwZTpcIkJpZ0ludFwiLHZhbHVlOlN0cmluZyhlKX07aWYoZnQoZSkpe2lmKEJyKGUpKXJldHVybnskdHlwZTpcIkRhdGVUaW1lXCIsdmFsdWU6ZS50b0lTT1N0cmluZygpfTt0LnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixzZWxlY3Rpb25QYXRoOnQuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50UGF0aDp0LmdldEFyZ3VtZW50UGF0aCgpLGFyZ3VtZW50OntuYW1lOnQuZ2V0QXJndW1lbnROYW1lKCksdHlwZU5hbWVzOltcIkRhdGVcIl19LHVuZGVybHlpbmdFcnJvcjpcIlByb3ZpZGVkIERhdGUgb2JqZWN0IGlzIGludmFsaWRcIn0pfWlmKHh0KGUpKXJldHVybnskdHlwZTpcIkZpZWxkUmVmXCIsdmFsdWU6e19yZWY6ZS5uYW1lLF9jb250YWluZXI6ZS5tb2RlbE5hbWV9fTtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiAkZChlLHQpO2lmKEFycmF5QnVmZmVyLmlzVmlldyhlKSlyZXR1cm57JHR5cGU6XCJCeXRlc1wiLHZhbHVlOkJ1ZmZlci5mcm9tKGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfTtpZihxZChlKSlyZXR1cm4gZS52YWx1ZXM7aWYoaHQoZSkpcmV0dXJueyR0eXBlOlwiRGVjaW1hbFwiLHZhbHVlOmUudG9GaXhlZCgpfTtpZihlIGluc3RhbmNlb2YgeGUpe2lmKGUhPT0kci5pbnN0YW5jZXNbZS5fZ2V0TmFtZSgpXSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIE9iamVjdEVudW1WYWx1ZVwiKTtyZXR1cm57JHR5cGU6XCJFbnVtXCIsdmFsdWU6ZS5fZ2V0TmFtZSgpfX1pZihWZChlKSlyZXR1cm4gZS50b0pTT04oKTtpZih0eXBlb2YgZT09XCJvYmplY3RcIilyZXR1cm4gcmwoZSx0KTt0LnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixzZWxlY3Rpb25QYXRoOnQuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50UGF0aDp0LmdldEFyZ3VtZW50UGF0aCgpLGFyZ3VtZW50OntuYW1lOnQuZ2V0QXJndW1lbnROYW1lKCksdHlwZU5hbWVzOltdfSx1bmRlcmx5aW5nRXJyb3I6YFdlIGNvdWxkIG5vdCBzZXJpYWxpemUgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9IHZhbHVlLiBTZXJpYWxpemUgdGhlIG9iamVjdCB0byBKU09OIG9yIGltcGxlbWVudCBhIFwiLnRvSlNPTigpXCIgbWV0aG9kIG9uIGl0YH0pfWZ1bmN0aW9uIHJsKGUsdCl7aWYoZS4kdHlwZSlyZXR1cm57JHR5cGU6XCJKc29uXCIsdmFsdWU6SlNPTi5zdHJpbmdpZnkoZSl9O2xldCByPXt9O2ZvcihsZXQgbiBpbiBlKXtsZXQgaT1lW25dO2khPT12b2lkIDAmJihyW25dPXRsKGksdC5uZXN0QXJndW1lbnQobikpKX1yZXR1cm4gcn1mdW5jdGlvbiAkZChlLHQpe2xldCByPVtdO2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtsZXQgaT10Lm5lc3RBcmd1bWVudChTdHJpbmcobikpLG89ZVtuXTtvPT09dm9pZCAwJiZ0LnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixzZWxlY3Rpb25QYXRoOmkuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50UGF0aDppLmdldEFyZ3VtZW50UGF0aCgpLGFyZ3VtZW50OntuYW1lOmAke3QuZ2V0QXJndW1lbnROYW1lKCl9WyR7bn1dYCx0eXBlTmFtZXM6W119LHVuZGVybHlpbmdFcnJvcjpcIkNhbiBub3QgdXNlIGB1bmRlZmluZWRgIHZhbHVlIHdpdGhpbiBhcnJheS4gVXNlIGBudWxsYCBvciBmaWx0ZXIgb3V0IGB1bmRlZmluZWRgIHZhbHVlc1wifSksci5wdXNoKHRsKG8saSkpfXJldHVybiByfWZ1bmN0aW9uIHFkKGUpe3JldHVybiB0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGwmJmUuX19wcmlzbWFSYXdQYXJhbWV0ZXJzX189PT0hMH1mdW5jdGlvbiBWZChlKXtyZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsJiZ0eXBlb2YgZS50b0pTT049PVwiZnVuY3Rpb25cIn12YXIgS2k9Y2xhc3MgZXtjb25zdHJ1Y3Rvcih0KXt0aGlzLnBhcmFtcz10O3RoaXMucGFyYW1zLm1vZGVsTmFtZSYmKHRoaXMubW9kZWw9dGhpcy5wYXJhbXMucnVudGltZURhdGFNb2RlbC5tb2RlbHNbdGhpcy5wYXJhbXMubW9kZWxOYW1lXSl9dGhyb3dWYWxpZGF0aW9uRXJyb3IodCl7RW4oe2Vycm9yczpbdF0sb3JpZ2luYWxNZXRob2Q6dGhpcy5wYXJhbXMub3JpZ2luYWxNZXRob2QsYXJnczp0aGlzLnBhcmFtcy5yb290QXJncz8/e30sY2FsbHNpdGU6dGhpcy5wYXJhbXMuY2FsbHNpdGUsZXJyb3JGb3JtYXQ6dGhpcy5wYXJhbXMuZXJyb3JGb3JtYXQsY2xpZW50VmVyc2lvbjp0aGlzLnBhcmFtcy5jbGllbnRWZXJzaW9ufSl9Z2V0U2VsZWN0aW9uUGF0aCgpe3JldHVybiB0aGlzLnBhcmFtcy5zZWxlY3Rpb25QYXRofWdldEFyZ3VtZW50UGF0aCgpe3JldHVybiB0aGlzLnBhcmFtcy5hcmd1bWVudFBhdGh9Z2V0QXJndW1lbnROYW1lKCl7cmV0dXJuIHRoaXMucGFyYW1zLmFyZ3VtZW50UGF0aFt0aGlzLnBhcmFtcy5hcmd1bWVudFBhdGgubGVuZ3RoLTFdfWdldE91dHB1dFR5cGVEZXNjcmlwdGlvbigpe2lmKCEoIXRoaXMucGFyYW1zLm1vZGVsTmFtZXx8IXRoaXMubW9kZWwpKXJldHVybntuYW1lOnRoaXMucGFyYW1zLm1vZGVsTmFtZSxmaWVsZHM6dGhpcy5tb2RlbC5maWVsZHMubWFwKHQ9Pih7bmFtZTp0Lm5hbWUsdHlwZU5hbWU6XCJib29sZWFuXCIsaXNSZWxhdGlvbjp0LmtpbmQ9PT1cIm9iamVjdFwifSkpfX1pc1Jhd0FjdGlvbigpe3JldHVybltcImV4ZWN1dGVSYXdcIixcInF1ZXJ5UmF3XCIsXCJydW5Db21tYW5kUmF3XCIsXCJmaW5kUmF3XCIsXCJhZ2dyZWdhdGVSYXdcIl0uaW5jbHVkZXModGhpcy5wYXJhbXMuYWN0aW9uKX1nZXRDb21wdXRlZEZpZWxkcygpe2lmKHRoaXMucGFyYW1zLm1vZGVsTmFtZSlyZXR1cm4gdGhpcy5wYXJhbXMuZXh0ZW5zaW9ucy5nZXRBbGxDb21wdXRlZEZpZWxkcyh0aGlzLnBhcmFtcy5tb2RlbE5hbWUpfWZpbmRGaWVsZCh0KXtyZXR1cm4gdGhpcy5tb2RlbD8uZmllbGRzLmZpbmQocj0+ci5uYW1lPT09dCl9bmVzdFNlbGVjdGlvbih0KXtsZXQgcj10aGlzLmZpbmRGaWVsZCh0KSxuPXI/LmtpbmQ9PT1cIm9iamVjdFwiP3IudHlwZTp2b2lkIDA7cmV0dXJuIG5ldyBlKHsuLi50aGlzLnBhcmFtcyxtb2RlbE5hbWU6bixzZWxlY3Rpb25QYXRoOnRoaXMucGFyYW1zLnNlbGVjdGlvblBhdGguY29uY2F0KHQpfSl9bmVzdEFyZ3VtZW50KHQpe3JldHVybiBuZXcgZSh7Li4udGhpcy5wYXJhbXMsYXJndW1lbnRQYXRoOnRoaXMucGFyYW1zLmFyZ3VtZW50UGF0aC5jb25jYXQodCl9KX19O3ZhciBubD1lPT4oe2NvbW1hbmQ6ZX0pO3ZhciBpbD1lPT5lLnN0cmluZ3MucmVkdWNlKCh0LHIsbik9PmAke3R9QFAke259JHtyfWApO2Z1bmN0aW9uIGdyKGUpe3RyeXtyZXR1cm4gb2woZSxcImZhc3RcIil9Y2F0Y2h7cmV0dXJuIG9sKGUsXCJzbG93XCIpfX1mdW5jdGlvbiBvbChlLHQpe3JldHVybiBKU09OLnN0cmluZ2lmeShlLm1hcChyPT5qZChyLHQpKSl9ZnVuY3Rpb24gamQoZSx0KXtyZXR1cm4gdHlwZW9mIGU9PVwiYmlnaW50XCI/e3ByaXNtYV9fdHlwZTpcImJpZ2ludFwiLHByaXNtYV9fdmFsdWU6ZS50b1N0cmluZygpfTpmdChlKT97cHJpc21hX190eXBlOlwiZGF0ZVwiLHByaXNtYV9fdmFsdWU6ZS50b0pTT04oKX06UGUuaXNEZWNpbWFsKGUpP3twcmlzbWFfX3R5cGU6XCJkZWNpbWFsXCIscHJpc21hX192YWx1ZTplLnRvSlNPTigpfTpCdWZmZXIuaXNCdWZmZXIoZSk/e3ByaXNtYV9fdHlwZTpcImJ5dGVzXCIscHJpc21hX192YWx1ZTplLnRvU3RyaW5nKFwiYmFzZTY0XCIpfTpCZChlKXx8QXJyYXlCdWZmZXIuaXNWaWV3KGUpP3twcmlzbWFfX3R5cGU6XCJieXRlc1wiLHByaXNtYV9fdmFsdWU6QnVmZmVyLmZyb20oZSkudG9TdHJpbmcoXCJiYXNlNjRcIil9OnR5cGVvZiBlPT1cIm9iamVjdFwiJiZ0PT09XCJzbG93XCI/YWwoZSk6ZX1mdW5jdGlvbiBCZChlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXI/ITA6dHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsP2VbU3ltYm9sLnRvU3RyaW5nVGFnXT09PVwiQXJyYXlCdWZmZXJcInx8ZVtTeW1ib2wudG9TdHJpbmdUYWddPT09XCJTaGFyZWRBcnJheUJ1ZmZlclwiOiExfWZ1bmN0aW9uIGFsKGUpe2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxlPT09bnVsbClyZXR1cm4gZTtpZih0eXBlb2YgZS50b0pTT049PVwiZnVuY3Rpb25cIilyZXR1cm4gZS50b0pTT04oKTtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLm1hcChzbCk7bGV0IHQ9e307Zm9yKGxldCByIG9mIE9iamVjdC5rZXlzKGUpKXRbcl09c2woZVtyXSk7cmV0dXJuIHR9ZnVuY3Rpb24gc2woZSl7cmV0dXJuIHR5cGVvZiBlPT1cImJpZ2ludFwiP2UudG9TdHJpbmcoKTphbChlKX12YXIgVWQ9L14oXFxzKmFsdGVyXFxzKS9pLGxsPU8oXCJwcmlzbWE6Y2xpZW50XCIpO2Z1bmN0aW9uIEdpKGUsdCxyLG4pe2lmKCEoZSE9PVwicG9zdGdyZXNxbFwiJiZlIT09XCJjb2Nrcm9hY2hkYlwiKSYmci5sZW5ndGg+MCYmVWQuZXhlYyh0KSl0aHJvdyBuZXcgRXJyb3IoYFJ1bm5pbmcgQUxURVIgdXNpbmcgJHtufSBpcyBub3Qgc3VwcG9ydGVkXG5Vc2luZyB0aGUgZXhhbXBsZSBiZWxvdyB5b3UgY2FuIHN0aWxsIGV4ZWN1dGUgeW91ciBxdWVyeSB3aXRoIFByaXNtYSwgYnV0IHBsZWFzZSBub3RlIHRoYXQgaXQgaXMgdnVsbmVyYWJsZSB0byBTUUwgaW5qZWN0aW9uIGF0dGFja3MgYW5kIHJlcXVpcmVzIHlvdSB0byB0YWtlIGNhcmUgb2YgaW5wdXQgc2FuaXRpemF0aW9uLlxuXG5FeGFtcGxlOlxuICBhd2FpdCBwcmlzbWEuJGV4ZWN1dGVSYXdVbnNhZmUoXFxgQUxURVIgVVNFUiBwcmlzbWEgV0lUSCBQQVNTV09SRCAnXFwke3Bhc3N3b3JkfSdcXGApXG5cbk1vcmUgSW5mb3JtYXRpb246IGh0dHBzOi8vcHJpcy5seS9kL2V4ZWN1dGUtcmF3XG5gKX12YXIgSmk9KHtjbGllbnRNZXRob2Q6ZSxhY3RpdmVQcm92aWRlcjp0LGFjdGl2ZVByb3ZpZGVyRmxhdm91cjpyfSk9Pm49PntyIT09dm9pZCAwJiYodD1yKTtsZXQgaT1cIlwiLG87aWYoQXJyYXkuaXNBcnJheShuKSl7bGV0W3MsLi4uYV09bjtpPXMsbz17dmFsdWVzOmdyKGF8fFtdKSxfX3ByaXNtYVJhd1BhcmFtZXRlcnNfXzohMH19ZWxzZSBzd2l0Y2godCl7Y2FzZVwic3FsaXRlXCI6Y2FzZVwibXlzcWxcIjp7aT1uLnNxbCxvPXt2YWx1ZXM6Z3Iobi52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTticmVha31jYXNlXCJjb2Nrcm9hY2hkYlwiOmNhc2VcInBvc3RncmVzcWxcIjpjYXNlXCJwb3N0Z3Jlc1wiOntpPW4udGV4dCxvPXt2YWx1ZXM6Z3Iobi52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTticmVha31jYXNlXCJzcWxzZXJ2ZXJcIjp7aT1pbChuKSxvPXt2YWx1ZXM6Z3Iobi52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTticmVha31kZWZhdWx0OnRocm93IG5ldyBFcnJvcihgVGhlICR7dH0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCAke2V9YCl9cmV0dXJuIG8/LnZhbHVlcz9sbChgcHJpc21hLiR7ZX0oJHtpfSwgJHtvLnZhbHVlc30pYCk6bGwoYHByaXNtYS4ke2V9KCR7aX0pYCkse3F1ZXJ5OmkscGFyYW1ldGVyczpvfX0sdWw9e3JlcXVlc3RBcmdzVG9NaWRkbGV3YXJlQXJncyhlKXtyZXR1cm5bZS5zdHJpbmdzLC4uLmUudmFsdWVzXX0sbWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzKGUpe2xldFt0LC4uLnJdPWU7cmV0dXJuIG5ldyBvZSh0LHIpfX0sY2w9e3JlcXVlc3RBcmdzVG9NaWRkbGV3YXJlQXJncyhlKXtyZXR1cm5bZV19LG1pZGRsZXdhcmVBcmdzVG9SZXF1ZXN0QXJncyhlKXtyZXR1cm4gZVswXX19O2Z1bmN0aW9uIEhpKGUpe3JldHVybiBmdW5jdGlvbihyKXtsZXQgbixpPShvPWUpPT57dHJ5e3JldHVybiBvPT09dm9pZCAwfHxvPy5raW5kPT09XCJpdHhcIj9uPz8obj1wbChyKG8pKSk6cGwocihvKSl9Y2F0Y2gocyl7cmV0dXJuIFByb21pc2UucmVqZWN0KHMpfX07cmV0dXJue3RoZW4obyxzKXtyZXR1cm4gaSgpLnRoZW4obyxzKX0sY2F0Y2gobyl7cmV0dXJuIGkoKS5jYXRjaChvKX0sZmluYWxseShvKXtyZXR1cm4gaSgpLmZpbmFsbHkobyl9LHJlcXVlc3RUcmFuc2FjdGlvbihvKXtsZXQgcz1pKG8pO3JldHVybiBzLnJlcXVlc3RUcmFuc2FjdGlvbj9zLnJlcXVlc3RUcmFuc2FjdGlvbihvKTpzfSxbU3ltYm9sLnRvU3RyaW5nVGFnXTpcIlByaXNtYVByb21pc2VcIn19fWZ1bmN0aW9uIHBsKGUpe3JldHVybiB0eXBlb2YgZS50aGVuPT1cImZ1bmN0aW9uXCI/ZTpQcm9taXNlLnJlc29sdmUoZSl9dmFyIGRsPXtpc0VuYWJsZWQoKXtyZXR1cm4hMX0sZ2V0VHJhY2VQYXJlbnQoKXtyZXR1cm5cIjAwLTEwLTEwLTAwXCJ9LGFzeW5jIGNyZWF0ZUVuZ2luZVNwYW4oKXt9LGdldEFjdGl2ZUNvbnRleHQoKXt9LHJ1bkluQ2hpbGRTcGFuKGUsdCl7cmV0dXJuIHQoKX19LFdpPWNsYXNze2lzRW5hYmxlZCgpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5pc0VuYWJsZWQoKX1nZXRUcmFjZVBhcmVudCh0KXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkuZ2V0VHJhY2VQYXJlbnQodCl9Y3JlYXRlRW5naW5lU3Bhbih0KXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkuY3JlYXRlRW5naW5lU3Bhbih0KX1nZXRBY3RpdmVDb250ZXh0KCl7cmV0dXJuIHRoaXMuZ2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpLmdldEFjdGl2ZUNvbnRleHQoKX1ydW5JbkNoaWxkU3Bhbih0LHIpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5ydW5JbkNoaWxkU3Bhbih0LHIpfWdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKXtyZXR1cm4gZ2xvYmFsVGhpcy5QUklTTUFfSU5TVFJVTUVOVEFUSU9OPy5oZWxwZXI/P2RsfX07ZnVuY3Rpb24gbWwoZSl7cmV0dXJuIGUuaW5jbHVkZXMoXCJ0cmFjaW5nXCIpP25ldyBXaTpkbH1mdW5jdGlvbiBmbChlLHQ9KCk9Pnt9KXtsZXQgcixuPW5ldyBQcm9taXNlKGk9PnI9aSk7cmV0dXJue3RoZW4oaSl7cmV0dXJuLS1lPT09MCYmcih0KCkpLGk/LihuKX19fXZhciBLZD1bXCIkY29ubmVjdFwiLFwiJGRpc2Nvbm5lY3RcIixcIiRvblwiLFwiJHRyYW5zYWN0aW9uXCIsXCIkdXNlXCIsXCIkZXh0ZW5kc1wiXSx6aT1LZDtmdW5jdGlvbiBnbChlKXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCI/ZTplLnJlZHVjZSgodCxyKT0+e2xldCBuPXR5cGVvZiByPT1cInN0cmluZ1wiP3I6ci5sZXZlbDtyZXR1cm4gbj09PVwicXVlcnlcIj90OnQmJihyPT09XCJpbmZvXCJ8fHQ9PT1cImluZm9cIik/XCJpbmZvXCI6bn0sdm9pZCAwKX12YXIgd249Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLl9taWRkbGV3YXJlcz1bXX11c2UodCl7dGhpcy5fbWlkZGxld2FyZXMucHVzaCh0KX1nZXQodCl7cmV0dXJuIHRoaXMuX21pZGRsZXdhcmVzW3RdfWhhcyh0KXtyZXR1cm4hIXRoaXMuX21pZGRsZXdhcmVzW3RdfWxlbmd0aCgpe3JldHVybiB0aGlzLl9taWRkbGV3YXJlcy5sZW5ndGh9fTt2YXIgaGw9UyhsaSgpKTtmdW5jdGlvbiBQbihlKXtyZXR1cm4gdHlwZW9mIGUuYmF0Y2hSZXF1ZXN0SWR4PT1cIm51bWJlclwifWZ1bmN0aW9uIHZuKGUpe3JldHVybiBlPT09bnVsbD9lOkFycmF5LmlzQXJyYXkoZSk/ZS5tYXAodm4pOnR5cGVvZiBlPT1cIm9iamVjdFwiP1FkKGUpP0dkKGUpOnB0KGUsdm4pOmV9ZnVuY3Rpb24gUWQoZSl7cmV0dXJuIGUhPT1udWxsJiZ0eXBlb2YgZT09XCJvYmplY3RcIiYmdHlwZW9mIGUuJHR5cGU9PVwic3RyaW5nXCJ9ZnVuY3Rpb24gR2QoeyR0eXBlOmUsdmFsdWU6dH0pe3N3aXRjaChlKXtjYXNlXCJCaWdJbnRcIjpyZXR1cm4gQmlnSW50KHQpO2Nhc2VcIkJ5dGVzXCI6cmV0dXJuIEJ1ZmZlci5mcm9tKHQsXCJiYXNlNjRcIik7Y2FzZVwiRGF0ZVRpbWVcIjpyZXR1cm4gbmV3IERhdGUodCk7Y2FzZVwiRGVjaW1hbFwiOnJldHVybiBuZXcgUGUodCk7Y2FzZVwiSnNvblwiOnJldHVybiBKU09OLnBhcnNlKHQpO2RlZmF1bHQ6SGUodCxcIlVua25vd24gdGFnZ2VkIHZhbHVlXCIpfX1mdW5jdGlvbiB5bChlKXtpZihlLmFjdGlvbiE9PVwiZmluZFVuaXF1ZVwiJiZlLmFjdGlvbiE9PVwiZmluZFVuaXF1ZU9yVGhyb3dcIilyZXR1cm47bGV0IHQ9W107cmV0dXJuIGUubW9kZWxOYW1lJiZ0LnB1c2goZS5tb2RlbE5hbWUpLGUucXVlcnkuYXJndW1lbnRzJiZ0LnB1c2goWWkoZS5xdWVyeS5hcmd1bWVudHMpKSx0LnB1c2goWWkoZS5xdWVyeS5zZWxlY3Rpb24pKSx0LmpvaW4oXCJcIil9ZnVuY3Rpb24gWWkoZSl7cmV0dXJuYCgke09iamVjdC5rZXlzKGUpLnNvcnQoKS5tYXAocj0+e2xldCBuPWVbcl07cmV0dXJuIHR5cGVvZiBuPT1cIm9iamVjdFwiJiZuIT09bnVsbD9gKCR7cn0gJHtZaShuKX0pYDpyfSkuam9pbihcIiBcIil9KWB9dmFyIEpkPXthZ2dyZWdhdGU6ITEsYWdncmVnYXRlUmF3OiExLGNyZWF0ZU1hbnk6ITAsY3JlYXRlT25lOiEwLGRlbGV0ZU1hbnk6ITAsZGVsZXRlT25lOiEwLGV4ZWN1dGVSYXc6ITAsZmluZEZpcnN0OiExLGZpbmRGaXJzdE9yVGhyb3c6ITEsZmluZE1hbnk6ITEsZmluZFJhdzohMSxmaW5kVW5pcXVlOiExLGZpbmRVbmlxdWVPclRocm93OiExLGdyb3VwQnk6ITEscXVlcnlSYXc6ITEscnVuQ29tbWFuZFJhdzohMCx1cGRhdGVNYW55OiEwLHVwZGF0ZU9uZTohMCx1cHNlcnRPbmU6ITB9O2Z1bmN0aW9uIFppKGUpe3JldHVybiBKZFtlXX12YXIgVG49Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy5vcHRpb25zPXQ7dGhpcy50aWNrQWN0aXZlPSExO3RoaXMuYmF0Y2hlcz17fX1yZXF1ZXN0KHQpe2xldCByPXRoaXMub3B0aW9ucy5iYXRjaEJ5KHQpO3JldHVybiByPyh0aGlzLmJhdGNoZXNbcl18fCh0aGlzLmJhdGNoZXNbcl09W10sdGhpcy50aWNrQWN0aXZlfHwodGhpcy50aWNrQWN0aXZlPSEwLHByb2Nlc3MubmV4dFRpY2soKCk9Pnt0aGlzLmRpc3BhdGNoQmF0Y2hlcygpLHRoaXMudGlja0FjdGl2ZT0hMX0pKSksbmV3IFByb21pc2UoKG4saSk9Pnt0aGlzLmJhdGNoZXNbcl0ucHVzaCh7cmVxdWVzdDp0LHJlc29sdmU6bixyZWplY3Q6aX0pfSkpOnRoaXMub3B0aW9ucy5zaW5nbGVMb2FkZXIodCl9ZGlzcGF0Y2hCYXRjaGVzKCl7Zm9yKGxldCB0IGluIHRoaXMuYmF0Y2hlcyl7bGV0IHI9dGhpcy5iYXRjaGVzW3RdO2RlbGV0ZSB0aGlzLmJhdGNoZXNbdF0sci5sZW5ndGg9PT0xP3RoaXMub3B0aW9ucy5zaW5nbGVMb2FkZXIoclswXS5yZXF1ZXN0KS50aGVuKG49PntuIGluc3RhbmNlb2YgRXJyb3I/clswXS5yZWplY3Qobik6clswXS5yZXNvbHZlKG4pfSkuY2F0Y2gobj0+e3JbMF0ucmVqZWN0KG4pfSk6KHIuc29ydCgobixpKT0+dGhpcy5vcHRpb25zLmJhdGNoT3JkZXIobi5yZXF1ZXN0LGkucmVxdWVzdCkpLHRoaXMub3B0aW9ucy5iYXRjaExvYWRlcihyLm1hcChuPT5uLnJlcXVlc3QpKS50aGVuKG49PntpZihuIGluc3RhbmNlb2YgRXJyb3IpZm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspcltpXS5yZWplY3Qobik7ZWxzZSBmb3IobGV0IGk9MDtpPHIubGVuZ3RoO2krKyl7bGV0IG89bltpXTtvIGluc3RhbmNlb2YgRXJyb3I/cltpXS5yZWplY3Qobyk6cltpXS5yZXNvbHZlKG8pfX0pLmNhdGNoKG49Pntmb3IobGV0IGk9MDtpPHIubGVuZ3RoO2krKylyW2ldLnJlamVjdChuKX0pKX19Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIkRhdGFMb2FkZXJcIn19O3ZhciBIZD1PKFwicHJpc21hOmNsaWVudDpyZXF1ZXN0X2hhbmRsZXJcIiksQ249Y2xhc3N7Y29uc3RydWN0b3IodCxyKXt0aGlzLmxvZ0VtaXR0ZXI9cix0aGlzLmNsaWVudD10LHRoaXMuZGF0YWxvYWRlcj1uZXcgVG4oe2JhdGNoTG9hZGVyOmNhKGFzeW5jKHtyZXF1ZXN0czpuLGN1c3RvbURhdGFQcm94eUZldGNoOml9KT0+e2xldHt0cmFuc2FjdGlvbjpvLG90ZWxQYXJlbnRDdHg6c309blswXSxhPW4ubWFwKHA9PnAucHJvdG9jb2xRdWVyeSksbD10aGlzLmNsaWVudC5fdHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudChzKSx1PW4uc29tZShwPT5aaShwLnByb3RvY29sUXVlcnkuYWN0aW9uKSk7cmV0dXJuKGF3YWl0IHRoaXMuY2xpZW50Ll9lbmdpbmUucmVxdWVzdEJhdGNoKGEse3RyYWNlcGFyZW50OmwsdHJhbnNhY3Rpb246V2QobyksY29udGFpbnNXcml0ZTp1LGN1c3RvbURhdGFQcm94eUZldGNoOml9KSkubWFwKChwLGQpPT57aWYocCBpbnN0YW5jZW9mIEVycm9yKXJldHVybiBwO3RyeXtyZXR1cm4gdGhpcy5tYXBRdWVyeUVuZ2luZVJlc3VsdChuW2RdLHApfWNhdGNoKGYpe3JldHVybiBmfX0pfSksc2luZ2xlTG9hZGVyOmFzeW5jIG49PntsZXQgaT1uLnRyYW5zYWN0aW9uPy5raW5kPT09XCJpdHhcIj94bChuLnRyYW5zYWN0aW9uKTp2b2lkIDAsbz1hd2FpdCB0aGlzLmNsaWVudC5fZW5naW5lLnJlcXVlc3Qobi5wcm90b2NvbFF1ZXJ5LHt0cmFjZXBhcmVudDp0aGlzLmNsaWVudC5fdHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpLGludGVyYWN0aXZlVHJhbnNhY3Rpb246aSxpc1dyaXRlOlppKG4ucHJvdG9jb2xRdWVyeS5hY3Rpb24pLGN1c3RvbURhdGFQcm94eUZldGNoOm4uY3VzdG9tRGF0YVByb3h5RmV0Y2h9KTtyZXR1cm4gdGhpcy5tYXBRdWVyeUVuZ2luZVJlc3VsdChuLG8pfSxiYXRjaEJ5Om49Pm4udHJhbnNhY3Rpb24/LmlkP2B0cmFuc2FjdGlvbi0ke24udHJhbnNhY3Rpb24uaWR9YDp5bChuLnByb3RvY29sUXVlcnkpLGJhdGNoT3JkZXIobixpKXtyZXR1cm4gbi50cmFuc2FjdGlvbj8ua2luZD09PVwiYmF0Y2hcIiYmaS50cmFuc2FjdGlvbj8ua2luZD09PVwiYmF0Y2hcIj9uLnRyYW5zYWN0aW9uLmluZGV4LWkudHJhbnNhY3Rpb24uaW5kZXg6MH19KX1hc3luYyByZXF1ZXN0KHQpe3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5kYXRhbG9hZGVyLnJlcXVlc3QodCl9Y2F0Y2gocil7bGV0e2NsaWVudE1ldGhvZDpuLGNhbGxzaXRlOmksdHJhbnNhY3Rpb246byxhcmdzOnN9PXQ7dGhpcy5oYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3Ioe2Vycm9yOnIsY2xpZW50TWV0aG9kOm4sY2FsbHNpdGU6aSx0cmFuc2FjdGlvbjpvLGFyZ3M6c30pfX1tYXBRdWVyeUVuZ2luZVJlc3VsdCh7ZGF0YVBhdGg6dCx1bnBhY2tlcjpyfSxuKXtsZXQgaT1uPy5kYXRhLG89bj8uZWxhcHNlZCxzPXRoaXMudW5wYWNrKGksdCxyKTtyZXR1cm4gcHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9HRVRfVElNRT97ZGF0YTpzLGVsYXBzZWQ6b306c31oYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3IodCl7dHJ5e3RoaXMuaGFuZGxlUmVxdWVzdEVycm9yKHQpfWNhdGNoKHIpe3Rocm93IHRoaXMubG9nRW1pdHRlciYmdGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJlcnJvclwiLHttZXNzYWdlOnIubWVzc2FnZSx0YXJnZXQ6dC5jbGllbnRNZXRob2QsdGltZXN0YW1wOm5ldyBEYXRlfSkscn19aGFuZGxlUmVxdWVzdEVycm9yKHtlcnJvcjp0LGNsaWVudE1ldGhvZDpyLGNhbGxzaXRlOm4sdHJhbnNhY3Rpb246aSxhcmdzOm99KXtpZihIZCh0KSx6ZCh0LGkpfHx0IGluc3RhbmNlb2YgTWUpdGhyb3cgdDtpZih0IGluc3RhbmNlb2YgVSYmWWQodCkpe2xldCBhPWJsKHQubWV0YSk7RW4oe2FyZ3M6byxlcnJvcnM6W2FdLGNhbGxzaXRlOm4sZXJyb3JGb3JtYXQ6dGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0LG9yaWdpbmFsTWV0aG9kOnIsY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbn0pfWxldCBzPXQubWVzc2FnZTt0aHJvdyBuJiYocz1QdCh7Y2FsbHNpdGU6bixvcmlnaW5hbE1ldGhvZDpyLGlzUGFuaWM6dC5pc1BhbmljLHNob3dDb2xvcnM6dGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0PT09XCJwcmV0dHlcIixtZXNzYWdlOnN9KSkscz10aGlzLnNhbml0aXplTWVzc2FnZShzKSx0LmNvZGU/bmV3IFUocyx7Y29kZTp0LmNvZGUsY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbixtZXRhOnQubWV0YSxiYXRjaFJlcXVlc3RJZHg6dC5iYXRjaFJlcXVlc3RJZHh9KTp0LmlzUGFuaWM/bmV3IHVlKHMsdGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24pOnQgaW5zdGFuY2VvZiBLP25ldyBLKHMse2NsaWVudFZlcnNpb246dGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24sYmF0Y2hSZXF1ZXN0SWR4OnQuYmF0Y2hSZXF1ZXN0SWR4fSk6dCBpbnN0YW5jZW9mIEY/bmV3IEYocyx0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbik6dCBpbnN0YW5jZW9mIHVlP25ldyB1ZShzLHRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uKToodC5jbGllbnRWZXJzaW9uPXRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uLHQpfXNhbml0aXplTWVzc2FnZSh0KXtyZXR1cm4gdGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0JiZ0aGlzLmNsaWVudC5fZXJyb3JGb3JtYXQhPT1cInByZXR0eVwiPygwLGhsLmRlZmF1bHQpKHQpOnR9dW5wYWNrKHQscixuKXtpZighdHx8KHQuZGF0YSYmKHQ9dC5kYXRhKSwhdCkpcmV0dXJuIHQ7bGV0IGk9T2JqZWN0LnZhbHVlcyh0KVswXSxvPXIuZmlsdGVyKGE9PmEhPT1cInNlbGVjdFwiJiZhIT09XCJpbmNsdWRlXCIpLHM9dm4oQWkoaSxvKSk7cmV0dXJuIG4/bihzKTpzfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJSZXF1ZXN0SGFuZGxlclwifX07ZnVuY3Rpb24gV2QoZSl7aWYoZSl7aWYoZS5raW5kPT09XCJiYXRjaFwiKXJldHVybntraW5kOlwiYmF0Y2hcIixvcHRpb25zOntpc29sYXRpb25MZXZlbDplLmlzb2xhdGlvbkxldmVsfX07aWYoZS5raW5kPT09XCJpdHhcIilyZXR1cm57a2luZDpcIml0eFwiLG9wdGlvbnM6eGwoZSl9O0hlKGUsXCJVbmtub3duIHRyYW5zYWN0aW9uIGtpbmRcIil9fWZ1bmN0aW9uIHhsKGUpe3JldHVybntpZDplLmlkLHBheWxvYWQ6ZS5wYXlsb2FkfX1mdW5jdGlvbiB6ZChlLHQpe3JldHVybiBQbihlKSYmdD8ua2luZD09PVwiYmF0Y2hcIiYmZS5iYXRjaFJlcXVlc3RJZHghPT10LmluZGV4fWZ1bmN0aW9uIFlkKGUpe3JldHVybiBlLmNvZGU9PT1cIlAyMDA5XCJ8fGUuY29kZT09PVwiUDIwMTJcIn1mdW5jdGlvbiBibChlKXtpZihlLmtpbmQ9PT1cIlVuaW9uXCIpcmV0dXJue2tpbmQ6XCJVbmlvblwiLGVycm9yczplLmVycm9ycy5tYXAoYmwpfTtpZihBcnJheS5pc0FycmF5KGUuc2VsZWN0aW9uUGF0aCkpe2xldFssLi4udF09ZS5zZWxlY3Rpb25QYXRoO3JldHVybnsuLi5lLHNlbGVjdGlvblBhdGg6dH19cmV0dXJuIGV9dmFyIEVsPVwiNS41LjJcIjt2YXIgd2w9RWw7ZnVuY3Rpb24gUGwoZSl7cmV0dXJuIGUubWFwKHQ9PntsZXQgcj17fTtmb3IobGV0IG4gb2YgT2JqZWN0LmtleXModCkpcltuXT12bCh0W25dKTtyZXR1cm4gcn0pfWZ1bmN0aW9uIHZsKHtwcmlzbWFfX3R5cGU6ZSxwcmlzbWFfX3ZhbHVlOnR9KXtzd2l0Y2goZSl7Y2FzZVwiYmlnaW50XCI6cmV0dXJuIEJpZ0ludCh0KTtjYXNlXCJieXRlc1wiOnJldHVybiBCdWZmZXIuZnJvbSh0LFwiYmFzZTY0XCIpO2Nhc2VcImRlY2ltYWxcIjpyZXR1cm4gbmV3IFBlKHQpO2Nhc2VcImRhdGV0aW1lXCI6Y2FzZVwiZGF0ZVwiOnJldHVybiBuZXcgRGF0ZSh0KTtjYXNlXCJ0aW1lXCI6cmV0dXJuIG5ldyBEYXRlKGAxOTcwLTAxLTAxVCR7dH1aYCk7Y2FzZVwiYXJyYXlcIjpyZXR1cm4gdC5tYXAodmwpO2RlZmF1bHQ6cmV0dXJuIHR9fXZhciBNbD1TKFVpKCkpO3ZhciBxPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IodCl7c3VwZXIodCtgXG5SZWFkIG1vcmUgYXQgaHR0cHM6Ly9wcmlzLmx5L2QvY2xpZW50LWNvbnN0cnVjdG9yYCksdGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50Q29uc3RydWN0b3JWYWxpZGF0aW9uRXJyb3JcIn1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50Q29uc3RydWN0b3JWYWxpZGF0aW9uRXJyb3JcIn19O0UocSxcIlByaXNtYUNsaWVudENvbnN0cnVjdG9yVmFsaWRhdGlvbkVycm9yXCIpO3ZhciBUbD1bXCJkYXRhc291cmNlc1wiLFwiZGF0YXNvdXJjZVVybFwiLFwiZXJyb3JGb3JtYXRcIixcImFkYXB0ZXJcIixcImxvZ1wiLFwiX19pbnRlcm5hbFwiXSxDbD1bXCJwcmV0dHlcIixcImNvbG9ybGVzc1wiLFwibWluaW1hbFwiXSxBbD1bXCJpbmZvXCIsXCJxdWVyeVwiLFwid2FyblwiLFwiZXJyb3JcIl0sWGQ9e2RhdGFzb3VyY2VzOihlLHtkYXRhc291cmNlTmFtZXM6dH0pPT57aWYoZSl7aWYodHlwZW9mIGUhPVwib2JqZWN0XCJ8fEFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IHEoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiZGF0YXNvdXJjZXNcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3JgKTtmb3IobGV0W3Isbl1vZiBPYmplY3QuZW50cmllcyhlKSl7aWYoIXQuaW5jbHVkZXMocikpe2xldCBpPU10KHIsdCl8fGAgQXZhaWxhYmxlIGRhdGFzb3VyY2VzOiAke3Quam9pbihcIiwgXCIpfWA7dGhyb3cgbmV3IHEoYFVua25vd24gZGF0YXNvdXJjZSAke3J9IHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke2l9YCl9aWYodHlwZW9mIG4hPVwib2JqZWN0XCJ8fEFycmF5LmlzQXJyYXkobikpdGhyb3cgbmV3IHEoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIGRhdGFzb3VyY2UgXCIke3J9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLlxuSXQgc2hvdWxkIGhhdmUgdGhpcyBmb3JtOiB7IHVybDogXCJDT05ORUNUSU9OX1NUUklOR1wiIH1gKTtpZihuJiZ0eXBlb2Ygbj09XCJvYmplY3RcIilmb3IobGV0W2ksb11vZiBPYmplY3QuZW50cmllcyhuKSl7aWYoaSE9PVwidXJsXCIpdGhyb3cgbmV3IHEoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIGRhdGFzb3VyY2UgXCIke3J9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLlxuSXQgc2hvdWxkIGhhdmUgdGhpcyBmb3JtOiB7IHVybDogXCJDT05ORUNUSU9OX1NUUklOR1wiIH1gKTtpZih0eXBlb2YgbyE9XCJzdHJpbmdcIil0aHJvdyBuZXcgcShgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KG8pfSBmb3IgZGF0YXNvdXJjZSBcIiR7cn1cIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuXG5JdCBzaG91bGQgaGF2ZSB0aGlzIGZvcm06IHsgdXJsOiBcIkNPTk5FQ1RJT05fU1RSSU5HXCIgfWApfX19fSxhZGFwdGVyOihlLHQpPT57aWYoZT09PW51bGwpcmV0dXJuO2lmKGU9PT12b2lkIDApdGhyb3cgbmV3IHEoJ1wiYWRhcHRlclwiIHByb3BlcnR5IG11c3Qgbm90IGJlIHVuZGVmaW5lZCwgdXNlIG51bGwgdG8gY29uZGl0aW9uYWxseSBkaXNhYmxlIGRyaXZlciBhZGFwdGVycy4nKTtpZighZ24odCkuaW5jbHVkZXMoXCJkcml2ZXJBZGFwdGVyc1wiKSl0aHJvdyBuZXcgcSgnXCJhZGFwdGVyXCIgcHJvcGVydHkgY2FuIG9ubHkgYmUgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yIHdoZW4gXCJkcml2ZXJBZGFwdGVyc1wiIHByZXZpZXcgZmVhdHVyZSBpcyBlbmFibGVkLicpfSxkYXRhc291cmNlVXJsOmU9PntpZih0eXBlb2YgZTxcInVcIiYmdHlwZW9mIGUhPVwic3RyaW5nXCIpdGhyb3cgbmV3IHEoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiZGF0YXNvdXJjZVVybFwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5cbkV4cGVjdGVkIHN0cmluZyBvciB1bmRlZmluZWQuYCl9LGVycm9yRm9ybWF0OmU9PntpZihlKXtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgcShgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGUpfSBmb3IgXCJlcnJvckZvcm1hdFwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5gKTtpZighQ2wuaW5jbHVkZXMoZSkpe2xldCB0PU10KGUsQ2wpO3Rocm93IG5ldyBxKGBJbnZhbGlkIGVycm9yRm9ybWF0ICR7ZX0gcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7dH1gKX19fSxsb2c6ZT0+e2lmKCFlKXJldHVybjtpZighQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgcShgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGUpfSBmb3IgXCJsb2dcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuYCk7ZnVuY3Rpb24gdChyKXtpZih0eXBlb2Ygcj09XCJzdHJpbmdcIiYmIUFsLmluY2x1ZGVzKHIpKXtsZXQgbj1NdChyLEFsKTt0aHJvdyBuZXcgcShgSW52YWxpZCBsb2cgbGV2ZWwgXCIke3J9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7bn1gKX19Zm9yKGxldCByIG9mIGUpe3Qocik7bGV0IG49e2xldmVsOnQsZW1pdDppPT57bGV0IG89W1wic3Rkb3V0XCIsXCJldmVudFwiXTtpZighby5pbmNsdWRlcyhpKSl7bGV0IHM9TXQoaSxvKTt0aHJvdyBuZXcgcShgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGkpfSBmb3IgXCJlbWl0XCIgaW4gbG9nTGV2ZWwgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7c31gKX19fTtpZihyJiZ0eXBlb2Ygcj09XCJvYmplY3RcIilmb3IobGV0W2ksb11vZiBPYmplY3QuZW50cmllcyhyKSlpZihuW2ldKW5baV0obyk7ZWxzZSB0aHJvdyBuZXcgcShgSW52YWxpZCBwcm9wZXJ0eSAke2l9IGZvciBcImxvZ1wiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3RvcmApfX0sX19pbnRlcm5hbDplPT57aWYoIWUpcmV0dXJuO2xldCB0PVtcImRlYnVnXCIsXCJob29rc1wiLFwiZW5naW5lXCIsXCJtZWFzdXJlUGVyZm9ybWFuY2VcIl07aWYodHlwZW9mIGUhPVwib2JqZWN0XCIpdGhyb3cgbmV3IHEoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiX19pbnRlcm5hbFwiIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3RvcmApO2ZvcihsZXRbcl1vZiBPYmplY3QuZW50cmllcyhlKSlpZighdC5pbmNsdWRlcyhyKSl7bGV0IG49TXQocix0KTt0aHJvdyBuZXcgcShgSW52YWxpZCBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KHIpfSBmb3IgXCJfX2ludGVybmFsXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7bn1gKX19fTtmdW5jdGlvbiBSbChlLHQpe2ZvcihsZXRbcixuXW9mIE9iamVjdC5lbnRyaWVzKGUpKXtpZighVGwuaW5jbHVkZXMocikpe2xldCBpPU10KHIsVGwpO3Rocm93IG5ldyBxKGBVbmtub3duIHByb3BlcnR5ICR7cn0gcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7aX1gKX1YZFtyXShuLHQpfWlmKGUuZGF0YXNvdXJjZVVybCYmZS5kYXRhc291cmNlcyl0aHJvdyBuZXcgcSgnQ2FuIG5vdCB1c2UgXCJkYXRhc291cmNlVXJsXCIgYW5kIFwiZGF0YXNvdXJjZXNcIiBvcHRpb25zIGF0IHRoZSBzYW1lIHRpbWUuIFBpY2sgb25lIG9mIHRoZW0nKX1mdW5jdGlvbiBNdChlLHQpe2lmKHQubGVuZ3RoPT09MHx8dHlwZW9mIGUhPVwic3RyaW5nXCIpcmV0dXJuXCJcIjtsZXQgcj1lbShlLHQpO3JldHVybiByP2AgRGlkIHlvdSBtZWFuIFwiJHtyfVwiP2A6XCJcIn1mdW5jdGlvbiBlbShlLHQpe2lmKHQubGVuZ3RoPT09MClyZXR1cm4gbnVsbDtsZXQgcj10Lm1hcChpPT4oe3ZhbHVlOmksZGlzdGFuY2U6KDAsTWwuZGVmYXVsdCkoZSxpKX0pKTtyLnNvcnQoKGksbyk9PmkuZGlzdGFuY2U8by5kaXN0YW5jZT8tMToxKTtsZXQgbj1yWzBdO3JldHVybiBuLmRpc3RhbmNlPDM/bi52YWx1ZTpudWxsfWZ1bmN0aW9uIFNsKGUpe3JldHVybiBlLmxlbmd0aD09PTA/UHJvbWlzZS5yZXNvbHZlKFtdKTpuZXcgUHJvbWlzZSgodCxyKT0+e2xldCBuPW5ldyBBcnJheShlLmxlbmd0aCksaT1udWxsLG89ITEscz0wLGE9KCk9PntvfHwocysrLHM9PT1lLmxlbmd0aCYmKG89ITAsaT9yKGkpOnQobikpKX0sbD11PT57b3x8KG89ITAscih1KSl9O2ZvcihsZXQgdT0wO3U8ZS5sZW5ndGg7dSsrKWVbdV0udGhlbihjPT57blt1XT1jLGEoKX0sYz0+e2lmKCFQbihjKSl7bChjKTtyZXR1cm59Yy5iYXRjaFJlcXVlc3RJZHg9PT11P2woYyk6KGl8fChpPWMpLGEoKSl9KX0pfXZhciBVZT1PKFwicHJpc21hOmNsaWVudFwiKTt0eXBlb2YgZ2xvYmFsVGhpcz09XCJvYmplY3RcIiYmKGdsb2JhbFRoaXMuTk9ERV9DTElFTlQ9ITApO3ZhciB0bT17cmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzOmU9PmUsbWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzOmU9PmV9LHJtPVN5bWJvbC5mb3IoXCJwcmlzbWEuY2xpZW50LnRyYW5zYWN0aW9uLmlkXCIpLG5tPXtpZDowLG5leHRJZCgpe3JldHVybisrdGhpcy5pZH19O2Z1bmN0aW9uIE9sKGUpe2NsYXNzIHR7Y29uc3RydWN0b3Iobil7dGhpcy5fbWlkZGxld2FyZXM9bmV3IHduO3RoaXMuX2NyZWF0ZVByaXNtYVByb21pc2U9SGkoKTt0aGlzLiRleHRlbmRzPXJhO3hhKGUpLG4mJlJsKG4sZSk7bGV0IGk9bj8uYWRhcHRlcj9mcyhuLmFkYXB0ZXIpOnZvaWQgMCxvPW5ldyBGbC5FdmVudEVtaXR0ZXIoKS5vbihcImVycm9yXCIsKCk9Pnt9KTt0aGlzLl9leHRlbnNpb25zPWxuLmVtcHR5KCksdGhpcy5fcHJldmlld0ZlYXR1cmVzPWduKGUpLHRoaXMuX2NsaWVudFZlcnNpb249ZS5jbGllbnRWZXJzaW9uPz93bCx0aGlzLl9hY3RpdmVQcm92aWRlcj1lLmFjdGl2ZVByb3ZpZGVyLHRoaXMuX3RyYWNpbmdIZWxwZXI9bWwodGhpcy5fcHJldmlld0ZlYXR1cmVzKTtsZXQgcz17cm9vdEVudlBhdGg6ZS5yZWxhdGl2ZUVudlBhdGhzLnJvb3RFbnZQYXRoJiZ5ci5kZWZhdWx0LnJlc29sdmUoZS5kaXJuYW1lLGUucmVsYXRpdmVFbnZQYXRocy5yb290RW52UGF0aCksc2NoZW1hRW52UGF0aDplLnJlbGF0aXZlRW52UGF0aHMuc2NoZW1hRW52UGF0aCYmeXIuZGVmYXVsdC5yZXNvbHZlKGUuZGlybmFtZSxlLnJlbGF0aXZlRW52UGF0aHMuc2NoZW1hRW52UGF0aCl9LGE9IWkmJl90KHMse2NvbmZsaWN0Q2hlY2s6XCJub25lXCJ9KXx8ZS5pbmplY3RhYmxlRWRnZUVudj8uKCk7dHJ5e2xldCBsPW4/P3t9LHU9bC5fX2ludGVybmFsPz97fSxjPXUuZGVidWc9PT0hMDtjJiZPLmVuYWJsZShcInByaXNtYTpjbGllbnRcIik7bGV0IHA9eXIuZGVmYXVsdC5yZXNvbHZlKGUuZGlybmFtZSxlLnJlbGF0aXZlUGF0aCk7RGwuZGVmYXVsdC5leGlzdHNTeW5jKHApfHwocD1lLmRpcm5hbWUpLFVlKFwiZGlybmFtZVwiLGUuZGlybmFtZSksVWUoXCJyZWxhdGl2ZVBhdGhcIixlLnJlbGF0aXZlUGF0aCksVWUoXCJjd2RcIixwKTtsZXQgZD11LmVuZ2luZXx8e307aWYobC5lcnJvckZvcm1hdD90aGlzLl9lcnJvckZvcm1hdD1sLmVycm9yRm9ybWF0OnByb2Nlc3MuZW52Lk5PREVfRU5WPT09XCJwcm9kdWN0aW9uXCI/dGhpcy5fZXJyb3JGb3JtYXQ9XCJtaW5pbWFsXCI6cHJvY2Vzcy5lbnYuTk9fQ09MT1I/dGhpcy5fZXJyb3JGb3JtYXQ9XCJjb2xvcmxlc3NcIjp0aGlzLl9lcnJvckZvcm1hdD1cImNvbG9ybGVzc1wiLHRoaXMuX3J1bnRpbWVEYXRhTW9kZWw9ZS5ydW50aW1lRGF0YU1vZGVsLHRoaXMuX2VuZ2luZUNvbmZpZz17Y3dkOnAsZGlybmFtZTplLmRpcm5hbWUsZW5hYmxlRGVidWdMb2dzOmMsYWxsb3dUcmlnZ2VyUGFuaWM6ZC5hbGxvd1RyaWdnZXJQYW5pYyxkYXRhbW9kZWxQYXRoOnlyLmRlZmF1bHQuam9pbihlLmRpcm5hbWUsZS5maWxlbmFtZT8/XCJzY2hlbWEucHJpc21hXCIpLHByaXNtYVBhdGg6ZC5iaW5hcnlQYXRoPz92b2lkIDAsZW5naW5lRW5kcG9pbnQ6ZC5lbmRwb2ludCxnZW5lcmF0b3I6ZS5nZW5lcmF0b3Isc2hvd0NvbG9yczp0aGlzLl9lcnJvckZvcm1hdD09PVwicHJldHR5XCIsbG9nTGV2ZWw6bC5sb2cmJmdsKGwubG9nKSxsb2dRdWVyaWVzOmwubG9nJiYhISh0eXBlb2YgbC5sb2c9PVwic3RyaW5nXCI/bC5sb2c9PT1cInF1ZXJ5XCI6bC5sb2cuZmluZChmPT50eXBlb2YgZj09XCJzdHJpbmdcIj9mPT09XCJxdWVyeVwiOmYubGV2ZWw9PT1cInF1ZXJ5XCIpKSxlbnY6YT8ucGFyc2VkPz97fSxmbGFnczpbXSxjbGllbnRWZXJzaW9uOmUuY2xpZW50VmVyc2lvbixlbmdpbmVWZXJzaW9uOmUuZW5naW5lVmVyc2lvbixwcmV2aWV3RmVhdHVyZXM6dGhpcy5fcHJldmlld0ZlYXR1cmVzLGFjdGl2ZVByb3ZpZGVyOmUuYWN0aXZlUHJvdmlkZXIsaW5saW5lU2NoZW1hOmUuaW5saW5lU2NoZW1hLG92ZXJyaWRlRGF0YXNvdXJjZXM6YmEobCxlLmRhdGFzb3VyY2VOYW1lcyksaW5saW5lRGF0YXNvdXJjZXM6ZS5pbmxpbmVEYXRhc291cmNlcyxpbmxpbmVTY2hlbWFIYXNoOmUuaW5saW5lU2NoZW1hSGFzaCx0cmFjaW5nSGVscGVyOnRoaXMuX3RyYWNpbmdIZWxwZXIsbG9nRW1pdHRlcjpvLGlzQnVuZGxlZDplLmlzQnVuZGxlZCxhZGFwdGVyOml9LFVlKFwiY2xpZW50VmVyc2lvblwiLGUuY2xpZW50VmVyc2lvbiksdGhpcy5fZW5naW5lPVVhKGUsdGhpcy5fZW5naW5lQ29uZmlnKSx0aGlzLl9yZXF1ZXN0SGFuZGxlcj1uZXcgQ24odGhpcyxvKSxsLmxvZylmb3IobGV0IGYgb2YgbC5sb2cpe2xldCB5PXR5cGVvZiBmPT1cInN0cmluZ1wiP2Y6Zi5lbWl0PT09XCJzdGRvdXRcIj9mLmxldmVsOm51bGw7eSYmdGhpcy4kb24oeSxnPT57JHQubG9nKGAkeyR0LnRhZ3NbeV0/P1wiXCJ9YCxnLm1lc3NhZ2V8fGcucXVlcnkpfSl9dGhpcy5fbWV0cmljcz1uZXcgZHQodGhpcy5fZW5naW5lKX1jYXRjaChsKXt0aHJvdyBsLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixsfXJldHVybiB0aGlzLl9hcHBsaWVkUGFyZW50PXp0KHRoaXMpfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRcIn0kdXNlKG4pe3RoaXMuX21pZGRsZXdhcmVzLnVzZShuKX0kb24obixpKXtuPT09XCJiZWZvcmVFeGl0XCI/dGhpcy5fZW5naW5lLm9uKFwiYmVmb3JlRXhpdFwiLGkpOnRoaXMuX2VuZ2luZS5vbihuLG89PntsZXQgcz1vLmZpZWxkcztyZXR1cm4gaShuPT09XCJxdWVyeVwiP3t0aW1lc3RhbXA6by50aW1lc3RhbXAscXVlcnk6cz8ucXVlcnk/P28ucXVlcnkscGFyYW1zOnM/LnBhcmFtcz8/by5wYXJhbXMsZHVyYXRpb246cz8uZHVyYXRpb25fbXM/P28uZHVyYXRpb24sdGFyZ2V0Om8udGFyZ2V0fTp7dGltZXN0YW1wOm8udGltZXN0YW1wLG1lc3NhZ2U6cz8ubWVzc2FnZT8/by5tZXNzYWdlLHRhcmdldDpvLnRhcmdldH0pfSl9JGNvbm5lY3QoKXt0cnl7cmV0dXJuIHRoaXMuX2VuZ2luZS5zdGFydCgpfWNhdGNoKG4pe3Rocm93IG4uY2xpZW50VmVyc2lvbj10aGlzLl9jbGllbnRWZXJzaW9uLG59fWFzeW5jICRkaXNjb25uZWN0KCl7dHJ5e2F3YWl0IHRoaXMuX2VuZ2luZS5zdG9wKCl9Y2F0Y2gobil7dGhyb3cgbi5jbGllbnRWZXJzaW9uPXRoaXMuX2NsaWVudFZlcnNpb24sbn1maW5hbGx5e0VvKCl9fSRleGVjdXRlUmF3SW50ZXJuYWwobixpLG8scyl7bGV0IGE9dGhpcy5fYWN0aXZlUHJvdmlkZXIsbD10aGlzLl9lbmdpbmVDb25maWcuYWRhcHRlcj8uZmxhdm91cjtyZXR1cm4gdGhpcy5fcmVxdWVzdCh7YWN0aW9uOlwiZXhlY3V0ZVJhd1wiLGFyZ3M6byx0cmFuc2FjdGlvbjpuLGNsaWVudE1ldGhvZDppLGFyZ3NNYXBwZXI6Smkoe2NsaWVudE1ldGhvZDppLGFjdGl2ZVByb3ZpZGVyOmEsYWN0aXZlUHJvdmlkZXJGbGF2b3VyOmx9KSxjYWxsc2l0ZTpWZSh0aGlzLl9lcnJvckZvcm1hdCksZGF0YVBhdGg6W10sbWlkZGxld2FyZUFyZ3NNYXBwZXI6c30pfSRleGVjdXRlUmF3KG4sLi4uaSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2Uobz0+e2lmKG4ucmF3IT09dm9pZCAwfHxuLnNxbCE9PXZvaWQgMCl7bGV0W3MsYV09SWwobixpKTtyZXR1cm4gR2kodGhpcy5fYWN0aXZlUHJvdmlkZXIscy50ZXh0LHMudmFsdWVzLEFycmF5LmlzQXJyYXkobik/XCJwcmlzbWEuJGV4ZWN1dGVSYXdgPFNRTD5gXCI6XCJwcmlzbWEuJGV4ZWN1dGVSYXcoc3FsYDxTUUw+YClcIiksdGhpcy4kZXhlY3V0ZVJhd0ludGVybmFsKG8sXCIkZXhlY3V0ZVJhd1wiLHMsYSl9dGhyb3cgbmV3IFgoXCJgJGV4ZWN1dGVSYXdgIGlzIGEgdGFnIGZ1bmN0aW9uLCBwbGVhc2UgdXNlIGl0IGxpa2UgdGhlIGZvbGxvd2luZzpcXG5gYGBcXG5jb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuJGV4ZWN1dGVSYXdgVVBEQVRFIFVzZXIgU0VUIGNvb2wgPSAke3RydWV9IFdIRVJFIGVtYWlsID0gJHsndXNlckBlbWFpbC5jb20nfTtgXFxuYGBgXFxuXFxuT3IgcmVhZCBvdXIgZG9jcyBhdCBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvcmF3LWRhdGFiYXNlLWFjY2VzcyNleGVjdXRlcmF3XFxuXCIse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pfSl9JGV4ZWN1dGVSYXdVbnNhZmUobiwuLi5pKXtyZXR1cm4gdGhpcy5fY3JlYXRlUHJpc21hUHJvbWlzZShvPT4oR2kodGhpcy5fYWN0aXZlUHJvdmlkZXIsbixpLFwicHJpc21hLiRleGVjdXRlUmF3VW5zYWZlKDxTUUw+LCBbLi4udmFsdWVzXSlcIiksdGhpcy4kZXhlY3V0ZVJhd0ludGVybmFsKG8sXCIkZXhlY3V0ZVJhd1Vuc2FmZVwiLFtuLC4uLmldKSkpfSRydW5Db21tYW5kUmF3KG4pe2lmKGUuYWN0aXZlUHJvdmlkZXIhPT1cIm1vbmdvZGJcIil0aHJvdyBuZXcgWChgVGhlICR7ZS5hY3RpdmVQcm92aWRlcn0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCAkcnVuQ29tbWFuZFJhdy4gVXNlIHRoZSBtb25nb2RiIHByb3ZpZGVyLmAse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pO3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKGk9PnRoaXMuX3JlcXVlc3Qoe2FyZ3M6bixjbGllbnRNZXRob2Q6XCIkcnVuQ29tbWFuZFJhd1wiLGRhdGFQYXRoOltdLGFjdGlvbjpcInJ1bkNvbW1hbmRSYXdcIixhcmdzTWFwcGVyOm5sLGNhbGxzaXRlOlZlKHRoaXMuX2Vycm9yRm9ybWF0KSx0cmFuc2FjdGlvbjppfSkpfWFzeW5jICRxdWVyeVJhd0ludGVybmFsKG4saSxvLHMpe2xldCBhPXRoaXMuX2FjdGl2ZVByb3ZpZGVyLGw9dGhpcy5fZW5naW5lQ29uZmlnLmFkYXB0ZXI/LmZsYXZvdXI7cmV0dXJuIHRoaXMuX3JlcXVlc3Qoe2FjdGlvbjpcInF1ZXJ5UmF3XCIsYXJnczpvLHRyYW5zYWN0aW9uOm4sY2xpZW50TWV0aG9kOmksYXJnc01hcHBlcjpKaSh7Y2xpZW50TWV0aG9kOmksYWN0aXZlUHJvdmlkZXI6YSxhY3RpdmVQcm92aWRlckZsYXZvdXI6bH0pLGNhbGxzaXRlOlZlKHRoaXMuX2Vycm9yRm9ybWF0KSxkYXRhUGF0aDpbXSxtaWRkbGV3YXJlQXJnc01hcHBlcjpzfSkudGhlbihQbCl9JHF1ZXJ5UmF3KG4sLi4uaSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2Uobz0+e2lmKG4ucmF3IT09dm9pZCAwfHxuLnNxbCE9PXZvaWQgMClyZXR1cm4gdGhpcy4kcXVlcnlSYXdJbnRlcm5hbChvLFwiJHF1ZXJ5UmF3XCIsLi4uSWwobixpKSk7dGhyb3cgbmV3IFgoXCJgJHF1ZXJ5UmF3YCBpcyBhIHRhZyBmdW5jdGlvbiwgcGxlYXNlIHVzZSBpdCBsaWtlIHRoZSBmb2xsb3dpbmc6XFxuYGBgXFxuY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLiRxdWVyeVJhd2BTRUxFQ1QgKiBGUk9NIFVzZXIgV0hFUkUgaWQgPSAkezF9IE9SIGVtYWlsID0gJHsndXNlckBlbWFpbC5jb20nfTtgXFxuYGBgXFxuXFxuT3IgcmVhZCBvdXIgZG9jcyBhdCBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvcmF3LWRhdGFiYXNlLWFjY2VzcyNxdWVyeXJhd1xcblwiLHtjbGllbnRWZXJzaW9uOnRoaXMuX2NsaWVudFZlcnNpb259KX0pfSRxdWVyeVJhd1Vuc2FmZShuLC4uLmkpe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKG89PnRoaXMuJHF1ZXJ5UmF3SW50ZXJuYWwobyxcIiRxdWVyeVJhd1Vuc2FmZVwiLFtuLC4uLmldKSl9X3RyYW5zYWN0aW9uV2l0aEFycmF5KHtwcm9taXNlczpuLG9wdGlvbnM6aX0pe2xldCBvPW5tLm5leHRJZCgpLHM9Zmwobi5sZW5ndGgpLGE9bi5tYXAoKGwsdSk9PntpZihsPy5bU3ltYm9sLnRvU3RyaW5nVGFnXSE9PVwiUHJpc21hUHJvbWlzZVwiKXRocm93IG5ldyBFcnJvcihcIkFsbCBlbGVtZW50cyBvZiB0aGUgYXJyYXkgbmVlZCB0byBiZSBQcmlzbWEgQ2xpZW50IHByb21pc2VzLiBIaW50OiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhcmUgbm90IGF3YWl0aW5nIHRoZSBQcmlzbWEgY2xpZW50IGNhbGxzIHlvdSBpbnRlbmRlZCB0byBwYXNzIGluIHRoZSAkdHJhbnNhY3Rpb24gZnVuY3Rpb24uXCIpO2xldCBjPWk/Lmlzb2xhdGlvbkxldmVsLHA9e2tpbmQ6XCJiYXRjaFwiLGlkOm8saW5kZXg6dSxpc29sYXRpb25MZXZlbDpjLGxvY2s6c307cmV0dXJuIGwucmVxdWVzdFRyYW5zYWN0aW9uPy4ocCk/P2x9KTtyZXR1cm4gU2woYSl9YXN5bmMgX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrKHtjYWxsYmFjazpuLG9wdGlvbnM6aX0pe2xldCBvPXt0cmFjZXBhcmVudDp0aGlzLl90cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KCl9LHM9YXdhaXQgdGhpcy5fZW5naW5lLnRyYW5zYWN0aW9uKFwic3RhcnRcIixvLGkpLGE7dHJ5e2xldCBsPXtraW5kOlwiaXR4XCIsLi4uc307YT1hd2FpdCBuKHRoaXMuX2NyZWF0ZUl0eENsaWVudChsKSksYXdhaXQgdGhpcy5fZW5naW5lLnRyYW5zYWN0aW9uKFwiY29tbWl0XCIsbyxzKX1jYXRjaChsKXt0aHJvdyBhd2FpdCB0aGlzLl9lbmdpbmUudHJhbnNhY3Rpb24oXCJyb2xsYmFja1wiLG8scykuY2F0Y2goKCk9Pnt9KSxsfXJldHVybiBhfV9jcmVhdGVJdHhDbGllbnQobil7cmV0dXJuIHp0KEVlKG9uKHRoaXMpLFtyZShcIl9hcHBsaWVkUGFyZW50XCIsKCk9PnRoaXMuX2FwcGxpZWRQYXJlbnQuX2NyZWF0ZUl0eENsaWVudChuKSkscmUoXCJfY3JlYXRlUHJpc21hUHJvbWlzZVwiLCgpPT5IaShuKSkscmUocm0sKCk9Pm4uaWQpLEd0KHppKV0pKX0kdHJhbnNhY3Rpb24obixpKXtsZXQgbzt0eXBlb2Ygbj09XCJmdW5jdGlvblwiP289KCk9PnRoaXMuX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrKHtjYWxsYmFjazpuLG9wdGlvbnM6aX0pOm89KCk9PnRoaXMuX3RyYW5zYWN0aW9uV2l0aEFycmF5KHtwcm9taXNlczpuLG9wdGlvbnM6aX0pO2xldCBzPXtuYW1lOlwidHJhbnNhY3Rpb25cIixhdHRyaWJ1dGVzOnttZXRob2Q6XCIkdHJhbnNhY3Rpb25cIn19O3JldHVybiB0aGlzLl90cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHMsbyl9X3JlcXVlc3Qobil7bi5vdGVsUGFyZW50Q3R4PXRoaXMuX3RyYWNpbmdIZWxwZXIuZ2V0QWN0aXZlQ29udGV4dCgpO2xldCBpPW4ubWlkZGxld2FyZUFyZ3NNYXBwZXI/P3RtLG89e2FyZ3M6aS5yZXF1ZXN0QXJnc1RvTWlkZGxld2FyZUFyZ3Mobi5hcmdzKSxkYXRhUGF0aDpuLmRhdGFQYXRoLHJ1bkluVHJhbnNhY3Rpb246ISFuLnRyYW5zYWN0aW9uLGFjdGlvbjpuLmFjdGlvbixtb2RlbDpuLm1vZGVsfSxzPXttaWRkbGV3YXJlOntuYW1lOlwibWlkZGxld2FyZVwiLG1pZGRsZXdhcmU6ITAsYXR0cmlidXRlczp7bWV0aG9kOlwiJHVzZVwifSxhY3RpdmU6ITF9LG9wZXJhdGlvbjp7bmFtZTpcIm9wZXJhdGlvblwiLGF0dHJpYnV0ZXM6e21ldGhvZDpvLmFjdGlvbixtb2RlbDpvLm1vZGVsLG5hbWU6by5tb2RlbD9gJHtvLm1vZGVsfS4ke28uYWN0aW9ufWA6by5hY3Rpb259fX0sYT0tMSxsPWFzeW5jIHU9PntsZXQgYz10aGlzLl9taWRkbGV3YXJlcy5nZXQoKythKTtpZihjKXJldHVybiB0aGlzLl90cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHMubWlkZGxld2FyZSxQPT5jKHUsVD0+KFA/LmVuZCgpLGwoVCkpKSk7bGV0e3J1bkluVHJhbnNhY3Rpb246cCxhcmdzOmQsLi4uZn09dSx5PXsuLi5uLC4uLmZ9O2QmJih5LmFyZ3M9aS5taWRkbGV3YXJlQXJnc1RvUmVxdWVzdEFyZ3MoZCkpLG4udHJhbnNhY3Rpb24hPT12b2lkIDAmJnA9PT0hMSYmZGVsZXRlIHkudHJhbnNhY3Rpb247bGV0IGc9YXdhaXQgdWEodGhpcyx5KTtyZXR1cm4geS5tb2RlbD9vYSh7cmVzdWx0OmcsbW9kZWxOYW1lOnkubW9kZWwsYXJnczp5LmFyZ3MsZXh0ZW5zaW9uczp0aGlzLl9leHRlbnNpb25zLHJ1bnRpbWVEYXRhTW9kZWw6dGhpcy5fcnVudGltZURhdGFNb2RlbH0pOmd9O3JldHVybiB0aGlzLl90cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHMub3BlcmF0aW9uLCgpPT5uZXcga2wuQXN5bmNSZXNvdXJjZShcInByaXNtYS1jbGllbnQtcmVxdWVzdFwiKS5ydW5JbkFzeW5jU2NvcGUoKCk9PmwobykpKX1hc3luYyBfZXhlY3V0ZVJlcXVlc3Qoe2FyZ3M6bixjbGllbnRNZXRob2Q6aSxkYXRhUGF0aDpvLGNhbGxzaXRlOnMsYWN0aW9uOmEsbW9kZWw6bCxhcmdzTWFwcGVyOnUsdHJhbnNhY3Rpb246Yyx1bnBhY2tlcjpwLG90ZWxQYXJlbnRDdHg6ZCxjdXN0b21EYXRhUHJveHlGZXRjaDpmfSl7dHJ5e249dT91KG4pOm47bGV0IHk9e25hbWU6XCJzZXJpYWxpemVcIn0sZz10aGlzLl90cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHksKCk9PmVsKHttb2RlbE5hbWU6bCxydW50aW1lRGF0YU1vZGVsOnRoaXMuX3J1bnRpbWVEYXRhTW9kZWwsYWN0aW9uOmEsYXJnczpuLGNsaWVudE1ldGhvZDppLGNhbGxzaXRlOnMsZXh0ZW5zaW9uczp0aGlzLl9leHRlbnNpb25zLGVycm9yRm9ybWF0OnRoaXMuX2Vycm9yRm9ybWF0LGNsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pKTtyZXR1cm4gTy5lbmFibGVkKFwicHJpc21hOmNsaWVudFwiKSYmKFVlKFwiUHJpc21hIENsaWVudCBjYWxsOlwiKSxVZShgcHJpc21hLiR7aX0oJHskcyhuKX0pYCksVWUoXCJHZW5lcmF0ZWQgcmVxdWVzdDpcIiksVWUoSlNPTi5zdHJpbmdpZnkoZyxudWxsLDIpK2BcbmApKSxjPy5raW5kPT09XCJiYXRjaFwiJiZhd2FpdCBjLmxvY2ssdGhpcy5fcmVxdWVzdEhhbmRsZXIucmVxdWVzdCh7cHJvdG9jb2xRdWVyeTpnLG1vZGVsTmFtZTpsLGFjdGlvbjphLGNsaWVudE1ldGhvZDppLGRhdGFQYXRoOm8sY2FsbHNpdGU6cyxhcmdzOm4sZXh0ZW5zaW9uczp0aGlzLl9leHRlbnNpb25zLHRyYW5zYWN0aW9uOmMsdW5wYWNrZXI6cCxvdGVsUGFyZW50Q3R4OmQsb3RlbENoaWxkQ3R4OnRoaXMuX3RyYWNpbmdIZWxwZXIuZ2V0QWN0aXZlQ29udGV4dCgpLGN1c3RvbURhdGFQcm94eUZldGNoOmZ9KX1jYXRjaCh5KXt0aHJvdyB5LmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbix5fX1nZXQgJG1ldHJpY3MoKXtpZighdGhpcy5faGFzUHJldmlld0ZsYWcoXCJtZXRyaWNzXCIpKXRocm93IG5ldyBYKFwiYG1ldHJpY3NgIHByZXZpZXcgZmVhdHVyZSBtdXN0IGJlIGVuYWJsZWQgaW4gb3JkZXIgdG8gYWNjZXNzIG1ldHJpY3MgQVBJXCIse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pO3JldHVybiB0aGlzLl9tZXRyaWNzfV9oYXNQcmV2aWV3RmxhZyhuKXtyZXR1cm4hIXRoaXMuX2VuZ2luZUNvbmZpZy5wcmV2aWV3RmVhdHVyZXM/LmluY2x1ZGVzKG4pfX1yZXR1cm4gdH1mdW5jdGlvbiBJbChlLHQpe3JldHVybiBpbShlKT9bbmV3IG9lKGUsdCksdWxdOltlLGNsXX1mdW5jdGlvbiBpbShlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKSYmQXJyYXkuaXNBcnJheShlLnJhdyl9dmFyIG9tPW5ldyBTZXQoW1widG9KU09OXCIsXCIkJHR5cGVvZlwiLFwiYXN5bW1ldHJpY01hdGNoXCIsU3ltYm9sLml0ZXJhdG9yLFN5bWJvbC50b1N0cmluZ1RhZyxTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlLFN5bWJvbC50b1ByaW1pdGl2ZV0pO2Z1bmN0aW9uIF9sKGUpe3JldHVybiBuZXcgUHJveHkoZSx7Z2V0KHQscil7aWYociBpbiB0KXJldHVybiB0W3JdO2lmKCFvbS5oYXMocikpdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBlbnVtIHZhbHVlOiAke1N0cmluZyhyKX1gKX19KX1mdW5jdGlvbiBObChlKXtfdChlLHtjb25mbGljdENoZWNrOlwid2FyblwifSl9MCYmKG1vZHVsZS5leHBvcnRzPXtETU1GLERNTUZDbGFzcyxEZWJ1ZyxEZWNpbWFsLEV4dGVuc2lvbnMsTWV0cmljc0NsaWVudCxOb3RGb3VuZEVycm9yLE9iamVjdEVudW1WYWx1ZSxQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yLFByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yLFByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yLFByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3IsUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yLFB1YmxpYyxTcWwsVHlwZXMsZGVmaW5lRG1tZlByb3BlcnR5LGVtcHR5LGdldFByaXNtYUNsaWVudCxpdHhDbGllbnREZW55TGlzdCxqb2luLG1ha2VTdHJpY3RFbnVtLG9iamVjdEVudW1OYW1lcyxvYmplY3RFbnVtVmFsdWVzLHJhdyxzcWx0YWcsd2FybkVudkNvbmZsaWN0cyx3YXJuT25jZX0pO1xuLyohIEJ1bmRsZWQgbGljZW5zZSBpbmZvcm1hdGlvbjpcblxuZGVjaW1hbC5qcy9kZWNpbWFsLm1qczpcbiAgKCohXG4gICAqICBkZWNpbWFsLmpzIHYxMC40LjNcbiAgICogIEFuIGFyYml0cmFyeS1wcmVjaXNpb24gRGVjaW1hbCB0eXBlIGZvciBKYXZhU2NyaXB0LlxuICAgKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvZGVjaW1hbC5qc1xuICAgKiAgQ29weXJpZ2h0IChjKSAyMDIyIE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XG4gICAqICBNSVQgTGljZW5jZVxuICAgKilcbiovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWJyYXJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkxsIiwiT2JqZWN0IiwiY3JlYXRlIiwiUnQiLCJkZWZpbmVQcm9wZXJ0eSIsIiRsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicWwiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiVmwiLCJnZXRQcm90b3R5cGVPZiIsImpsIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJCbCIsImUiLCJ0IiwiciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiViIsImV4cG9ydHMiLCJTdCIsImdldCIsIlhpIiwibiIsImkiLCJjYWxsIiwiUyIsIl9fZXNNb2R1bGUiLCJVbCIsImVvIiwiY28iLCJ4bSIsInVvIiwicnQiLCJudCIsIml0IiwiUWUiLCJLbCIsIlFsIiwibGVuZ3RoIiwiR2wiLCJpc0Zpbml0ZSIsImxvbmciLCJIbCIsIkpsIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiU3RyaW5nIiwiZXhlYyIsInBhcnNlRmxvYXQiLCJ0b0xvd2VyQ2FzZSIsIk1hdGgiLCJhYnMiLCJyb3VuZCIsImJyIiwia24iLCJibSIsInBvIiwiV2wiLCJkZWJ1ZyIsImRlZmF1bHQiLCJjb2VyY2UiLCJsIiwiZGlzYWJsZSIsIm8iLCJlbmFibGUiLCJlbmFibGVkIiwicyIsImh1bWFuaXplIiwiZGVzdHJveSIsInUiLCJrZXlzIiwiZm9yRWFjaCIsImMiLCJuYW1lcyIsInNraXBzIiwiZm9ybWF0dGVycyIsInAiLCJkIiwiY2hhckNvZGVBdCIsImNvbG9ycyIsInNlbGVjdENvbG9yIiwiZiIsInkiLCJnIiwiUCIsIlQiLCJDIiwiTnVtYmVyIiwiRGF0ZSIsIngiLCJkaWZmIiwicHJldiIsImN1cnIiLCJ1bnNoaWZ0IiwiTSIsInJlcGxhY2UiLCJKIiwiS2UiLCIkIiwieiIsInNwbGljZSIsImZvcm1hdEFyZ3MiLCJsb2ciLCJhcHBseSIsIm5hbWVzcGFjZSIsInVzZUNvbG9ycyIsImNvbG9yIiwiZXh0ZW5kIiwibmFtZXNwYWNlcyIsInNldCIsImluaXQiLCJzYXZlIiwic3BsaXQiLCJwdXNoIiwiUmVnRXhwIiwic2xpY2UiLCJtYXAiLCJhIiwiam9pbiIsInRlc3QiLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInN0YWNrIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwibG9hZCIsIm1vIiwibGUiLCJFciIsIllsIiwiWmwiLCJYbCIsInpsIiwic3RvcmFnZSIsImV1Iiwid2luZG93IiwicHJvY2VzcyIsInR5cGUiLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwicGFyc2VJbnQiLCIkMSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsImVudiIsIkRFQlVHIiwibG9jYWxTdG9yYWdlIiwidHUiLCJqIiwiRm4iLCJFbSIsImZvIiwiYXJndiIsInN0YXJ0c1dpdGgiLCJpbmRleE9mIiwiX24iLCJ3bSIsInlvIiwicnUiLCJyZXF1aXJlIiwiZ28iLCJkZSIsIkIiLCJrZSIsIkZPUkNFX0NPTE9SIiwibWluIiwiRG4iLCJsZXZlbCIsImhhc0Jhc2ljIiwiaGFzMjU2IiwiaGFzMTZtIiwiT24iLCJURVJNIiwicGxhdGZvcm0iLCJyZWxlYXNlIiwic29tZSIsIkNJX05BTUUiLCJURUFNQ0lUWV9WRVJTSU9OIiwiQ09MT1JURVJNIiwiVEVSTV9QUk9HUkFNX1ZFUlNJT04iLCJURVJNX1BST0dSQU0iLCJudSIsImlzVFRZIiwic3VwcG9ydHNDb2xvciIsInN0ZG91dCIsImlzYXR0eSIsInN0ZGVyciIsInhvIiwiSCIsIlByIiwiaXUiLCJ3ciIsInB1IiwibHUiLCJzdSIsInV1IiwiY3UiLCJvdSIsImRlcHJlY2F0ZSIsImluc3BlY3RPcHRzIiwiZmlsdGVyIiwicmVkdWNlIiwidG9VcHBlckNhc2UiLCJmZCIsImF1IiwiaGlkZURhdGUiLCJ0b0lTT1N0cmluZyIsIndyaXRlIiwiZm9ybWF0IiwiaG8iLCJpbnNwZWN0IiwidHJpbSIsIk8iLCJMbiIsIlBtIiwiTm4iLCJicm93c2VyIiwiU28iLCJlZiIsIlVuIiwiQSIsIkkiLCJrdCIsImF0IiwiTXIiLCJSbyIsImN1cnNvclRvIiwiVHlwZUVycm9yIiwiY3Vyc29yTW92ZSIsImN1cnNvclVwIiwiY3Vyc29yRG93biIsImN1cnNvckZvcndhcmQiLCJjdXJzb3JCYWNrd2FyZCIsImN1cnNvckxlZnQiLCJjdXJzb3JTYXZlUG9zaXRpb24iLCJjdXJzb3JSZXN0b3JlUG9zaXRpb24iLCJjdXJzb3JHZXRQb3NpdGlvbiIsImN1cnNvck5leHRMaW5lIiwiY3Vyc29yUHJldkxpbmUiLCJjdXJzb3JIaWRlIiwiY3Vyc29yU2hvdyIsImVyYXNlTGluZXMiLCJlcmFzZUxpbmUiLCJlcmFzZUVuZExpbmUiLCJlcmFzZVN0YXJ0TGluZSIsImVyYXNlRG93biIsImVyYXNlVXAiLCJlcmFzZVNjcmVlbiIsInNjcm9sbFVwIiwic2Nyb2xsRG93biIsImNsZWFyU2NyZWVuIiwiY2xlYXJUZXJtaW5hbCIsImJlZXAiLCJsaW5rIiwiaW1hZ2UiLCJ3aWR0aCIsImhlaWdodCIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJpVGVybSIsInNldEN3ZCIsImN3ZCIsImFubm90YXRpb24iLCJpc0hpZGRlbiIsIkZvIiwidGYiLCJrbyIsImh1IiwibHQiLCJJbyIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsIktuIiwiRk9SQ0VfSFlQRVJMSU5LIiwiVlRFX1ZFUlNJT04iLCJzdXBwb3J0c0h5cGVybGluayIsIk9vIiwicmYiLCJGdCIsInh1IiwiUW4iLCJEbyIsInRhcmdldCIsImZhbGxiYWNrIiwiaXNTdXBwb3J0ZWQiLCJLbyIsIndmIiwiRHUiLCJuYW1lIiwidmVyc2lvbiIsImRlc2NyaXB0aW9uIiwibWFpbiIsInR5cGVzIiwic2NyaXB0cyIsImxpbnQiLCJwcmV0ZXN0IiwicHJlcmVsZWFzZSIsInJlcG9zaXRvcnkiLCJ1cmwiLCJrZXl3b3JkcyIsInJlYWRtZUZpbGVuYW1lIiwibGljZW5zZSIsImRldkRlcGVuZGVuY2llcyIsImRlY2FjaGUiLCJkdHNsaW50Iiwic2lub24iLCJzdGFuZGFyZCIsInRhcCIsInRhciIsInR5cGVzY3JpcHQiLCJlbmdpbmVzIiwibm9kZSIsIkdvIiwiUGYiLCJGciIsIk91IiwiUW8iLCJfdSIsIk51IiwiTHUiLCIkdSIsInF1IiwiV24iLCJWdSIsImhvbWVkaXIiLCJqdSIsInJlc29sdmUiLCJvdmVycmlkZSIsInBhdGgiLCJlbmNvZGluZyIsImtyIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJwYXJzZWQiLCJlcnJvciIsImNvbmZpZyIsIlpvIiwiU2YiLCJZbyIsImVzIiwiSWYiLCJYbyIsIlF1IiwidHMiLCJrZiIsIkd1IiwiYXV0aG9yIiwicHJpc21hIiwiZW5naW5lc1ZlcnNpb24iLCJkaXJlY3RvcnkiLCJmaWxlcyIsImJ1aWxkIiwiWG4iLCJPciIsImlpIiwiS2YiLCJpcyIsImluZGVudCIsImluY2x1ZGVFbXB0eUxpbmVzIiwicmVwZWF0IiwibHMiLCJKZiIsImFzIiwib25seUZpcnN0IiwibGkiLCJIZiIsInVzIiwicmMiLCJjcyIsIllmIiwiTnIiLCJyZXBvVXJsIiwidXNlciIsInJlcG8iLCJVUkwiLCJBcnJheSIsImlzQXJyYXkiLCJzZWFyY2hQYXJhbXMiLCJVaSIsIkNQIiwiS2EiLCJjZSIsInNtIiwiRE1NRiIsInBlIiwiRE1NRkNsYXNzIiwieHIiLCJEZWJ1ZyIsIiRuIiwiRGVjaW1hbCIsIlBlIiwiRXh0ZW5zaW9ucyIsIk1uIiwiTWV0cmljc0NsaWVudCIsImR0IiwiTm90Rm91bmRFcnJvciIsIk1lIiwiT2JqZWN0RW51bVZhbHVlIiwieGUiLCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yIiwiRiIsIlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yIiwiVSIsIlByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yIiwidWUiLCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yIiwiSyIsIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvciIsIlgiLCJQdWJsaWMiLCJSbiIsIlNxbCIsIm9lIiwiVHlwZXMiLCJTbiIsImRlZmluZURtbWZQcm9wZXJ0eSIsIm1zIiwiZW1wdHkiLCJ5cyIsImdldFByaXNtYUNsaWVudCIsIk9sIiwiaXR4Q2xpZW50RGVueUxpc3QiLCJ6aSIsImdzIiwibWFrZVN0cmljdEVudW0iLCJfbCIsIm9iamVjdEVudW1OYW1lcyIsImljIiwib2JqZWN0RW51bVZhbHVlcyIsIiRyIiwicmF3IiwiZ2kiLCJzcWx0YWciLCJ5aSIsIndhcm5FbnZDb25mbGljdHMiLCJObCIsIndhcm5PbmNlIiwicXQiLCJtb2R1bGUiLCJkZWZpbmVFeHRlbnNpb24iLCJ0byIsImdldEV4dGVuc2lvbkNvbnRleHQiLCJybyIsIiRleHRlbmRzIiwidmFsaWRhdG9yIiwibm8iLCJpbyIsIm9vIiwiUmVzdWx0Iiwic28iLCJVdGlscyIsImFvIiwiSWUiLCJsbyIsImNvbnN0cnVjdG9yIiwiY29tcG9zaXRlTmFtZXMiLCJTZXQiLCJkYXRhbW9kZWwiLCJ0eXBlQW5kTW9kZWxNYXAiLCJidWlsZFR5cGVNb2RlbE1hcCIsIm1hcHBpbmdzTWFwIiwiYnVpbGRNYXBwaW5nc01hcCIsIm91dHB1dFR5cGVNYXAiLCJidWlsZE1lcmdlZE91dHB1dFR5cGVNYXAiLCJyb290RmllbGRNYXAiLCJidWlsZFJvb3RGaWVsZE1hcCIsImlucHV0VHlwZXNCeU5hbWUiLCJidWlsZElucHV0VHlwZXNNYXAiLCJtYXBwaW5ncyIsInNjaGVtYSIsImlucHV0T2JqZWN0VHlwZXMiLCJvdXRwdXRPYmplY3RUeXBlcyIsImlzQ29tcG9zaXRlIiwiaGFzIiwiZ2V0T3RoZXJPcGVyYXRpb25OYW1lcyIsInZhbHVlcyIsIm90aGVyT3BlcmF0aW9ucyIsInJlYWQiLCJmbGF0IiwiaGFzRW51bUluTmFtZXNwYWNlIiwiZW51bVR5cGVzIiwiZmluZCIsInJlc29sdmVJbnB1dE9iamVjdFR5cGUiLCJJbiIsInJlc29sdmVPdXRwdXRPYmplY3RUeXBlIiwibG9jYXRpb24iLCJidWlsZE1vZGVsTWFwIiwibW9kZWxzIiwiYnVpbGRUeXBlTWFwIiwibW9kZWxPcGVyYXRpb25zIiwibW9kZWwiLCJRdWVyeSIsImZpZWxkcyIsIk11dGF0aW9uIiwiTWFwIiwiZmluZFVuaXF1ZSIsImZpbmRVbmlxdWVPclRocm93IiwiZmluZEZpcnN0IiwiZmluZEZpcnN0T3JUaHJvdyIsImZpbmRNYW55IiwiY3JlYXRlTWFueSIsInVwZGF0ZSIsInVwZGF0ZU1hbnkiLCJ1cHNlcnQiLCJkZWxldGUiLCJkZWxldGVNYW55IiwiZ3JvdXBCeSIsImNvdW50IiwiYWdncmVnYXRlIiwiZmluZFJhdyIsImFnZ3JlZ2F0ZVJhdyIsIk1vZGVsQWN0aW9uIiwidnIiLCJkdSIsIkl0IiwibXUiLCJhc3NpZ24iLCJzaGlmdCIsImJvIiwiRW8iLCJxbiIsIndvIiwiUG8iLCJ2byIsIlRvIiwiTk9ERV9ESVNBQkxFX0NPTE9SUyIsIk5PX0NPTE9SIiwiZnUiLCJfIiwiVG0iLCJuZSIsIkZlIiwiQ20iLCJ0ZSIsIkFtIiwiTW0iLCJSbSIsIlNtIiwibWUiLCJHZSIsImhlIiwib3QiLCJJbSIsIkRlIiwia20iLCJUciIsIkZtIiwiRG0iLCJPbSIsIl9tIiwiTm0iLCJMbSIsIiRtIiwicW0iLCJWbSIsIkNvIiwiVm4iLCJQUklTTUFfUVVFUllfRU5HSU5FX0xJQlJBUlkiLCJleGlzdHNTeW5jIiwiYXJjaCIsIkNyIiwiam4iLCJpbmNsdWRlcyIsIiRvIiwiR24iLCJTciIsIkFyIiwiU3ltYm9sIiwiQW8iLCJNbyIsIkJuIiwiZ3UiLCJtYXRjaGVkIiwic2VsZWN0aW9ucyIsImV2ZXJ5IiwiZnJvbSIsInNpemUiLCJtYXRjaGVyVHlwZSIsIkplIiwiR20iLCJKbSIsIkhtIiwiV20iLCJ6bSIsIlltIiwiWm0iLCJzdCIsInl1IiwiY2FzZXMiLCJ3aXRoIiwiYXJndW1lbnRzIiwiY29uY2F0IiwiaGFuZGxlciIsIndoZW4iLCJvdGhlcndpc2UiLCJydW4iLCJleGhhdXN0aXZlIiwicW8iLCJfbyIsIkR0IiwiYnUiLCJFdSIsIlBSSVNNQV9ESVNBQkxFX1dBUk5JTkdTIiwiT3QiLCJ3dSIsInByb21pc2lmeSIsImllIiwiUHUiLCJWbyIsIklyIiwidGFyZ2V0RGlzdHJvIiwiVHUiLCJGdSIsIkF1IiwiYXJjaEZyb21VbmFtZSIsImZhbWlseURpc3RybyIsImxpYnNzbCIsIk11IiwidnUiLCJpZCIsImlkTGlrZSIsIm9yaWdpbmFsRGlzdHJvIiwicmVhZEZpbGUiLCJDdSIsImpvIiwiTm8iLCJVbyIsIkxvIiwic3RyYXRlZ3kiLCJSdSIsInJlYWRkaXIiLCJjb2RlIiwidXQiLCJiaW5hcnlUYXJnZXQiLCJCbyIsIlN1IiwiSm4iLCJtZW1vaXplZCIsIlJyIiwiUHJvbWlzZSIsIkl1Iiwia3UiLCJtYWNoaW5lIiwiSG4iLCJZbiIsIkRyIiwiY3QiLCJKbyIsImlnbm9yZVByb2Nlc3NFbnYiLCJ6biIsIl90Iiwicm9vdEVudlBhdGgiLCJzY2hlbWFFbnZQYXRoIiwiY29uZmxpY3RDaGVjayIsIkhvIiwiQnUiLCJXbyIsImRvdGVudlJlc3VsdCIsIkJvb2xlYW4iLCJyZWxhdGl2ZSIsIlV1IiwiRE9URU5WX0NPTkZJR19ERUJVRyIsInpvIiwiWm4iLCJLdSIsImVuZ2luZVR5cGUiLCJQUklTTUFfQ0xJRU5UX0VOR0lORV9UWVBFIiwiSnUiLCJOIiwiSHUiLCJPZiIsInJzIiwiX19kaXJuYW1lIiwiX2YiLCJlaSIsIm5zIiwidGkiLCJzdGF0U3luYyIsIm1vZGUiLCJjaG1vZFN5bmMiLCJyaSIsInBsYXRmb3JtSW5mbyIsIk50IiwibmkiLCJzZXAiLCJwb3NpeCIsIm9zIiwic2kiLCJvaSIsInByb3ZpZGVyIiwiZnJvbUVudlZhciIsImJpbmFyeVRhcmdldHMiLCJXdSIsInp1IiwibmF0aXZlIiwibWF4IiwiZW50cmllcyIsInBhZEVuZCIsIll1IiwiJHQiLCJlYyIsImluZm8iLCJYdSIsIlp1IiwicXVlcnkiLCJ0YyIsInNob3VsZCIsInNzIiwidGFncyIsIkx0IiwiYWkiLCJfciIsIkhlIiwidWkiLCJjaSIsInB0IiwicGkiLCJFIiwicHMiLCJhZGQiLCJjbGllbnRWZXJzaW9uIiwibWV0YSIsImJhdGNoUmVxdWVzdElkeCIsInRvU3RyaW5nVGFnIiwiZXJyb3JDb2RlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJfZW5naW5lIiwicHJvbWV0aGV1cyIsIm1ldHJpY3MiLCJqc29uIiwiVnQiLCJuYyIsImRpIiwiZW51bXMiLCJMciIsIm1pIiwiV2Vha01hcCIsIl9nZXROYW1lIiwiX2dldE5hbWVzcGFjZSIsImp0IiwiQnQiLCJmaSIsIlV0IiwiS3QiLCJjbGFzc2VzIiwiRGJOdWxsIiwiSnNvbk51bGwiLCJBbnlOdWxsIiwiaW5zdGFuY2VzIiwibGMiLCJxciIsIm9rIiwiZmxhdE1hcCIsIm9jIiwiY29uc3VtZUVycm9yIiwicmVnaXN0ZXJlZEVycm9ycyIsInJlZ2lzdGVyTmV3RXJyb3IiLCJmcyIsIk9lIiwic3RhcnRUcmFuc2FjdGlvbiIsImJpbmQiLCJlcnJvclJlZ2lzdHJ5IiwicXVlcnlSYXciLCJleGVjdXRlUmF3IiwiZmxhdm91ciIsInNjIiwiY2xvc2UiLCJvcHRpb25zIiwiY29tbWl0Iiwicm9sbGJhY2siLCJkaXNwb3NlIiwiYWMiLCJraW5kIiwia2wiLCJGbCIsIkRsIiwieXIiLCJzdHJpbmdzIiwidGV4dCIsInNxbCIsImZpbGwiLCJRdCIsImdldEtleXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmUiLCJiZSIsIl9tYXAiLCJnZXRPckNyZWF0ZSIsIldlIiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwiYnMiLCJWciIsImpyIiwiUmVmbGVjdCIsIm93bktleXMiLCJocyIsImZvciIsIkVlIiwidWMiLCJQcm94eSIsInhzIiwiR3QiLCJtdCIsImNvbnRleHQiLCJsaW5lcyIsImN1cnJlbnRMaW5lIiwiY3VycmVudEluZGVudCIsIndyaXRlSm9pbmVkIiwid3JpdGVMaW5lIiwibmV3TGluZSIsImluZGVudGVkQ3VycmVudExpbmUiLCJtYXJnaW5TeW1ib2wiLCJhZnRlck5leHROZXdMaW5lQ2FsbGJhY2siLCJ3aXRoSW5kZW50IiwidW5pbmRlbnQiLCJhZnRlck5leHROZXdsaW5lIiwiYWRkTWFyZ2luU3ltYm9sIiwiZ2V0Q3VycmVudExpbmVMZW5ndGgiLCJwYWRTdGFydCIsImZ0IiwiQnIiLCJndCIsIiRlIiwiaGkiLCJLciIsIlFyIiwieGkiLCJwcmVjaXNpb24iLCJyb3VuZGluZyIsIm1vZHVsbyIsInRvRXhwTmVnIiwidG9FeHBQb3MiLCJtaW5FIiwibWF4RSIsImNyeXB0byIsInZzIiwiUmUiLCJ3IiwiSnIiLCJMZSIsIlRzIiwiQ3MiLCJBcyIsImVlIiwiZmxvb3IiLCJwb3ciLCJjYyIsInBjIiwiZGMiLCJNcyIsImdlIiwiYiIsIm1jIiwiZmMiLCJiaSIsIm0iLCJhYnNvbHV0ZVZhbHVlIiwiaCIsImNlaWwiLCJjbGFtcGVkVG8iLCJjbGFtcCIsIk5hTiIsImNtcCIsImNvbXBhcmVkVG8iLCJjb3NpbmUiLCJjb3MiLCJzZCIsImdjIiwiRnMiLCJuZWciLCJjdWJlUm9vdCIsImNicnQiLCJpc1plcm8iLCJXIiwidG9FeHBvbmVudGlhbCIsInRpbWVzIiwicGx1cyIsIkQiLCJlcSIsImNoYXJBdCIsImRlY2ltYWxQbGFjZXMiLCJkcCIsImRpdmlkZWRCeSIsImRpdiIsImRpdmlkZWRUb0ludGVnZXJCeSIsImRpdlRvSW50IiwiZXF1YWxzIiwiZ3JlYXRlclRoYW4iLCJncmVhdGVyVGhhbk9yRXF1YWxUbyIsImd0ZSIsImh5cGVyYm9saWNDb3NpbmUiLCJjb3NoIiwiV3IiLCJ5dCIsIm1pbnVzIiwiaHlwZXJib2xpY1NpbmUiLCJzaW5oIiwic3FydCIsImh5cGVyYm9saWNUYW5nZW50IiwidGFuaCIsImludmVyc2VDb3NpbmUiLCJhY29zIiwiaXNOZWciLCJmZSIsImFzaW4iLCJpbnZlcnNlSHlwZXJib2xpY0Nvc2luZSIsImFjb3NoIiwibHRlIiwibG4iLCJpbnZlcnNlSHlwZXJib2xpY1NpbmUiLCJhc2luaCIsImludmVyc2VIeXBlcmJvbGljVGFuZ2VudCIsImF0YW5oIiwiaW52ZXJzZVNpbmUiLCJhdGFuIiwiaW52ZXJzZVRhbmdlbnQiLCJpc0ludGVnZXIiLCJpc0ludCIsImlzTmFOIiwiaXNOZWdhdGl2ZSIsImlzUG9zaXRpdmUiLCJpc1BvcyIsImxlc3NUaGFuIiwibGVzc1RoYW5PckVxdWFsVG8iLCJsb2dhcml0aG0iLCJOZSIsIkdyIiwiSnQiLCJzdWIiLCJyZXZlcnNlIiwicG9wIiwiSHIiLCJtb2QiLCJuYXR1cmFsRXhwb25lbnRpYWwiLCJleHAiLCJFaSIsIm5hdHVyYWxMb2dhcml0aG0iLCJuZWdhdGVkIiwiUnMiLCJzaW5lIiwic2luIiwiaGMiLCJzcXVhcmVSb290IiwidGFuZ2VudCIsInRhbiIsIm11bCIsInRvQmluYXJ5IiwiUGkiLCJ0b0RlY2ltYWxQbGFjZXMiLCJ0b0RQIiwic2UiLCJ3ZSIsInRvRml4ZWQiLCJ0b0ZyYWN0aW9uIiwidG9IZXhhZGVjaW1hbCIsInRvSGV4IiwidG9OZWFyZXN0IiwidG9OdW1iZXIiLCJ0b09jdGFsIiwidG9Qb3dlciIsIlNzIiwiTE4xMCIsInRvUHJlY2lzaW9uIiwidG9TaWduaWZpY2FudERpZ2l0cyIsInRvU0QiLCJ0cnVuY2F0ZWQiLCJ0cnVuYyIsInZhbHVlT2YiLCJ0b0pTT04iLCJfZSIsIlVyIiwiQWUiLCJZIiwidHQiLCJociIsIkFuIiwiWiIsImsiLCJrcyIsIndzIiwiRXMiLCJJcyIsIndpIiwic2VhcmNoIiwieWMiLCJ6ZSIsInhjIiwiYmMiLCJFYyIsIndjIiwiUGMiLCJ2YyIsIlRjIiwiQ2MiLCJBYyIsIk1jIiwiUmMiLCJTYyIsIkljIiwiZGVmYXVsdHMiLCJnZXRSYW5kb21WYWx1ZXMiLCJyYW5kb21CeXRlcyIsImtjIiwiRmMiLCJEcyIsIlBzIiwiUk9VTkRfVVAiLCJST1VORF9ET1dOIiwiUk9VTkRfQ0VJTCIsIlJPVU5EX0ZMT09SIiwiUk9VTkRfSEFMRl9VUCIsIlJPVU5EX0hBTEZfRE9XTiIsIlJPVU5EX0hBTEZfRVZFTiIsIlJPVU5EX0hBTEZfQ0VJTCIsIlJPVU5EX0hBTEZfRkxPT1IiLCJFVUNMSUQiLCJjbG9uZSIsImlzRGVjaW1hbCIsImF0YW4yIiwiRGMiLCJPYyIsIl9jIiwiaHlwb3QiLCJOYyIsIkxjIiwiJGMiLCJsb2cxMCIsIlZjIiwibG9nMiIsInFjIiwiamMiLCJCYyIsIlVjIiwiS2MiLCJRYyIsInJhbmRvbSIsIkdjIiwiSmMiLCJzaWduIiwiSGMiLCJXYyIsInpjIiwiWWMiLCJaYyIsInN1bSIsIlhjIiwiZXAiLCJ0cCIsInJwIiwiVWludDMyQXJyYXkiLCJjb3B5IiwiaHQiLCJIdCIsIm1vZGVsTmFtZSIsInR5cGVOYW1lIiwiaXNMaXN0IiwiaXNFbnVtIiwiX3RvR3JhcGhRTElucHV0VHlwZSIsInh0IiwienIiLCJtYXJrQXNFcnJvciIsIllyIiwiWnIiLCJib2xkIiwicmVkIiwiZ3JlZW4iLCJkaW0iLCJPcyIsImJ0IiwidmUiLCJjb250ZW50cyIsImlzVW5kZXJsaW5lZCIsInVuZGVybGluZSIsInNldENvbG9yIiwicWUiLCJoYXNFcnJvciIsIkV0IiwiaXRlbXMiLCJhZGRJdGVtIiwiZ2V0RmllbGQiLCJnZXRQcmludFdpZHRoIiwid3JpdGVFbXB0eSIsIndyaXRlV2l0aEl0ZW1zIiwiX3MiLCJYciIsIlEiLCJzdWdnZXN0aW9ucyIsImFkZEZpZWxkIiwiYWRkU3VnZ2VzdGlvbiIsImdldERlZXBGaWVsZCIsImdldERlZXBGaWVsZFZhbHVlIiwiaGFzRmllbGQiLCJyZW1vdmVBbGxGaWVsZHMiLCJyZW1vdmVGaWVsZCIsImdldEZpZWxkcyIsImlzRW1wdHkiLCJnZXRGaWVsZFZhbHVlIiwiZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlIiwiZ2V0U3ViU2VsZWN0aW9uVmFsdWUiLCJnZXREZWVwU2VsZWN0aW9uUGFyZW50IiwiZ2V0U2VsZWN0aW9uUGFyZW50Iiwid3JpdGVXaXRoQ29udGVudHMiLCJHIiwidmkiLCJlcnJvck1lc3NhZ2VzIiwiYWRkRXJyb3JNZXNzYWdlIiwicmVuZGVyQWxsTWVzc2FnZXMiLCJlbiIsIk5zIiwiTHMiLCJVaW50OEFycmF5IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJieXRlTGVuZ3RoIiwiaXAiLCIkcyIsIld0IiwicXMiLCJhcCIsInVwIiwieXAiLCJmcCIsIm9wIiwic3AiLCJmaWxlIiwibWV0aG9kTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW4iLCJscCIsImNwIiwicHAiLCJtcCIsImdwIiwiVGkiLCJnZXRMb2NhdGlvbiIsIkNpIiwiX2Vycm9yIiwiZW5kc1dpdGgiLCJmaWxlTmFtZSIsImNvbHVtbk51bWJlciIsIlZlIiwiVnMiLCJfYXZnIiwiX2NvdW50IiwiX3N1bSIsIl9taW4iLCJfbWF4Iiwid3QiLCJ4cCIsInNlbGVjdCIsIl9hbGwiLCJ0biIsImpzIiwiYWN0aW9uIiwidW5wYWNrZXIiLCJhcmdzTWFwcGVyIiwiYnAiLCJFcCIsIkJzIiwid3AiLCJieSIsIlBwIiwiVXMiLCJLcyIsIlFzIiwicmVsYXRpb25OYW1lIiwiR3MiLCJBaSIsIkpzIiwicmVkdWNlUmlnaHQiLCJ2cCIsIlRwIiwiTWkiLCJfcnVudGltZURhdGFNb2RlbCIsIl9lcnJvckZvcm1hdCIsImRhdGFQYXRoIiwiY2FsbHNpdGUiLCJDcCIsIlhzIiwiWnMiLCJIcyIsImtleXdvcmQiLCJlbnRpdHkiLCJwdW5jdHVhdGlvbiIsImRpcmVjdGl2ZSIsImZ1bmN0aW9uIiwidmFyaWFibGUiLCJzdHJpbmciLCJib29sZWFuIiwibnVtYmVyIiwiY29tbWVudCIsIkFwIiwicm4iLCJNcCIsInYiLCJtYW51YWwiLCJQcmlzbSIsImRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlciIsInV0aWwiLCJlbmNvZGUiLCJ5ZSIsImNvbnRlbnQiLCJhbGlhcyIsIm9iaklkIiwiX19pZCIsImxhbmd1YWdlcyIsImluc2VydEJlZm9yZSIsIkRGUyIsInBsdWdpbnMiLCJoaWdobGlnaHQiLCJncmFtbWFyIiwibGFuZ3VhZ2UiLCJob29rcyIsInRva2VucyIsInRva2VuaXplIiwibWF0Y2hHcmFtbWFyIiwiaW5zaWRlIiwibG9va2JlaGluZCIsImdyZWVkeSIsInBhdHRlcm4iLCJnbG9iYWwiLCJzb3VyY2UiLCJsYXN0SW5kZXgiLCJpbmRleCIsInJlc3QiLCJhbGwiLCJUb2tlbiIsImNsaWtlIiwib3BlcmF0b3IiLCJqYXZhc2NyaXB0IiwicmVnZXgiLCJwYXJhbWV0ZXIiLCJjb25zdGFudCIsIm1hcmt1cCIsInRhZyIsImFkZElubGluZWQiLCJidWlsdGluIiwiUnAiLCJXcyIsIlNwIiwienMiLCJZcyIsIm5uIiwiZnJvbUNvbnRlbnQiLCJmaXJzdExpbmVOdW1iZXIiLCJsYXN0TGluZU51bWJlciIsIm1hcExpbmVBdCIsIm1hcExpbmVzIiwibGluZUF0IiwicHJlcGVuZFN5bWJvbEF0IiwiSXAiLCJncmF5IiwiaGlnaGxpZ2h0U291cmNlIiwia3AiLCJGcCIsIm9yaWdpbmFsTWV0aG9kIiwiaXNQYW5pYyIsImNhbGxBcmd1bWVudHMiLCJmdW5jdGlvbk5hbWUiLCJPcCIsIkRwIiwib3BlbmluZ0JyYWNlSW5kZXgiLCJjb250ZXh0TGluZXMiLCJsYXN0SW5kZXhPZiIsIl9wIiwiTnAiLCJQdCIsInNob3dDb2xvcnMiLCJlYSIsIkxwIiwiYXJncyIsImNsaWVudE1ldGhvZCIsImNhdGNoIiwiVGUiLCIkcCIsInFwIiwiUmkiLCJfZXh0ZW5zaW9ucyIsImdldEFsbE1vZGVsRXh0ZW5zaW9ucyIsIlZwIiwiQnAiLCJfYXBwbGllZFBhcmVudCIsIl9yZXF1ZXN0IiwiX2NsaWVudFZlcnNpb24iLCJfY3JlYXRlUHJpc21hUHJvbWlzZSIsImpzTW9kZWxOYW1lIiwidHJhbnNhY3Rpb24iLCJqcCIsInRhIiwiU2kiLCJ6dCIsIlVwIiwiZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucyIsIm9uIiwicmEiLCJhcHBlbmQiLCIkdXNlIiwiJG9uIiwibmEiLCJyZXN1bHQiLCJleHRlbnNpb25zIiwiZ2V0QWxsQ29tcHV0ZWRGaWVsZHMiLCJuZWVkcyIsIktwIiwiUXAiLCJjb21wdXRlIiwic24iLCJ2aXNpdG9yIiwicnVudGltZURhdGFNb2RlbCIsImluY2x1ZGUiLCJpYSIsImluY2x1ZGVPclNlbGVjdCIsInBhcmVudE1vZGVsTmFtZSIsIm9hIiwic2EiLCJHcCIsIll0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJsYSIsImN1c3RvbURhdGFQcm94eUZldGNoIiwibG9jayIsInRoZW4iLCJfZXhlY3V0ZVJlcXVlc3QiLCJvcGVyYXRpb24iLCJfX2ludGVybmFsUGFyYW1zIiwiZGEiLCJ1YSIsImdldEFsbFF1ZXJ5Q2FsbGJhY2tzIiwiY2EiLCJyZXF1ZXN0cyIsImdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MiLCJwYSIsInF1ZXJpZXMiLCJpc29sYXRpb25MZXZlbCIsImFhIiwiZmEiLCIkYWxsTW9kZWxzIiwiSnAiLCJtYSIsIkhwIiwiZ2EiLCJhbiIsImV4dGVuc2lvbiIsInByZXZpb3VzIiwiY29tcHV0ZWRGaWVsZHNDYWNoZSIsIm1vZGVsRXh0ZW5zaW9uc0NhY2hlIiwicXVlcnlDYWxsYmFja3NDYWNoZSIsImNsaWVudEV4dGVuc2lvbnMiLCJjbGllbnQiLCJiYXRjaENhbGxiYWNrcyIsIiRfX2ludGVybmFsQmF0Y2giLCIkYWxsT3BlcmF0aW9ucyIsImhlYWQiLCJzaW5nbGUiLCJ5YSIsImhhIiwiVmVyY2VsIiwieGEiLCJwb3N0aW5zdGFsbCIsImNpTmFtZSIsImJhIiwiZGF0YXNvdXJjZXMiLCJkYXRhc291cmNlVXJsIiwiWnQiLCJ1c2VyX2ZhY2luZ19lcnJvciIsImVycm9yX2NvZGUiLCJiYXRjaF9yZXF1ZXN0X2lkeCIsInZ0IiwiVGEiLCJYdCIsInVuIiwicnVudGltZUJpbmFyeVRhcmdldCIsIldwIiwiZ2VuZXJhdG9yIiwiZ2VuZXJhdG9yQmluYXJ5VGFyZ2V0cyIsImplIiwiQmUiLCJzZWFyY2hlZExvY2F0aW9ucyIsIkVhIiwiY24iLCJ3YSIsInF1ZXJ5RW5naW5lTmFtZSIsImV4cGVjdGVkTG9jYXRpb24iLCJQYSIsInZhIiwienAiLCJZcCIsIkNhIiwiYmluYXJ5IiwiUFJJU01BX1FVRVJZX0VOR0lORV9CSU5BUlkiLCJsaWJyYXJ5IiwicHJpc21hUGF0aCIsImVuZ2luZVBhdGgiLCJacCIsIl9fZmlsZW5hbWUiLCJBYSIsImRpcm5hbWUiLCJldmFsIiwic2VhcmNoTG9jYXRpb25zIiwib3V0cHV0IiwicG4iLCJiYXRjaCIsIklpIiwiTWEiLCJSYSIsIlNhIiwiSWEiLCJ0aXRsZSIsInRlbXBsYXRlIiwiYm9keSIsImthIiwiZW5naW5lVmVyc2lvbiIsImRhdGFiYXNlIiwiZG4iLCJpbmxpbmVEYXRhc291cmNlcyIsIm92ZXJyaWRlRGF0YXNvdXJjZXMiLCJtbiIsImNhdXNlIiwiYWUiLCJpc1JldHJ5YWJsZSIsIlIiLCJUdCIsIlllIiwiWmUiLCJMIiwicmVzcG9uc2UiLCJoZWFkZXJzIiwiWGUiLCJraSIsImVyIiwidHIiLCJsb2dzIiwicnIiLCJuciIsIkZpIiwiaXIiLCJYcCIsIm9yIiwiZWQiLCJzciIsIkRpIiwiYXIiLCJPaSIsIkN0IiwiX2kiLCJsciIsIk5pIiwidXIiLCJ0ZCIsInJlYXNvbiIsImNyIiwiRW5naW5lTm90U3RhcnRlZCIsIm1zZyIsIkVuZ2luZVN0YXJ0dXBFcnJvciIsIktub3duRW5naW5lU3RhcnR1cEVycm9yIiwiSGVhbHRoY2hlY2tUaW1lb3V0IiwiSURQYXJzZUVycm9yIiwiTm9RdWVyeUVuZ2luZUZvdW5kRXJyb3IiLCJUcmFuc2FjdGlvblN0YXJ0RXJyb3IiLCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkIiwiSW52YWxpZFJlcXVlc3RFcnJvciIsInN0YXR1cyIsIkF0IiwiRmEiLCJzZXRUaW1lb3V0IiwiRGEiLCJwcmV2aWV3RmVhdHVyZXMiLCJPYSIsImV4ZWNhIiwiamVzdCIsInByIiwiZXQiLCJmZXRjaCIsIkxpIiwibmQiLCJtZXRob2QiLCJvZCIsInN0YXR1c0NvZGUiLCIkaSIsIm9yaWdpbiIsInJlcXVlc3QiLCJlbmQiLCJhZCIsIl9hIiwibGQiLCJQUklTTUFfQ0xJRU5UX0RBVEFfUFJPWFlfQ0xJRU5UX1ZFUlNJT04iLCJ1ZCIsInN0YXR1c1RleHQiLCJOYSIsImVuY29kZVVSSSIsIkxhIiwicWkiLCJWaSIsImFwaUtleSIsInRyYWNpbmdIZWxwZXIiLCJsb2dMZXZlbCIsImxvZ1F1ZXJpZXMiLCJlbmdpbmVIYXNoIiwidHJhY2VwYXJlbnQiLCJpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uIiwiQXV0aG9yaXphdGlvbiIsImlzRW5hYmxlZCIsImdldFRyYWNlUGFyZW50IiwiYnVpbGRDYXB0dXJlU2V0dGluZ3MiLCJkciIsImlubGluZVNjaGVtYSIsImlubGluZVNjaGVtYUhhc2giLCJsb2dFbWl0dGVyIiwiaGVhZGVyQnVpbGRlciIsInN0YXJ0Iiwic3RhcnRQcm9taXNlIiwiZXh0cmFjdEhvc3RBbmRBcGlLZXkiLCJob3N0IiwicmVtb3RlQ2xpZW50VmVyc2lvbiIsInN0b3AiLCJwcm9wYWdhdGVSZXNwb25zZUV4dGVuc2lvbnMiLCJhdHRyaWJ1dGVzIiwiZW1pdCIsInRpbWVzdGFtcCIsImR1cmF0aW9uIiwiZHVyYXRpb25fbXMiLCJwYXJhbXMiLCJ0cmFjZXMiLCJjcmVhdGVFbmdpbmVTcGFuIiwic3BhbiIsInNwYW5zIiwidXBsb2FkU2NoZW1hIiwiaW50ZXJuYWwiLCJydW5JbkNoaWxkU3BhbiIsInJlcXVlc3RJbnRlcm5hbCIsInJlcXVlc3RCYXRjaCIsImJhdGNoUmVzdWx0IiwiZWxhcHNlZCIsImVycm9ycyIsImRhdGEiLCJ3aXRoUmV0cnkiLCJhY3Rpb25HZXJ1bmQiLCJjYWxsYmFjayIsImxvZ0h0dHBDYWxsIiwicGF5bG9hZCIsImVuZHBvaW50IiwiaGFuZGxlRXJyb3IiLCJtYXhfd2FpdCIsIm1heFdhaXQiLCJ0aW1lb3V0IiwiaXNvbGF0aW9uX2xldmVsIiwicHJvdG9jb2wiLCJCYSIsIiRhIiwiQmkiLCJxYSIsImppIiwiY2QiLCJnbG9iYWxUaGlzIiwicGQiLCJ0b05hbWVzcGFjZWRQYXRoIiwiY29uc3RhbnRzIiwiZGxvcGVuIiwiUlRMRF9MQVpZIiwiUlRMRF9ERUVQQklORCIsImZuIiwibG9hZExpYnJhcnkiLCJkZCIsIkNlIiwibWQiLCJpdGVtX3R5cGUiLCJWYSIsImphIiwibXIiLCJkYXRhbW9kZWxQYXRoIiwiaXNCdW5kbGVkIiwibGlicmFyeVN0YXJ0ZWQiLCJsaWJyYXJ5TG9hZGVyIiwiZW5hYmxlRGVidWdMb2dzIiwiZGF0YXNvdXJjZU92ZXJyaWRlcyIsImxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZSIsImluc3RhbnRpYXRlTGlicmFyeSIsImNoZWNrRm9yVG9vTWFueUVuZ2luZXMiLCJlbmdpbmUiLCJjb21taXRUcmFuc2FjdGlvbiIsInJvbGxiYWNrVHJhbnNhY3Rpb24iLCJwYXJzZUVuZ2luZVJlc3BvbnNlIiwiZ2V0UGxhdGZvcm0iLCJsb2FkRW5naW5lIiwiUXVlcnlFbmdpbmVDb25zdHJ1Y3RvciIsIlF1ZXJ5RW5naW5lIiwiV2Vha1JlZiIsImFkYXB0ZXIiLCJpZ25vcmVFbnZWYXJFcnJvcnMiLCJjb25maWdEaXIiLCJlbmdpbmVQcm90b2NvbCIsImRlcmVmIiwibG9nZ2VyIiwicGFyc2VJbml0RXJyb3IiLCJtb2R1bGVfcGF0aCIsImxvZ2dlclJ1c3RQYW5pYyIsImdldEVycm9yTWVzc2FnZVdpdGhMaW5rIiwibGluZSIsInZlcnNpb25JbmZvIiwiYWN0aXZlUHJvdmlkZXIiLCJsYXN0UXVlcnkiLCJwYXJzZVJlcXVlc3RFcnJvciIsImxpYnJhcnlTdG9wcGluZ1Byb21pc2UiLCJsaWJyYXJ5U3RhcnRpbmdQcm9taXNlIiwiY29ubmVjdCIsImV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZSIsImRpc2Nvbm5lY3QiLCJkZWJ1Z1BhbmljIiwiYnVpbGRRdWVyeUVycm9yIiwiYmFja3RyYWNlIiwiaXNfcGFuaWMiLCJVYSIsIm5vRW5naW5lIiwiZ24iLCJXYSIsIkphIiwiSGEiLCJnZCIsImhkIiwieW4iLCJzZWxlY3Rpb25QYXRoIiwiYXJndW1lbnRQYXRoIiwiYXJndW1lbnQiLCJ0eXBlTmFtZXMiLCJ5ZCIsIlFhIiwiR2EiLCJTZSIsImlzUmVxdWlyZWQiLCJtYWtlUmVxdWlyZWQiLCJobiIsInhkIiwiYmQiLCJFZCIsIndkIiwiUGQiLCJ2ZCIsIlRkIiwiQ2QiLCJBZCIsIk1kIiwiUmQiLCJTZCIsInhuIiwib3V0cHV0VHlwZSIsImlzUmVsYXRpb24iLCJmciIsIlphIiwiSWQiLCJ6YSIsIlhhIiwiaW5wdXRUeXBlIiwiRmQiLCJpbnB1dFR5cGVzIiwiWWEiLCJlbGVtZW50VHlwZSIsImJuIiwiaW5mZXJyZWRUeXBlIiwidW5kZXJseWluZ0Vycm9yIiwiY29uc3RyYWludHMiLCJtaW5GaWVsZENvdW50IiwicmVxdWlyZWRGaWVsZHMiLCJtYXhGaWVsZENvdW50Iiwia2QiLCJFbiIsImVycm9yRm9ybWF0IiwiRGQiLCJydW5Db21tYW5kUmF3IiwiZWwiLCJLaSIsInJvb3RBcmdzIiwiUWkiLCJybCIsInNlbGVjdGlvbiIsIk9kIiwidGhyb3dWYWxpZGF0aW9uRXJyb3IiLCJnZXRTZWxlY3Rpb25QYXRoIiwiTGQiLCJfZCIsImlzUmF3QWN0aW9uIiwiJGNvbXBvc2l0ZXMiLCIkc2NhbGFycyIsIk5kIiwiZmluZEZpZWxkIiwiZ2V0T3V0cHV0VHlwZURlc2NyaXB0aW9uIiwibmVzdFNlbGVjdGlvbiIsImdldENvbXB1dGVkRmllbGRzIiwidGwiLCIkdHlwZSIsImdldEFyZ3VtZW50UGF0aCIsImdldEFyZ3VtZW50TmFtZSIsIl9yZWYiLCJfY29udGFpbmVyIiwiJGQiLCJxZCIsIlZkIiwibmVzdEFyZ3VtZW50IiwiX19wcmlzbWFSYXdQYXJhbWV0ZXJzX18iLCJubCIsImNvbW1hbmQiLCJpbCIsImdyIiwib2wiLCJqZCIsInByaXNtYV9fdHlwZSIsInByaXNtYV9fdmFsdWUiLCJCZCIsImFsIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJzbCIsIlVkIiwibGwiLCJHaSIsIkppIiwiYWN0aXZlUHJvdmlkZXJGbGF2b3VyIiwicGFyYW1ldGVycyIsInVsIiwicmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzIiwibWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzIiwiY2wiLCJIaSIsInBsIiwicmVqZWN0IiwiZmluYWxseSIsInJlcXVlc3RUcmFuc2FjdGlvbiIsImRsIiwiZ2V0QWN0aXZlQ29udGV4dCIsIldpIiwiZ2V0R2xvYmFsVHJhY2luZ0hlbHBlciIsIlBSSVNNQV9JTlNUUlVNRU5UQVRJT04iLCJoZWxwZXIiLCJtbCIsImZsIiwiS2QiLCJnbCIsInduIiwiX21pZGRsZXdhcmVzIiwidXNlIiwiaGwiLCJQbiIsInZuIiwiUWQiLCJHZCIsIkJpZ0ludCIsInlsIiwiWWkiLCJzb3J0IiwiSmQiLCJjcmVhdGVPbmUiLCJkZWxldGVPbmUiLCJ1cGRhdGVPbmUiLCJ1cHNlcnRPbmUiLCJaaSIsIlRuIiwidGlja0FjdGl2ZSIsImJhdGNoZXMiLCJiYXRjaEJ5IiwibmV4dFRpY2siLCJkaXNwYXRjaEJhdGNoZXMiLCJzaW5nbGVMb2FkZXIiLCJiYXRjaE9yZGVyIiwiYmF0Y2hMb2FkZXIiLCJIZCIsIkNuIiwiZGF0YWxvYWRlciIsIm90ZWxQYXJlbnRDdHgiLCJwcm90b2NvbFF1ZXJ5IiwiX3RyYWNpbmdIZWxwZXIiLCJXZCIsImNvbnRhaW5zV3JpdGUiLCJtYXBRdWVyeUVuZ2luZVJlc3VsdCIsInhsIiwiaXNXcml0ZSIsImhhbmRsZUFuZExvZ1JlcXVlc3RFcnJvciIsInVucGFjayIsIlBSSVNNQV9DTElFTlRfR0VUX1RJTUUiLCJoYW5kbGVSZXF1ZXN0RXJyb3IiLCJ6ZCIsIllkIiwiYmwiLCJzYW5pdGl6ZU1lc3NhZ2UiLCJFbCIsIndsIiwiUGwiLCJ2bCIsIk1sIiwicSIsIlRsIiwiQ2wiLCJBbCIsIlhkIiwiZGF0YXNvdXJjZU5hbWVzIiwiTXQiLCJfX2ludGVybmFsIiwiUmwiLCJlbSIsImRpc3RhbmNlIiwiU2wiLCJVZSIsIk5PREVfQ0xJRU5UIiwidG0iLCJybSIsIm5tIiwibmV4dElkIiwiRXZlbnRFbWl0dGVyIiwiX3ByZXZpZXdGZWF0dXJlcyIsIl9hY3RpdmVQcm92aWRlciIsInJlbGF0aXZlRW52UGF0aHMiLCJpbmplY3RhYmxlRWRnZUVudiIsInJlbGF0aXZlUGF0aCIsIl9lbmdpbmVDb25maWciLCJhbGxvd1RyaWdnZXJQYW5pYyIsImZpbGVuYW1lIiwiYmluYXJ5UGF0aCIsImVuZ2luZUVuZHBvaW50IiwiZmxhZ3MiLCJfcmVxdWVzdEhhbmRsZXIiLCJfbWV0cmljcyIsIiRjb25uZWN0IiwiJGRpc2Nvbm5lY3QiLCIkZXhlY3V0ZVJhd0ludGVybmFsIiwibWlkZGxld2FyZUFyZ3NNYXBwZXIiLCIkZXhlY3V0ZVJhdyIsIklsIiwiJGV4ZWN1dGVSYXdVbnNhZmUiLCIkcnVuQ29tbWFuZFJhdyIsIiRxdWVyeVJhd0ludGVybmFsIiwiJHF1ZXJ5UmF3IiwiJHF1ZXJ5UmF3VW5zYWZlIiwiX3RyYW5zYWN0aW9uV2l0aEFycmF5IiwicHJvbWlzZXMiLCJfdHJhbnNhY3Rpb25XaXRoQ2FsbGJhY2siLCJfY3JlYXRlSXR4Q2xpZW50IiwiJHRyYW5zYWN0aW9uIiwicnVuSW5UcmFuc2FjdGlvbiIsIm1pZGRsZXdhcmUiLCJhY3RpdmUiLCJBc3luY1Jlc291cmNlIiwicnVuSW5Bc3luY1Njb3BlIiwib3RlbENoaWxkQ3R4IiwiJG1ldHJpY3MiLCJfaGFzUHJldmlld0ZsYWciLCJpbSIsIm9tIiwiaXRlcmF0b3IiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJ0b1ByaW1pdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.prisma/client/runtime/library.js\n");

/***/ })

};
;